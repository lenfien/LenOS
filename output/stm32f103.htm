<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\stm32f103.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\stm32f103.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 69]: Last Updated: Sat Jun 08 08:49:02 2013
<BR><P>
<H3>Maximum Stack Usage =        656 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TextBox::update(void*) &rArr; Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short) &rArr; Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[660]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[66e]">derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66e]">derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)</a><BR>
 <LI><a href="#[66d]">find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66d]">find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)</a><BR>
 <LI><a href="#[66b]">traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66b]">traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2e]">ADC1_2_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">ADC3_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">BusFault_Handler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">CAN1_RX1_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">CAN1_SCE_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">DMA1_Channel1_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">DMA1_Channel2_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">DMA1_Channel3_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel4_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel5_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel6_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel7_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">DMA2_Channel1_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">DMA2_Channel2_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">DMA2_Channel3_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">DMA2_Channel4_5_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DebugMon_Handler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">EXTI0_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">EXTI15_10_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">EXTI1_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI2_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">EXTI3_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">EXTI4_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">EXTI9_5_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">FLASH_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">FSMC_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">HardFault_Handler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">I2C1_ER_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">I2C1_EV_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">I2C2_ER_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">I2C2_EV_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">MemManage_Handler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">NMI_Handler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">PVD_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">PendSV_Handler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">RCC_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">RTCAlarm_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">SDIO_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">SPI1_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI2_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">SPI3_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">SVC_Handler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">SysTick_Handler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">SystemInit</a> from sys.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[1e]">TAMPER_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">TIM1_BRK_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM1_CC_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM1_TRG_COM_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM1_UP_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM2_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM3_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM4_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">TIM5_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">TIM6_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">TIM7_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">TIM8_BRK_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">TIM8_CC_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">TIM8_TRG_COM_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">TIM8_UP_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">UART4_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">UART5_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">USART1_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">USART2_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">USART3_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">USBWakeUp_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USB_HP_CAN1_TX_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USB_LP_CAN1_RX0_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">UsageFault_Handler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">WWDG_IRQHandler</a> from isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14f]">down_event()</a> from usermain.o(.text) referenced from usermain.o(.text)
 <LI><a href="#[14b]">left_event()</a> from usermain.o(.text) referenced from usermain.o(.text)
 <LI><a href="#[14d]">right_event()</a> from usermain.o(.text) referenced from usermain.o(.text)
 <LI><a href="#[66]">tbc_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</a> from rtti.o(i._Z12tbc_downcastPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE) referenced from rtti.o(i.__dynamic_cast)
 <LI><a href="#[149]">multi_window_test(Screen::Point, Touchable*, Touchable*)</a> from usermain.o(.text) referenced from usermain.o(.text)
 <LI><a href="#[67]">tbc_post_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</a> from rtti.o(i._Z17tbc_post_downcastPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE) referenced from rtti.o(i.__dynamic_cast)
 <LI><a href="#[13e]">btn_lenCar_handler(Screen::Point, Touchable*, Touchable*)</a> from usermain.o(.text) referenced from usermain.o(.text)
 <LI><a href="#[142]">multi_process_test(Screen::Point, Touchable*, Touchable*)</a> from usermain.o(.text) referenced from usermain.o(.text)
 <LI><a href="#[64]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[140]">multi_process_test_handler()</a> from usermain.o(.text) referenced from usermain.o(.text)
 <LI><a href="#[63]">__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[141]">multi_process_test_handler1()</a> from usermain.o(.text) referenced from usermain.o(.text)
 <LI><a href="#[14e]">up_event()</a> from usermain.o(.text) referenced from usermain.o(.text)
 <LI><a href="#[5f1]">is_maller(Pad*, Pad*)</a> from pad.o(.text) referenced 2 times from pad.o(.text)
 <LI><a href="#[13b]">window_UI(Window*)</a> from usermain.o(.text) referenced from usermain.o(.text)
 <LI><a href="#[76]">ControlPad::hold_handler(Screen::Point, Touchable*, Touchable*)</a> from controlpad.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[75]">ControlPad::touch_handler(Screen::Point, Touchable*, Touchable*)</a> from controlpad.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[78]">ControlPad::release_handler(Screen::Point, Touchable*, Touchable*)</a> from controlpad.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[77]">ControlPad::long_hold_handler(Screen::Point, Touchable*, Touchable*)</a> from controlpad.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[6b]">ControlPad::draw(Screen::Point)</a> from controlpad.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[6c]">ControlPad::update(void*)</a> from controlpad.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[6a]">ControlPad::~ControlPad__deallocating()</a> from controlpad.o(i._ZN10ControlPadD0Ev) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[69]">ControlPad::~ControlPad()</a> from controlpad.o(i._ZN10ControlPadD1Ev) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[74]">TouchWidget::meet_condition(Screen::Point)</a> from touchwidget.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[74]">TouchWidget::meet_condition(Screen::Point)</a> from touchwidget.o(.text) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[74]">TouchWidget::meet_condition(Screen::Point)</a> from touchwidget.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[74]">TouchWidget::meet_condition(Screen::Point)</a> from touchwidget.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[6d]">TouchWidget::is_touch_widget()</a> from touchwidget.o(i._ZN11TouchWidget15is_touch_widgetEv) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[6d]">TouchWidget::is_touch_widget()</a> from touchwidget.o(i._ZN11TouchWidget15is_touch_widgetEv) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[6d]">TouchWidget::is_touch_widget()</a> from touchwidget.o(i._ZN11TouchWidget15is_touch_widgetEv) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[6d]">TouchWidget::is_touch_widget()</a> from touchwidget.o(i._ZN11TouchWidget15is_touch_widgetEv) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[6d]">TouchWidget::is_touch_widget()</a> from touchwidget.o(i._ZN11TouchWidget15is_touch_widgetEv) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[81]">TouchWidget::~TouchWidget__deallocating()</a> from touchwidget.o(i._ZN11TouchWidgetD0Ev) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[80]">TouchWidget::~TouchWidget__sub_object()</a> from touchwidget.o(i._ZN11TouchWidgetD2Ev) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[92]">Pad::add_widget(Widget*, Screen::Point)</a> from pad.o(.text) referenced from pad.o(.constdata__ZTV3Pad)
 <LI><a href="#[8c]">Pad::valid_area(int)</a> from pad.o(i._ZN3Pad10valid_areaEi) referenced from pad.o(.constdata__ZTV3Pad)
 <LI><a href="#[8c]">Pad::valid_area(int)</a> from pad.o(i._ZN3Pad10valid_areaEi) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[90]">Pad::record_frame(Screen::Point)</a> from pad.o(.text) referenced from pad.o(.constdata__ZTV3Pad)
 <LI><a href="#[90]">Pad::record_frame(Screen::Point)</a> from pad.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[90]">Pad::record_frame(Screen::Point)</a> from pad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[91]">Pad::recover_frame()</a> from pad.o(.text) referenced from pad.o(.constdata__ZTV3Pad)
 <LI><a href="#[91]">Pad::recover_frame()</a> from pad.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[91]">Pad::recover_frame()</a> from pad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[93]">Pad::widget_off_position()</a> from pad.o(i._ZN3Pad19widget_off_positionEv) referenced from pad.o(.constdata__ZTV3Pad)
 <LI><a href="#[93]">Pad::widget_off_position()</a> from pad.o(i._ZN3Pad19widget_off_positionEv) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[89]">Pad::draw(Screen::Point)</a> from pad.o(.text) referenced from pad.o(.constdata__ZTV3Pad)
 <LI><a href="#[89]">Pad::draw(Screen::Point)</a> from pad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[94]">Pad::active()</a> from pad.o(.text) referenced from pad.o(.constdata__ZTV3Pad)
 <LI><a href="#[94]">Pad::active()</a> from pad.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[94]">Pad::active()</a> from pad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[8a]">Pad::dedraw()</a> from pad.o(.text) referenced from pad.o(.constdata__ZTV3Pad)
 <LI><a href="#[8a]">Pad::dedraw()</a> from pad.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[8a]">Pad::dedraw()</a> from pad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[8e]">Pad::record(unsigned char)</a> from pad.o(.text) referenced from pad.o(.constdata__ZTV3Pad)
 <LI><a href="#[8e]">Pad::record(unsigned char)</a> from pad.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[8e]">Pad::record(unsigned char)</a> from pad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[8b]">Pad::update(void*)</a> from pad.o(.text) referenced from pad.o(.constdata__ZTV3Pad)
 <LI><a href="#[8b]">Pad::update(void*)</a> from pad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[8f]">Pad::recover(unsigned char)</a> from pad.o(.text) referenced from pad.o(.constdata__ZTV3Pad)
 <LI><a href="#[8f]">Pad::recover(unsigned char)</a> from pad.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[8f]">Pad::recover(unsigned char)</a> from pad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[8d]">Pad::all_area()</a> from pad.o(i._ZN3Pad8all_areaEv) referenced from pad.o(.constdata__ZTV3Pad)
 <LI><a href="#[8d]">Pad::all_area()</a> from pad.o(i._ZN3Pad8all_areaEv) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[8d]">Pad::all_area()</a> from pad.o(i._ZN3Pad8all_areaEv) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[88]">Pad::~Pad__deallocating()</a> from pad.o(.text) referenced from pad.o(.constdata__ZTV3Pad)
 <LI><a href="#[87]">Pad::~Pad()</a> from pad.o(.text) referenced from pad.o(.constdata__ZTV3Pad)
 <LI><a href="#[97]">Text::draw(Screen::Point)</a> from text.o(.text) referenced from text.o(.constdata__ZTV4Text)
 <LI><a href="#[98]">Text::update(void*)</a> from text.o(.text) referenced from text.o(.constdata__ZTV4Text)
 <LI><a href="#[96]">Text::~Text__deallocating()</a> from text.o(i._ZN4TextD0Ev) referenced from text.o(.constdata__ZTV4Text)
 <LI><a href="#[95]">Text::~Text()</a> from text.o(i._ZN4TextD1Ev) referenced from text.o(.constdata__ZTV4Text)
 <LI><a href="#[5d]">Datas&lang;Color::tag&rang;::Datas()</a> from pad.o(t._ZN5DatasIN5Color3tagEEC1Ev) referenced from pad.o(.text)
 <LI><a href="#[5e]">Datas&lang;Color::tag&rang;::~Datas()</a> from pad.o(t._ZN5DatasIN5Color3tagEED1Ev) referenced from pad.o(.text)
 <LI><a href="#[5b]">Queue&lang;System::Event&rang;::~Queue()</a> from system.o(t._ZN5QueueIN6System5EventEED1Ev) referenced from system.o(.text)
 <LI><a href="#[a1]">Button::hold_handler(Screen::Point, Touchable*, Touchable*)</a> from button.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[a0]">Button::touch_handler(Screen::Point, Touchable*, Touchable*)</a> from button.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[a3]">Button::release_handler(Screen::Point, Touchable*, Touchable*)</a> from button.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[a2]">Button::long_hold_handler(Screen::Point, Touchable*, Touchable*)</a> from button.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[9c]">Button::draw(Screen::Point)</a> from button.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[9d]">Button::dedraw()</a> from button.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[9e]">Button::update(void*)</a> from button.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[9f]">Button::get_info()</a> from button.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[9b]">Button::~Button__deallocating()</a> from button.o(i._ZN6ButtonD0Ev) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[9a]">Button::~Button()</a> from button.o(i._ZN6ButtonD1Ev) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[627]">LenCar::pad_up_event()</a> from lencar.o(.text) referenced from lencar.o(.text)
 <LI><a href="#[628]">LenCar::pad_down_event()</a> from lencar.o(.text) referenced from lencar.o(.text)
 <LI><a href="#[62b]">LenCar::pad_idle_event()</a> from lencar.o(.text) referenced from lencar.o(.text)
 <LI><a href="#[62a]">LenCar::pad_left_event()</a> from lencar.o(.text) referenced from lencar.o(.text)
 <LI><a href="#[629]">LenCar::pad_right_event()</a> from lencar.o(.text) referenced from lencar.o(.text)
 <LI><a href="#[61f]">LenCar::OnOff_release_handler(Screen::Point, Touchable*, Touchable*)</a> from lencar.o(.text) referenced from lencar.o(.text)
 <LI><a href="#[620]">LenCar::Switch_release_handler(Screen::Point, Touchable*, Touchable*)</a> from lencar.o(.text) referenced from lencar.o(.text)
 <LI><a href="#[624]">LenCar::go()</a> from lencar.o(.text) referenced from lencar.o(.text)
 <LI><a href="#[68]">Screen::Point::Point()</a> from paintable.o(i._ZN6Screen5PointC1Ev) referenced from paintable.o(t._ZN6VectorIN6Screen5PointEE6resizeEv)
 <LI><a href="#[ad]">Slider::hold_handler(Screen::Point, Touchable*, Touchable*)</a> from slider.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[ac]">Slider::touch_handler(Screen::Point, Touchable*, Touchable*)</a> from slider.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[af]">Slider::release_handler(Screen::Point, Touchable*, Touchable*)</a> from slider.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[ae]">Slider::long_hold_handler(Screen::Point, Touchable*, Touchable*)</a> from slider.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[aa]">Slider::draw(Screen::Point)</a> from slider.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[ab]">Slider::update(void*)</a> from slider.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[a9]">Slider::~Slider__deallocating()</a> from slider.o(i._ZN6SliderD0Ev) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[a8]">Slider::~Slider()</a> from slider.o(i._ZN6SliderD1Ev) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[5f]">Vector&lang;Pad*&rang;::~Vector()</a> from pad.o(t._ZN6VectorIP3PadED1Ev) referenced from pad.o(.text)
 <LI><a href="#[5c]">Vector&lang;Proc*&rang;::~Vector()</a> from system.o(t._ZN6VectorIP4ProcED1Ev) referenced from system.o(.text)
 <LI><a href="#[5a]">Vector&lang;Touchable*&rang;::~Vector()</a> from system.o(t._ZN6VectorIP9TouchableED1Ev) referenced from system.o(.text)
 <LI><a href="#[71]">Widget::set_father(Pad*)</a> from widget.o(i._ZN6Widget10set_fatherEP3Pad) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[71]">Widget::set_father(Pad*)</a> from widget.o(i._ZN6Widget10set_fatherEP3Pad) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[71]">Widget::set_father(Pad*)</a> from widget.o(i._ZN6Widget10set_fatherEP3Pad) referenced from text.o(.constdata__ZTV4Text)
 <LI><a href="#[71]">Widget::set_father(Pad*)</a> from widget.o(i._ZN6Widget10set_fatherEP3Pad) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[71]">Widget::set_father(Pad*)</a> from widget.o(i._ZN6Widget10set_fatherEP3Pad) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[71]">Widget::set_father(Pad*)</a> from widget.o(i._ZN6Widget10set_fatherEP3Pad) referenced from widget.o(.constdata__ZTV6Widget)
 <LI><a href="#[6f]">Widget::real_position()</a> from textbox.o(i._ZN6Widget13real_positionEv) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[6f]">Widget::real_position()</a> from textbox.o(i._ZN6Widget13real_positionEv) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[6f]">Widget::real_position()</a> from textbox.o(i._ZN6Widget13real_positionEv) referenced from text.o(.constdata__ZTV4Text)
 <LI><a href="#[6f]">Widget::real_position()</a> from textbox.o(i._ZN6Widget13real_positionEv) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[6f]">Widget::real_position()</a> from textbox.o(i._ZN6Widget13real_positionEv) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[6f]">Widget::real_position()</a> from textbox.o(i._ZN6Widget13real_positionEv) referenced from widget.o(.constdata__ZTV6Widget)
 <LI><a href="#[6f]">Widget::real_position()</a> from textbox.o(i._ZN6Widget13real_positionEv) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[99]">Widget::is_touch_widget()</a> from widget.o(i._ZN6Widget15is_touch_widgetEv) referenced from text.o(.constdata__ZTV4Text)
 <LI><a href="#[99]">Widget::is_touch_widget()</a> from widget.o(i._ZN6Widget15is_touch_widgetEv) referenced from widget.o(.constdata__ZTV6Widget)
 <LI><a href="#[72]">Widget::set_father_window(unsigned char, int, int)</a> from widget.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[72]">Widget::set_father_window(unsigned char, int, int)</a> from widget.o(.text) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[72]">Widget::set_father_window(unsigned char, int, int)</a> from widget.o(.text) referenced from text.o(.constdata__ZTV4Text)
 <LI><a href="#[72]">Widget::set_father_window(unsigned char, int, int)</a> from widget.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[72]">Widget::set_father_window(unsigned char, int, int)</a> from widget.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[72]">Widget::set_father_window(unsigned char, int, int)</a> from widget.o(.text) referenced from widget.o(.constdata__ZTV6Widget)
 <LI><a href="#[72]">Widget::set_father_window(unsigned char, int, int)</a> from widget.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[73]">Widget::release_father_window(Screen::RectType)</a> from widget.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[73]">Widget::release_father_window(Screen::RectType)</a> from widget.o(.text) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[73]">Widget::release_father_window(Screen::RectType)</a> from widget.o(.text) referenced from text.o(.constdata__ZTV4Text)
 <LI><a href="#[73]">Widget::release_father_window(Screen::RectType)</a> from widget.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[73]">Widget::release_father_window(Screen::RectType)</a> from widget.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[73]">Widget::release_father_window(Screen::RectType)</a> from widget.o(.text) referenced from widget.o(.constdata__ZTV6Widget)
 <LI><a href="#[73]">Widget::release_father_window(Screen::RectType)</a> from widget.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[6e]">Widget::set_relataive_position(Screen::Point)</a> from widget.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[6e]">Widget::set_relataive_position(Screen::Point)</a> from widget.o(.text) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[6e]">Widget::set_relataive_position(Screen::Point)</a> from widget.o(.text) referenced from text.o(.constdata__ZTV4Text)
 <LI><a href="#[6e]">Widget::set_relataive_position(Screen::Point)</a> from widget.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[6e]">Widget::set_relataive_position(Screen::Point)</a> from widget.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[6e]">Widget::set_relataive_position(Screen::Point)</a> from widget.o(.text) referenced from widget.o(.constdata__ZTV6Widget)
 <LI><a href="#[6e]">Widget::set_relataive_position(Screen::Point)</a> from widget.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[70]">Widget::real_area()</a> from widget.o(i._ZN6Widget9real_areaEv) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[70]">Widget::real_area()</a> from widget.o(i._ZN6Widget9real_areaEv) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[70]">Widget::real_area()</a> from widget.o(i._ZN6Widget9real_areaEv) referenced from text.o(.constdata__ZTV4Text)
 <LI><a href="#[70]">Widget::real_area()</a> from widget.o(i._ZN6Widget9real_areaEv) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[70]">Widget::real_area()</a> from widget.o(i._ZN6Widget9real_areaEv) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[70]">Widget::real_area()</a> from widget.o(i._ZN6Widget9real_areaEv) referenced from widget.o(.constdata__ZTV6Widget)
 <LI><a href="#[70]">Widget::real_area()</a> from widget.o(i._ZN6Widget9real_areaEv) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[b5]">Widget::~Widget__deallocating()</a> from widget.o(i._ZN6WidgetD0Ev) referenced from widget.o(.constdata__ZTV6Widget)
 <LI><a href="#[b4]">Widget::~Widget__sub_object()</a> from widget.o(i._ZN6WidgetD2Ev) referenced from widget.o(.constdata__ZTV6Widget)
 <LI><a href="#[bb]">Window::add_widget(Widget*, Screen::Point)</a> from window.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[ba]">Window::valid_area(int)</a> from window.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[bf]">Window::hold_handler(Screen::Point, Touchable*, Touchable*)</a> from window.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[be]">Window::touch_handler(Screen::Point, Touchable*, Touchable*)</a> from window.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[c1]">Window::release_handler(Screen::Point, Touchable*, Touchable*)</a> from window.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[609]">Window::shutdown_handler(Screen::Point, Touchable*, Touchable*)</a> from window.o(.text) referenced from window.o(.text)
 <LI><a href="#[c0]">Window::long_hold_handler(Screen::Point, Touchable*, Touchable*)</a> from window.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[bc]">Window::widget_off_position()</a> from window.o(i._ZN6Window19widget_off_positionEv) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[b8]">Window::draw(Screen::Point)</a> from window.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[b9]">Window::update(void*)</a> from window.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[b7]">Window::~Window__deallocating()</a> from window.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[b6]">Window::~Window()</a> from window.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[da]">TextBox::set_father(Pad*)</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[dd]">TextBox::hold_handler(Screen::Point, Touchable*, Touchable*)</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[dc]">TextBox::touch_handler(Screen::Point, Touchable*, Touchable*)</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[db]">TextBox::meet_condition(Screen::Point)</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[df]">TextBox::release_handler(Screen::Point, Touchable*, Touchable*)</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[de]">TextBox::long_hold_handler(Screen::Point, Touchable*, Touchable*)</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[d8]">TextBox::draw(Screen::Point)</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[d9]">TextBox::update(void*)</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[d7]">TextBox::~TextBox__deallocating()</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[d6]">TextBox::~TextBox()</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[e9]">TouchPad::add_widget(Widget*, Screen::Point)</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[eb]">TouchPad::hold_handler(Screen::Point, Touchable*, Touchable*)</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[ea]">TouchPad::touch_handler(Screen::Point, Touchable*, Touchable*)</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[bd]">TouchPad::meet_condition(Screen::Point)</a> from touchpad.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[bd]">TouchPad::meet_condition(Screen::Point)</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[ed]">TouchPad::release_handler(Screen::Point, Touchable*, Touchable*)</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[ec]">TouchPad::long_hold_handler(Screen::Point, Touchable*, Touchable*)</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[c2]">TouchPad::execute(Touchable*, Touchable*)</a> from touchpad.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[c2]">TouchPad::execute(Touchable*, Touchable*)</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[e8]">TouchPad::~TouchPad__deallocating()</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[e7]">TouchPad::~TouchPad()</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[cb]">Paintable::idraw_line(Screen::Point, Screen::Point, unsigned, unsigned char)</a> from paintable.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[cb]">Paintable::idraw_line(Screen::Point, Screen::Point, unsigned, unsigned char)</a> from paintable.o(.text) referenced from paintable.o(.constdata__ZTV9Paintable)
 <LI><a href="#[d1]">Paintable::idraw_oval(unsigned short, unsigned short, Screen::Point, unsigned)</a> from paintable.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[d1]">Paintable::idraw_oval(unsigned short, unsigned short, Screen::Point, unsigned)</a> from paintable.o(.text) referenced from paintable.o(.constdata__ZTV9Paintable)
 <LI><a href="#[cd]">Paintable::idraw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short)</a> from paintable.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[cd]">Paintable::idraw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short)</a> from paintable.o(.text) referenced from paintable.o(.constdata__ZTV9Paintable)
 <LI><a href="#[d2]">Paintable::idraw_point(Screen::Point, unsigned)</a> from paintable.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[d2]">Paintable::idraw_point(Screen::Point, unsigned)</a> from paintable.o(.text) referenced from paintable.o(.constdata__ZTV9Paintable)
 <LI><a href="#[d3]">Paintable::idraw_bitmap(Screen::Point, short, short, const unsigned char*)</a> from paintable.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[d3]">Paintable::idraw_bitmap(Screen::Point, short, short, const unsigned char*)</a> from paintable.o(.text) referenced from paintable.o(.constdata__ZTV9Paintable)
 <LI><a href="#[d4]">Paintable::idraw_bitmap(Screen::Point, short, short, Datas&lang;Color::tag&rang;&)</a> from paintable.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[d4]">Paintable::idraw_bitmap(Screen::Point, short, short, Datas&lang;Color::tag&rang;&)</a> from paintable.o(.text) referenced from paintable.o(.constdata__ZTV9Paintable)
 <LI><a href="#[cf]">Paintable::idraw_circle(Screen::Point, unsigned short, unsigned)</a> from paintable.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[cf]">Paintable::idraw_circle(Screen::Point, unsigned short, unsigned)</a> from paintable.o(.text) referenced from paintable.o(.constdata__ZTV9Paintable)
 <LI><a href="#[cc]">Paintable::idraw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short)</a> from paintable.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[cc]">Paintable::idraw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short)</a> from paintable.o(.text) referenced from paintable.o(.constdata__ZTV9Paintable)
 <LI><a href="#[d0]">Paintable::idraw_empty_circle(Screen::Point, unsigned short, unsigned)</a> from paintable.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[d0]">Paintable::idraw_empty_circle(Screen::Point, unsigned short, unsigned)</a> from paintable.o(.text) referenced from paintable.o(.constdata__ZTV9Paintable)
 <LI><a href="#[ce]">Paintable::idraw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)</a> from paintable.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[ce]">Paintable::idraw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)</a> from paintable.o(.text) referenced from paintable.o(.constdata__ZTV9Paintable)
 <LI><a href="#[d5]">Paintable::iprintf(Screen::Point, char*, ...)</a> from paintable.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[d5]">Paintable::iprintf(Screen::Point, char*, ...)</a> from paintable.o(.text) referenced from paintable.o(.constdata__ZTV9Paintable)
 <LI><a href="#[84]">Touchable::hold_handler(Screen::Point, Touchable*, Touchable*)</a> from touchable.o(.text) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[84]">Touchable::hold_handler(Screen::Point, Touchable*, Touchable*)</a> from touchable.o(.text) referenced from touchable.o(.constdata__ZTV9Touchable)
 <LI><a href="#[83]">Touchable::touch_handler(Screen::Point, Touchable*, Touchable*)</a> from touchable.o(.text) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[83]">Touchable::touch_handler(Screen::Point, Touchable*, Touchable*)</a> from touchable.o(.text) referenced from touchable.o(.constdata__ZTV9Touchable)
 <LI><a href="#[f4]">Touchable::meet_condition(Screen::Point)</a> from touchable.o(.text) referenced from touchable.o(.constdata__ZTV9Touchable)
 <LI><a href="#[86]">Touchable::release_handler(Screen::Point, Touchable*, Touchable*)</a> from touchable.o(.text) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[86]">Touchable::release_handler(Screen::Point, Touchable*, Touchable*)</a> from touchable.o(.text) referenced from touchable.o(.constdata__ZTV9Touchable)
 <LI><a href="#[7a]">Touchable::set_touch_vector(Vector&lang;Touchable*&rang;*)</a> from touchable.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[7a]">Touchable::set_touch_vector(Vector&lang;Touchable*&rang;*)</a> from touchable.o(.text) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[7a]">Touchable::set_touch_vector(Vector&lang;Touchable*&rang;*)</a> from touchable.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[7a]">Touchable::set_touch_vector(Vector&lang;Touchable*&rang;*)</a> from touchable.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[7a]">Touchable::set_touch_vector(Vector&lang;Touchable*&rang;*)</a> from touchable.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[7a]">Touchable::set_touch_vector(Vector&lang;Touchable*&rang;*)</a> from touchable.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[7a]">Touchable::set_touch_vector(Vector&lang;Touchable*&rang;*)</a> from touchable.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[7a]">Touchable::set_touch_vector(Vector&lang;Touchable*&rang;*)</a> from touchable.o(.text) referenced from touchable.o(.constdata__ZTV9Touchable)
 <LI><a href="#[85]">Touchable::long_hold_handler(Screen::Point, Touchable*, Touchable*)</a> from touchable.o(.text) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[85]">Touchable::long_hold_handler(Screen::Point, Touchable*, Touchable*)</a> from touchable.o(.text) referenced from touchable.o(.constdata__ZTV9Touchable)
 <LI><a href="#[79]">Touchable::execute(Touchable*, Touchable*)</a> from touchable.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[79]">Touchable::execute(Touchable*, Touchable*)</a> from touchable.o(.text) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[79]">Touchable::execute(Touchable*, Touchable*)</a> from touchable.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[79]">Touchable::execute(Touchable*, Touchable*)</a> from touchable.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[79]">Touchable::execute(Touchable*, Touchable*)</a> from touchable.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[79]">Touchable::execute(Touchable*, Touchable*)</a> from touchable.o(.text) referenced from touchable.o(.constdata__ZTV9Touchable)
 <LI><a href="#[f6]">Touchable::~Touchable__deallocating()</a> from touchable.o(.text) referenced from touchable.o(.constdata__ZTV9Touchable)
 <LI><a href="#[f5]">Touchable::~Touchable()</a> from touchable.o(.text) referenced from touchable.o(.constdata__ZTV9Touchable)
 <LI><a href="#[c8]">thunk{-244} to Window::hold_handler(Screen::Point, Touchable*, Touchable*)</a> from window.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[c7]">thunk{-244} to Window::touch_handler(Screen::Point, Touchable*, Touchable*)</a> from window.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[ca]">thunk{-244} to Window::release_handler(Screen::Point, Touchable*, Touchable*)</a> from window.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[c9]">thunk{-244} to Window::long_hold_handler(Screen::Point, Touchable*, Touchable*)</a> from window.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[c6]">thunk{-244} to Window::~Window__deallocating()</a> from window.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[c5]">thunk{-244} to Window::~Window()</a> from window.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[f1]">thunk{-244} to TouchPad::hold_handler(Screen::Point, Touchable*, Touchable*)</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[f0]">thunk{-244} to TouchPad::touch_handler(Screen::Point, Touchable*, Touchable*)</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[c4]">thunk{-244} to TouchPad::meet_condition(Screen::Point)</a> from touchpad.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[c4]">thunk{-244} to TouchPad::meet_condition(Screen::Point)</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[f3]">thunk{-244} to TouchPad::release_handler(Screen::Point, Touchable*, Touchable*)</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[f2]">thunk{-244} to TouchPad::long_hold_handler(Screen::Point, Touchable*, Touchable*)</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[c3]">thunk{-244} to TouchPad::execute(Touchable*, Touchable*)</a> from touchpad.o(.text) referenced from window.o(.constdata__ZTV6Window)
 <LI><a href="#[c3]">thunk{-244} to TouchPad::execute(Touchable*, Touchable*)</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[ef]">thunk{-244} to TouchPad::~TouchPad__deallocating()</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[ee]">thunk{-244} to TouchPad::~TouchPad()</a> from touchpad.o(.text) referenced from touchpad.o(.constdata__ZTV8TouchPad)
 <LI><a href="#[7d]">thunk{-36} to ControlPad::hold_handler(Screen::Point, Touchable*, Touchable*)</a> from controlpad.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[7c]">thunk{-36} to ControlPad::touch_handler(Screen::Point, Touchable*, Touchable*)</a> from controlpad.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[7f]">thunk{-36} to ControlPad::release_handler(Screen::Point, Touchable*, Touchable*)</a> from controlpad.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[7e]">thunk{-36} to ControlPad::long_hold_handler(Screen::Point, Touchable*, Touchable*)</a> from controlpad.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[7b]">thunk{-36} to TouchWidget::meet_condition(Screen::Point)</a> from touchwidget.o(.text) referenced from controlpad.o(.constdata__ZTV10ControlPad)
 <LI><a href="#[7b]">thunk{-36} to TouchWidget::meet_condition(Screen::Point)</a> from touchwidget.o(.text) referenced from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[7b]">thunk{-36} to TouchWidget::meet_condition(Screen::Point)</a> from touchwidget.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[7b]">thunk{-36} to TouchWidget::meet_condition(Screen::Point)</a> from touchwidget.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[a5]">thunk{-36} to Button::hold_handler(Screen::Point, Touchable*, Touchable*)</a> from button.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[a4]">thunk{-36} to Button::touch_handler(Screen::Point, Touchable*, Touchable*)</a> from button.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[a7]">thunk{-36} to Button::release_handler(Screen::Point, Touchable*, Touchable*)</a> from button.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[a6]">thunk{-36} to Button::long_hold_handler(Screen::Point, Touchable*, Touchable*)</a> from button.o(.text) referenced from button.o(.constdata__ZTV6Button)
 <LI><a href="#[b1]">thunk{-36} to Slider::hold_handler(Screen::Point, Touchable*, Touchable*)</a> from slider.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[b0]">thunk{-36} to Slider::touch_handler(Screen::Point, Touchable*, Touchable*)</a> from slider.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[b3]">thunk{-36} to Slider::release_handler(Screen::Point, Touchable*, Touchable*)</a> from slider.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[b2]">thunk{-36} to Slider::long_hold_handler(Screen::Point, Touchable*, Touchable*)</a> from slider.o(.text) referenced from slider.o(.constdata__ZTV6Slider)
 <LI><a href="#[e4]">thunk{-36} to TextBox::hold_handler(Screen::Point, Touchable*, Touchable*)</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[e3]">thunk{-36} to TextBox::touch_handler(Screen::Point, Touchable*, Touchable*)</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[e0]">thunk{-36} to TextBox::meet_condition(Screen::Point)</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[e6]">thunk{-36} to TextBox::release_handler(Screen::Point, Touchable*, Touchable*)</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[e5]">thunk{-36} to TextBox::long_hold_handler(Screen::Point, Touchable*, Touchable*)</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[e2]">thunk{-36} to TextBox::~TextBox__deallocating()</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[e1]">thunk{-36} to TextBox::~TextBox()</a> from textbox.o(.text) referenced from textbox.o(.constdata__ZTV7TextBox)
 <LI><a href="#[65]">operator delete[] (void*)</a> from array_del.o(i._ZdaPv) referenced from cxa_vec_new.o(i.__cxa_vec_new)
 <LI><a href="#[82]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from touchwidget.o(.constdata__ZTV11TouchWidget)
 <LI><a href="#[82]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from widget.o(.constdata__ZTV6Widget)
 <LI><a href="#[82]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from widget.o(.constdata__ZTV7Graphic)
 <LI><a href="#[ff]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[f7]">__sti___10_System_cpp</a> from system.o(.text) referenced from system.o(.init_array)
 <LI><a href="#[f9]">__sti___10_screen_cpp</a> from screen.o(.text) referenced from screen.o(.init_array)
 <LI><a href="#[fe]">__sti___10_window_cpp</a> from window.o(.text) referenced from window.o(.init_array)
 <LI><a href="#[f8]">__sti___11_ads7843_cpp</a> from ads7843.o(.text) referenced from ads7843.o(.init_array)
 <LI><a href="#[fd]">__sti___12_touchPad_cpp</a> from touchpad.o(.text) referenced from touchpad.o(.init_array)
 <LI><a href="#[fc]">__sti___7_pad_cpp</a> from pad.o(.text) referenced from pad.o(.init_array)
 <LI><a href="#[fa]">__sti___8_font_cpp</a> from font.o(.text) referenced from font.o(.init_array)
 <LI><a href="#[fb]">__sti___9_color_cpp</a> from color.o(.text) referenced from color.o(.init_array)
 <LI><a href="#[62]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[61]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[60]">_sputc</a> from _sputc.o(.text) referenced 2 times from c89vsprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ff]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[101]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[103]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[6c6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6c7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6c8]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[6c9]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[6ca]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[104]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[633]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[106]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[108]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[10a]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[10b]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[6cb]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[6cc]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[10c]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[10e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[10f]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[110]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[112]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[114]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[116]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[117]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[118]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[11a]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[6cd]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[11c]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[11e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[120]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[122]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[6ce]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[131]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[6cf]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[124]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6d0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[126]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[6d1]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[6d2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[6d3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[128]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[6d4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[6d5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[129]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[6d6]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[6d7]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[6d8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[6d9]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[6da]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[6db]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[6dc]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[6dd]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[6de]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[6df]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[6e0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[6e1]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[6e2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[136]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[12c]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_1 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[6e3]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[6e4]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[6e5]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[6e6]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[6e7]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[6e8]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[102]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[6e9]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[12e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[130]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[6ea]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[132]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; System::system_loop() &rArr; System::user_init() &rArr; setup() &rArr; Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*) &rArr; TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6eb]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[661]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[135]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[6ec]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[137]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[166]"></a>__set_bit(unsigned*, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, com.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_MSM()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_MSM()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_disable_EVO()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_enable_EVO(unsigned char, unsigned char)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_CAL()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_RSTCAL()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JSWSTART()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_SWSTART()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_clear_PRx(unsigned char)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_bit14()
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_set_CTE()
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_set_CTI()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_SBK()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_SBK()
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_SBK()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_RMVF()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_BDRST()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM2RST()
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM3RST()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM4RST()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM5RST()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM6RST()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM7RST()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM12RST()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM13RST()
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM14RST()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_WWDGRST()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SPI2RST()
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SPI3RST()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USART2RST()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USART3RST()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_UART4RST()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_UART5RST()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_I2C1RST()
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_I2C2RST()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USBRST()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_CANRST()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_BKPRST()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PWRRST()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_DACRST()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIORST()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPARST()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBRST()
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPCRST()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPDRST()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPERST()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPFRST()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPGRST()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADC1RST()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADC2RST()
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM1RST()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SPI1RST()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM8RST()
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USART1RST()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADC3RST()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM9RST()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM10RST()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM11RST()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_LSIRDYC()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_LSERDYC()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSIRDYC()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSERDYC()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLRDYC()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_CSSC()
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_SWIERx(unsigned char)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_clear_CGIFx(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_clear_CTCIFx(unsigned char)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_clear_CHTIFx(unsigned char)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_clear_CTEIFx(unsigned char)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_set_RESET()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_UG()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_UG()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1G()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1G()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2G()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2G()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3G()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3G()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4G()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4G()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_TG()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_TG()
</UL>

<P><STRONG><a name="[167]"></a>__clear_bit(unsigned*, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, com.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_UIF()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_CC1F()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC1F()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_CC2F()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC2F()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_CC3F()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC3F()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_CC4F()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC4F()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_TIF()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_TIF()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_CC1OF()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC1OF()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_CC2OF()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC2OF()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_CC3OF()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC3OF()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_CC4OF()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC4OF()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_clear_AWD()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_clear_EOC()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_clear_JEOC()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_clear_JSTRT()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_clear_STRT()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_clear_BERR()
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_clear_AF()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_clear_OVR()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_clear_IDLE()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_clear_IDLE()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_clear_IDLE()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_clear_RXNE()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_clear_RXNE()
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_clear_RXNE()
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_clear_TC()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_clear_TC()
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_clear_TC()
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_clear_TXE()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_clear_TXE()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_clear_TXE()
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_clear_LBD()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_clear_LBD()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_clear_LBD()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_clear_CTS()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_clear_CTS()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_clear_CTS()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_UIF()
</UL>

<P><STRONG><a name="[16a]"></a>__get_bit(unsigned, unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, com.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_UIF()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_UIF()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_CC1F()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC1F()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_CC2F()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC2F()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_CC3F()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC3F()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_CC4F()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC4F()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_TIF()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_TIF()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_CC1OF()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC1OF()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_CC2OF()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC2OF()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_CC3OF()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC3OF()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_CC4OF()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC4OF()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_CAL()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_RSTCAL()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_AWD()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_EOC()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_JEOC()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_JSTRT()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_STRT()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits(unsigned, unsigned char, unsigned char)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_get_PRx(unsigned char)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_syetem_time(int, int, int)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init(unsigned, unsigned char)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init_per_1_second(unsigned char)
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_get_SKEW()
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_get_NOREF()
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_get_CLKSOURCE()
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_get_CONTFLAG()
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_get_MSL()
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_get_BUSY()
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_get_TRA()
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_get_SB()
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_get_ADDR()
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_get_BTF()
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_get_STOPF()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_get_RxNE()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_get_TxE()
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_get_BERR()
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_get_AF()
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_get_OVR()
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_get_TIMEOUT()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_get_TEF()
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_get_TIF()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_PE()
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_PE()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_PE()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_FE()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_FE()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_FE()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_NE()
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_NE()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_NE()
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_ORE()
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_ORE()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_ORE()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_IDLE()
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_IDLE()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_IDLE()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_RXNE()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_RXNE()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_RXNE()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_TC()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_TC()
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_TC()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_TXE()
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_TXE()
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_TXE()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_LBD()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_LBD()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_LBD()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_CTS()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_CTS()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_CTS()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_get_RXNE()
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_get_TXE()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_get_TXE()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_get_CRCERR()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_get_CRCERR()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_get_MODF()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_get_MODF()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_get_OVR()
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_get_OVR()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_get_BSY()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_get_BSY()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_ALR(unsigned)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_CNT(unsigned)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_PRL(unsigned)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_LSIRDY()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_PINRSTF()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_PORRSTF()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_SFTRSTF()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_IWDGRSTF()
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_WWDGRSTF()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_LPWRRSTF()
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_LSERDY()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_LSIRDYF()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_LSERDYF()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_HSIRDYF()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_HSERDYF()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_PLLRDYF()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_CSSF()
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_HSIRDY()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_HSERDY()
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_PLLRDY()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_get_GIFx(unsigned char)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_get_TCIFx(unsigned char)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_get_HTIFx(unsigned char)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_get_TEIFx(unsigned char)
</UL>

<P><STRONG><a name="[6ed]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[133]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = main &rArr; System::system_loop() &rArr; System::user_init() &rArr; setup() &rArr; Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*) &rArr; TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::system_loop()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::system_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[13b]"></a>window_UI(Window*)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, usermain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = window_UI(Window*)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_font_back_color(unsigned)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usermain.o(.text)
</UL>
<P><STRONG><a name="[13e]"></a>btn_lenCar_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, usermain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = btn_lenCar_handler(Screen::Point, Touchable*, Touchable*) &rArr; LenCar::init() &rArr; LenCar::UI_init() &rArr; Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*) &rArr; TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usermain.o(.text)
</UL>
<P><STRONG><a name="[140]"></a>multi_process_test_handler()</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, usermain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = multi_process_test_handler()
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usermain.o(.text)
</UL>
<P><STRONG><a name="[141]"></a>multi_process_test_handler1()</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, usermain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = multi_process_test_handler1()
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usermain.o(.text)
</UL>
<P><STRONG><a name="[142]"></a>multi_process_test(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 268 bytes, Stack size 80 bytes, usermain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = multi_process_test(Screen::Point, Touchable*, Touchable*) &rArr; Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*) &rArr; TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::run_process()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::add_thread(void(*)())
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usermain.o(.text)
</UL>
<P><STRONG><a name="[149]"></a>multi_window_test(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, usermain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = multi_window_test(Screen::Point, Touchable*, Touchable*) &rArr; Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*) &rArr; TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::format(const char*, ...)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usermain.o(.text)
</UL>
<P><STRONG><a name="[14b]"></a>left_event()</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, usermain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = left_event() &rArr; Text::set_text(String) &rArr; String::String(const String&) &rArr; Vector&lang;char&rang;::push_back(const char&) &rArr; Vector&lang;char&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::set_text(String)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usermain.o(.text)
</UL>
<P><STRONG><a name="[14d]"></a>right_event()</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, usermain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = right_event() &rArr; Text::set_text(String) &rArr; String::String(const String&) &rArr; Vector&lang;char&rang;::push_back(const char&) &rArr; Vector&lang;char&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::set_text(String)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usermain.o(.text)
</UL>
<P><STRONG><a name="[14e]"></a>up_event()</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, usermain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = up_event() &rArr; Text::set_text(String) &rArr; String::String(const String&) &rArr; Vector&lang;char&rang;::push_back(const char&) &rArr; Vector&lang;char&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::set_text(String)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usermain.o(.text)
</UL>
<P><STRONG><a name="[14f]"></a>down_event()</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, usermain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = down_event() &rArr; Text::set_text(String) &rArr; String::String(const String&) &rArr; Vector&lang;char&rang;::push_back(const char&) &rArr; Vector&lang;char&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::set_text(String)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usermain.o(.text)
</UL>
<P><STRONG><a name="[150]"></a>setup()</STRONG> (Thumb, 816 bytes, Stack size 160 bytes, usermain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = setup() &rArr; Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*) &rArr; TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::set_release_handler(void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::TextBox(String, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::set_UI(void(*)(Window*))
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Widget::Widget__sub_object(unsigned short, unsigned short)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::ControlPad(int, unsigned, unsigned)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::set_rightEvent(void(*)())
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::set_leftEvent(void(*)())
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::set_downEvent(void(*)())
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::set_upEvent(void(*)())
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::user_init()
</UL>

<P><STRONG><a name="[53f]"></a>update(int)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usermain.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::user_loop()
</UL>

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[660]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>MemManage_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = MemManage_Handler &rArr; Out::printl(short, short, const char*, ...) &rArr; Out::_print(short, short, char*, Font::FontType) &rArr; Out::_print(short, short, char, Font::FontType) &rArr; Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::printl(short, short, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SysTick_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; Out::print(const char*, ...) &rArr; Out::printl(short, short, const char*, ...) &rArr; Out::_print(short, short, char*, Font::FontType) &rArr; Out::_print(short, short, char, Font::FontType) &rArr; Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EXTI9_5_IRQHandler &rArr; System::touch_process() &rArr; ADS7843::update_state() &rArr; ADS7843::get_coordinate(Screen::Point*) &rArr; ADS7843::conversion(Screen::Point*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::update_state()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::touch_process()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_disable_interrupt(unsigned char)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt(unsigned char)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_clear_PRx(unsigned char)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_get_PRx(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ADC3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>FSMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemInit &rArr; RCC_init() &rArr; RCC_set_SW(unsigned char) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[165]"></a>__set_bits(unsigned*, unsigned, unsigned char, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_SMS(unsigned char)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_SMS(unsigned char)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_TS(unsigned char)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_TS(unsigned char)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ETF(unsigned char)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ETF(unsigned char)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ETPS(unsigned char)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ETPS(unsigned char)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_MMS(unsigned char)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_MMS(unsigned char)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CMS(unsigned char)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CMS(unsigned char)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_EXTI_set_entry(unsigned char, GPIO_PORT)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_USART3(unsigned char)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_TIM1(unsigned char)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_TIM2(unsigned char)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_TIM3(unsigned char)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_CAN(unsigned char)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_SWJ(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_enable_EVO(unsigned char, unsigned char)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JSQx(unsigned char, unsigned char)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JL(unsigned char)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_SQRx(unsigned char, unsigned char)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_L(unsigned char)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_LT(unsigned short)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_HT(unsigned short)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JPFFSETx(unsigned char, unsigned short)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_SMPx(unsigned char, unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JEXTSEL(unsigned char)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_EXTSEL(unsigned char)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_AWDCH(unsigned char)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_DISCNUM(unsigned char)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_DUALMOD(unsigned char)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bits(unsigned*, unsigned char, unsigned char)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_W_set_ADDSET(unsigned char)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_W_set_ADDSET(unsigned char)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_W_set_ADDSET(unsigned char)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_W_set_ADDSET(unsigned char)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_W_set_ADDHLD(unsigned char)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_W_set_ADDHLD(unsigned char)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_W_set_ADDHLD(unsigned char)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_W_set_ADDHLD(unsigned char)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_W_set_DATAST(unsigned char)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_W_set_DATAST(unsigned char)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_W_set_DATAST(unsigned char)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_W_set_DATAST(unsigned char)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_W_set_BUSTURN(unsigned char)
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_W_set_BUSTURN(unsigned char)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_W_set_BUSTURN(unsigned char)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_W_set_BUSTURN(unsigned char)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_W_set_CLKDIV(unsigned char)
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_W_set_CLKDIV(unsigned char)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_W_set_CLKDIV(unsigned char)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_W_set_CLKDIV(unsigned char)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_W_set_DATLAT(unsigned char)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_W_set_DATLAT(unsigned char)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_W_set_DATLAT(unsigned char)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_W_set_DATLAT(unsigned char)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_W_set_ACCMOD(unsigned char)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_W_set_ACCMOD(unsigned char)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_W_set_ACCMOD(unsigned char)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_W_set_ACCMOD(unsigned char)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_ADDSET(unsigned char)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_ADDSET(unsigned char)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_ADDSET(unsigned char)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_ADDSET(unsigned char)
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_ADDHLD(unsigned char)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_ADDHLD(unsigned char)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_ADDHLD(unsigned char)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_ADDHLD(unsigned char)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_DATAST(unsigned short)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_DATAST(unsigned short)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_DATAST(unsigned short)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_DATAST(unsigned short)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_BUSTURN(unsigned char)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_BUSTURN(unsigned char)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_BUSTURN(unsigned char)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_BUSTURN(unsigned char)
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_CLKDIV(unsigned char)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_CLKDIV(unsigned char)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_CLKDIV(unsigned char)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_CLKDIV(unsigned char)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_DATLAT(unsigned char)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_DATLAT(unsigned char)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_DATLAT(unsigned char)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_DATLAT(unsigned char)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_ACCMOD(unsigned char)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_ACCMOD(unsigned char)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_ACCMOD(unsigned char)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_ACCMOD(unsigned char)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_MTYP(unsigned char)
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_MTYP(unsigned char)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_MTYP(unsigned char)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_MTYP(unsigned char)
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_MWID(unsigned char)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_MWID(unsigned char)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_MWID(unsigned char)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_MWID(unsigned char)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_TRISE(unsigned char)
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_CCR(unsigned)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_ADD2(unsigned char)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_ADD_7to1(unsigned char)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_FREQ(unsigned char)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_set_CMS(unsigned char)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_set_CMS(unsigned char)
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_set_CMS(unsigned char)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_set_CMS(unsigned char)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_set_CAL(unsigned char)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TSEL1(unsigned char)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_WAVE1(unsigned char)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_MAMP1(unsigned char)
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TSEL2(unsigned char)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_WAVE2(unsigned char)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_MAMP2(unsigned char)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_PSC(unsigned char)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_PSC(unsigned char)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_PSC(unsigned char)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_GT(unsigned char)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_GT(unsigned char)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_GT(unsigned char)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_ADD(unsigned char)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_ADD(unsigned char)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_ADD(unsigned char)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_STOP(unsigned char)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_STOP(unsigned char)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_STOP(unsigned char)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_BR(unsigned char)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_BR(unsigned char)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_ALR(unsigned)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_RTCSEL(unsigned char)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SW(unsigned char)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HPRE(unsigned char)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PPRE1(unsigned char)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PPRE2(unsigned char)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADCPRE(unsigned char)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLMUL(unsigned char)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_MCO(unsigned char)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSITRIM(unsigned char)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_PSIZE(unsigned char, unsigned char)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_MSIZE(unsigned char, unsigned char)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_PL(unsigned char, unsigned char)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_set_IDR(unsigned char)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_IC3PSC(unsigned char)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_IC3PSC(unsigned char)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_IC3F(unsigned char)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_IC3F(unsigned char)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_IC4PSC(unsigned char)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_IC4PSC(unsigned char)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_IC4F(unsigned char)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_IC4F(unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_IC1PSC(unsigned char)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_IC1PSC(unsigned char)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_IC1F(unsigned char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_IC1F(unsigned char)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_IC2PSC(unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_IC2PSC(unsigned char)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_IC2F(unsigned char)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_IC2F(unsigned char)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC3M(unsigned char)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC3M(unsigned char)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC4M(unsigned char)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC4M(unsigned char)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC1M(unsigned char)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC1M(unsigned char)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC2M(unsigned char)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC2M(unsigned char)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3S(unsigned char)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3S(unsigned char)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4S(unsigned char)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4S(unsigned char)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1S(unsigned char)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1S(unsigned char)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2S(unsigned char)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2S(unsigned char)
</UL>

<P><STRONG><a name="[168]"></a>__clear_bits(unsigned*, unsigned char, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[169]"></a>__get_bits(unsigned, unsigned char, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_DATA()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_ADC2DATA()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_JDATAx(unsigned char)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_LT()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_HT()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_DISNUM()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_DUALMOD()
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_get_TENMS()
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_div()
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_div()
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_div()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_DIV()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_SWS()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_HSICAL()
</UL>

<P><STRONG><a name="[16b]"></a>__write_bit(unsigned*, unsigned char, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_UIE(unsigned char)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_UIE(unsigned char)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1IE(unsigned char)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1IE(unsigned char)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2IE(unsigned char)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2IE(unsigned char)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3IE(unsigned char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3IE(unsigned char)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4IE(unsigned char)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4IE(unsigned char)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_TIE(unsigned char)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_TIE(unsigned char)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_UDE(unsigned char)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_UDE(unsigned char)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1DE(unsigned char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1DE(unsigned char)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2DE(unsigned char)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2DE(unsigned char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3DE(unsigned char)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3DE(unsigned char)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4DE(unsigned char)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4DE(unsigned char)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_TDE(unsigned char)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_TDE(unsigned char)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ECE(unsigned char)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ECE(unsigned char)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ETP(unsigned char)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ETP(unsigned char)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCDS(unsigned char)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCDS(unsigned char)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_TI1S(unsigned char)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_TI1S(unsigned char)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CEN(unsigned char)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CEN(unsigned char)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_UDIS(unsigned char)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_UDIS(unsigned char)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_URS(unsigned char)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_URS(unsigned char)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OPM(unsigned char)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OPM(unsigned char)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_DIR(unsigned char)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_DIR(unsigned char)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ARPE(unsigned char)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ARPE(unsigned char)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_SPI1(unsigned char)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_I2C1(unsigned char)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_USART1(unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_USART2(unsigned char)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_TIM4(unsigned char)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_PD01(unsigned char)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_TIM5CH4(unsigned char)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_ADC1_INJ(unsigned char)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_ADC1_REG(unsigned char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_ADC2_INJ(unsigned char)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_ADC2_REG(unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_ADON(unsigned char)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_CONT(unsigned char)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_DMA(unsigned char)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_ALIGN(unsigned char)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JEXTTRIG(unsigned char)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_EXTTRIG(unsigned char)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_TSVREFE(unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_EOCIE(unsigned char)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_AWDIE(unsigned char)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JEOIE(unsigned char)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_SCAN(unsigned char)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_AWDSGL(unsigned char)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JAUTO(unsigned char)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_DISCEN(unsigned char)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JDISCEN(unsigned char)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JAWDEN(unsigned char)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_AWDEN(unsigned char)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_MBKEN(unsigned char)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_MBKEN(unsigned char)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_MBKEN(unsigned char)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_MBKEN(unsigned char)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_MUXEN(unsigned char)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_MUXEN(unsigned char)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_MUXEN(unsigned char)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_MUXEN(unsigned char)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_FACCEN(unsigned char)
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_FACCEN(unsigned char)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_FACCEN(unsigned char)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_FACCEN(unsigned char)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_BURSTEN(unsigned char)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_BURSTEN(unsigned char)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_BURSTEN(unsigned char)
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_BURSTEN(unsigned char)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WAITPOL(unsigned char)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_WAITPOL(unsigned char)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_WAITPOL(unsigned char)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_WAITPOL(unsigned char)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WRAPMOD(unsigned char)
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_WRAPMOD(unsigned char)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_WRAPMOD(unsigned char)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_WRAPMOD(unsigned char)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WAITCFG(unsigned char)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_WAITCFG(unsigned char)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_WAITCFG(unsigned char)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_WAITCFG(unsigned char)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WREN(unsigned char)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_WREN(unsigned char)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_WREN(unsigned char)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_WREN(unsigned char)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WAITEN(unsigned char)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_WAITEN(unsigned char)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_WAITEN(unsigned char)
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_WAITEN(unsigned char)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_EXTMOD(unsigned char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_EXTMOD(unsigned char)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_EXTMOD(unsigned char)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_EXTMOD(unsigned char)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_ASYNCWAIT(unsigned char)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_ASYNCWAIT(unsigned char)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_ASYNCWAIT(unsigned char)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_ASYNCWAIT(unsigned char)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_CBURSTRW(unsigned char)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_CBURSTRW(unsigned char)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_CBURSTRW(unsigned char)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_CBURSTRW(unsigned char)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_set_ENABLE(unsigned char)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_set_TICKINT(unsigned char)
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_set_CLKSOURCE(unsigned char)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_FS(unsigned char)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_address(unsigned char, unsigned char)
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_ENDUAL(unsigned char)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_ADD0(unsigned char)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_ADDMODE(unsigned char)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_ITERREN(unsigned char)
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_ITEVTEN(unsigned char)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_ITBUFEN(unsigned char)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_PE(unsigned char)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_START(unsigned char)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_STOP(unsigned char)
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_ACK(unsigned char)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_SWRST(unsigned char)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_set_CEN(unsigned char)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_set_CEN(unsigned char)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_set_CEN(unsigned char)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_set_CEN(unsigned char)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_set_UDIS(unsigned char)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_set_UDIS(unsigned char)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_set_UDIS(unsigned char)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_set_UDIS(unsigned char)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_set_URS(unsigned char)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_set_URS(unsigned char)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_set_URS(unsigned char)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_set_URS(unsigned char)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_set_OPM(unsigned char)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_set_OPM(unsigned char)
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_set_OPM(unsigned char)
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_set_OPM(unsigned char)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_set_DIR(unsigned char)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_set_DIR(unsigned char)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_set_DIR(unsigned char)
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_set_DIR(unsigned char)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_set_ARPE(unsigned char)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_set_ARPE(unsigned char)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_set_ARPE(unsigned char)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_set_ARPE(unsigned char)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_set_TPIE(unsigned char)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_set_TAMPER(unsigned char)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_set_TPAL(unsigned char)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_set_CCO(unsigned char)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_set_ASOE(unsigned char)
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_set_ASOS(unsigned char)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_SWTRIG1(unsigned char)
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_SWTRIG2(unsigned char)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_EN1(unsigned char)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_BOFF1(unsigned char)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TEN1(unsigned char)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DMAEN1(unsigned char)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_EN2(unsigned char)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_BOFF2(unsigned char)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TEN2(unsigned char)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DMAEN2(unsigned char)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_EIE(unsigned char)
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_EIE(unsigned char)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_EIE(unsigned char)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_IREN(unsigned char)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_IREN(unsigned char)
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_IREN(unsigned char)
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_IRLP(unsigned char)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_IRLP(unsigned char)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_IRLP(unsigned char)
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_HDSEL(unsigned char)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_HDSEL(unsigned char)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_HDSEL(unsigned char)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_NACK(unsigned char)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_NACK(unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_NACK(unsigned char)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_SCEN(unsigned char)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_SCEN(unsigned char)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_SCEN(unsigned char)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_DMAR(unsigned char)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_DMAR(unsigned char)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_DMAR(unsigned char)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_DMAT(unsigned char)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_DMAT(unsigned char)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_DMAT(unsigned char)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_RTSE(unsigned char)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_RTSE(unsigned char)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_RTSE(unsigned char)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_CTSE(unsigned char)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_CTSE(unsigned char)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_CTSE(unsigned char)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_CTSIE(unsigned char)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_CTSIE(unsigned char)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_CTSIE(unsigned char)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_LBDL(unsigned char)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_LBDL(unsigned char)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_LBDL(unsigned char)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_LBDIE(unsigned char)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_LBDIE(unsigned char)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_LBDIE(unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_LBCL(unsigned char)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_LBCL(unsigned char)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_LBCL(unsigned char)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_CPHA(unsigned char)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_CPHA(unsigned char)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_CPHA(unsigned char)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_CPOL(unsigned char)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_CPOL(unsigned char)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_CPOL(unsigned char)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_CLKEN(unsigned char)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_CLKEN(unsigned char)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_CLKEN(unsigned char)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_LINEN(unsigned char)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_LINEN(unsigned char)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_LINEN(unsigned char)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_RWU(unsigned char)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_RWU(unsigned char)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_RWU(unsigned char)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_RE(unsigned char)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_RE(unsigned char)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_RE(unsigned char)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_TE(unsigned char)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_TE(unsigned char)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_TE(unsigned char)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_IDLEIE(unsigned char)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_IDLEIE(unsigned char)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_IDLEIE(unsigned char)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_RXNEIE(unsigned char)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_RXNEIE(unsigned char)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_RXNEIE(unsigned char)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_TCIE(unsigned char)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_TCIE(unsigned char)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_TCIE(unsigned char)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_TXEIE(unsigned char)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_TXEIE(unsigned char)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_TXEIE(unsigned char)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_PEIE(unsigned char)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_PEIE(unsigned char)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_PEIE(unsigned char)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_PS(unsigned char)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_PS(unsigned char)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_PS(unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_PCE(unsigned char)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_PCE(unsigned char)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_PCE(unsigned char)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_WAKE(unsigned char)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_WAKE(unsigned char)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_WAKE(unsigned char)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_M(unsigned char)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_M(unsigned char)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_M(unsigned char)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_enable(unsigned char)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_enable(unsigned char)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_enable(unsigned char)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_RXDMAEN(unsigned char)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_RXDMAEN(unsigned char)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_TXDMAEN(unsigned char)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_TXDMAEN(unsigned char)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_SSOE(unsigned char)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_SSOE(unsigned char)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_ERRIE(unsigned char)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_ERRIE(unsigned char)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_RXNEIE(unsigned char)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_RXNEIE(unsigned char)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_TXEIE(unsigned char)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_TXEIE(unsigned char)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_CPHA(unsigned char)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_CPHA(unsigned char)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_CPOL(unsigned char)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_CPOL(unsigned char)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_MSTR(unsigned char)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_MSTR(unsigned char)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_SPE(unsigned char)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_SPE(unsigned char)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_LSBFIRST(unsigned char)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_LSBFIRST(unsigned char)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_SSI(unsigned char)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_SSI(unsigned char)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_SSM(unsigned char)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_SSM(unsigned char)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_RXONLY(unsigned char)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_RXONLY(unsigned char)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_DFF(unsigned char)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_DFF(unsigned char)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_CRCNEXT(unsigned char)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_CRCNEXT(unsigned char)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_CRCEN(unsigned char)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_CRCEN(unsigned char)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_BIDIOE(unsigned char)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_BIDIOE(unsigned char)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_set_BIDIMODE(unsigned char)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_set_BIDIMODE(unsigned char)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_CNF(unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_SECIE(unsigned char)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_ALRIE(unsigned char)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_OWIE(unsigned char)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_LSION(unsigned char)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_LSEON(unsigned char)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_LSEBYP(unsigned char)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_RTCEN(unsigned char)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM2EN(unsigned char)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM3EN(unsigned char)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM4EN(unsigned char)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM5EN(unsigned char)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM6EN(unsigned char)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM7EN(unsigned char)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM12EN(unsigned char)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM13EN(unsigned char)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM14EN(unsigned char)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_WWDGEN(unsigned char)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SPI2EN(unsigned char)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SPI3EN(unsigned char)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USART2EN(unsigned char)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USART3EN(unsigned char)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_UART4EN(unsigned char)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_UART5EN(unsigned char)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_I2C1EN(unsigned char)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_I2C2EN(unsigned char)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USBEN(unsigned char)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_CANEN(unsigned char)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_BKPEN(unsigned char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PWREN(unsigned char)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_DACEN(unsigned char)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN(unsigned char)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPxEN(unsigned char, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN(unsigned char)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN(unsigned char)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPCEN(unsigned char)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPDEN(unsigned char)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPEEN(unsigned char)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPFEN(unsigned char)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPGEN(unsigned char)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADC1EN(unsigned char)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADC2EN(unsigned char)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM1EN(unsigned char)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SPI1EN(unsigned char)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM8EN(unsigned char)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USART1EN(unsigned char)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADC3EN(unsigned char)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM9EN(unsigned char)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM10EN(unsigned char)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM11EN(unsigned char)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_DMA1EN(unsigned char)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_DMA2EN(unsigned char)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SRAMEN(unsigned char)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_FLITFEN(unsigned char)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_CRCEN(unsigned char)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_FSMCEN(unsigned char)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SDIOEN(unsigned char)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_LSIRDYIE(unsigned char)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_LSERDYIE(unsigned char)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSIRDYIE(unsigned char)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSERDYIE(unsigned char)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLRDYIE(unsigned char)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLSRC(unsigned char)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLXTPRE(unsigned char)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USBPRE(unsigned char)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSION(unsigned char)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSEON(unsigned char)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSEBYP(unsigned char)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_CSSON(unsigned char)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLON(unsigned char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_set_DBP(unsigned char)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_FTRx(unsigned char, unsigned char)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_RTRx(unsigned char, unsigned char)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_EMRx(unsigned char, unsigned char)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_IMRx(unsigned char, unsigned char)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_EN(unsigned char, unsigned char)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_TCIE(unsigned char, unsigned char)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_HTIE(unsigned char, unsigned char)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_TEIE(unsigned char, unsigned char)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_DIR(unsigned char, unsigned char)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_CIRC(unsigned char, unsigned char)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_PINC(unsigned char, unsigned char)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_MINC(unsigned char, unsigned char)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_MEM2MEM(unsigned char, unsigned char)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_MOE(unsigned char)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_MOE(unsigned char)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1E(unsigned char)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1E(unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1P(unsigned char)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1P(unsigned char)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1NE(unsigned char)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1NE(unsigned char)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1NP(unsigned char)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1NP(unsigned char)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2E(unsigned char)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2E(unsigned char)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2P(unsigned char)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2P(unsigned char)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2NE(unsigned char)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2NE(unsigned char)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2NP(unsigned char)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2NP(unsigned char)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3E(unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3E(unsigned char)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3P(unsigned char)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3P(unsigned char)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3NE(unsigned char)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3NE(unsigned char)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3NP(unsigned char)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3NP(unsigned char)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4E(unsigned char)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4E(unsigned char)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4P(unsigned char)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4P(unsigned char)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC3PE(unsigned char)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC3PE(unsigned char)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC3CE(unsigned char)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC3CE(unsigned char)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC4PE(unsigned char)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC4PE(unsigned char)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC4CE(unsigned char)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC4CE(unsigned char)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC1PE(unsigned char)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC1PE(unsigned char)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC1CE(unsigned char)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC1CE(unsigned char)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC2PE(unsigned char)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC2PE(unsigned char)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC2CE(unsigned char)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC2CE(unsigned char)
</UL>

<P><STRONG><a name="[619]"></a>delay(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_address(unsigned char)
</UL>

<P><STRONG><a name="[16d]"></a>delay_us(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms(unsigned)
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2()
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1()
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init()
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::go()
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::Switch_release_handler(Screen::Point, Touchable*, Touchable*)
</UL>

<P><STRONG><a name="[16c]"></a>delay_ms(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_cnf_temperature()
</UL>

<P><STRONG><a name="[6ee]"></a>is_in_range(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, com.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>is_in_range_circle(int, int, int, int, int)</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[172]"></a>GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::init()
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_cnf_init()
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2()
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1()
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_init(USART_BAUD_RATE)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_init(USART_BAUD_RATE)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::pins_init()
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::port_init()
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::interrupt_init()
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_init()
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_byte()
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_ACK()
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_NACK()
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_send_byte(char)
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_stop()
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_start()
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::MPU6050_IO_init()
</UL>

<P><STRONG><a name="[6ef]"></a>GPIO_send_port(GPIO_PORT, unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[537]"></a>GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::init()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::system_loop()
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::init(SSD1289::InitialStruct)
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::get_exact_coordinate(Screen::Point*)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::get_coordinate(Screen::Point*)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::send_command(unsigned char)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::receive_data()
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::init()
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_init()
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_byte()
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_ACK()
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_NACK()
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_send_byte(char)
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_stop()
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_start()
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::MPU6050_IO_init()
</UL>

<P><STRONG><a name="[6f0]"></a>GPIO_receive_port(GPIO_PORT)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[55e]"></a>GPIO_receive_pin(GPIO_PORT, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, base.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::update_state()
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::get_exact_coordinate(Screen::Point*)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::get_coordinate(Screen::Point*)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::receive_data()
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_byte()
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_send_byte(char)
</UL>

<P><STRONG><a name="[173]"></a>ADC1_get_STRT()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[174]"></a>ADC1_clear_STRT()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[175]"></a>ADC1_get_JSTRT()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[176]"></a>ADC1_clear_JSTRT()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[177]"></a>ADC1_get_JEOC()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[178]"></a>ADC1_clear_JEOC()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[179]"></a>ADC1_get_EOC()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[17a]"></a>ADC1_clear_EOC()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[17b]"></a>ADC1_get_AWD()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[17c]"></a>ADC1_clear_AWD()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[17d]"></a>ADC1_set_AWDEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[17e]"></a>ADC1_set_JAWDEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[17f]"></a>ADC1_set_DUALMOD(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[180]"></a>ADC1_get_DUALMOD()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits(unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[181]"></a>ADC1_set_DISCNUM(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[182]"></a>ADC1_get_DISNUM()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits(unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[183]"></a>ADC1_set_JDISCEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[184]"></a>ADC1_set_DISCEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[185]"></a>ADC1_set_JAUTO(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[186]"></a>ADC1_set_AWDSGL(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[187]"></a>ADC1_set_SCAN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[188]"></a>ADC1_set_JEOIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[189]"></a>ADC1_set_AWDIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[18a]"></a>ADC1_set_EOCIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_cnf_temperature()
</UL>

<P><STRONG><a name="[18b]"></a>ADC1_set_AWDCH(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[18c]"></a>ADC1_set_TSVREFE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_cnf_temperature()
</UL>

<P><STRONG><a name="[18d]"></a>ADC1_set_SWSTART()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[18e]"></a>ADC1_set_JSWSTART()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[18f]"></a>ADC1_set_EXTTRIG(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[190]"></a>ADC1_set_EXTSEL(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[191]"></a>ADC1_set_JEXTTRIG(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[192]"></a>ADC1_set_JEXTSEL(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[193]"></a>ADC1_set_ALIGN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init()
</UL>

<P><STRONG><a name="[194]"></a>ADC1_set_DMA(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init()
</UL>

<P><STRONG><a name="[195]"></a>ADC1_set_RSTCAL()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init()
</UL>

<P><STRONG><a name="[196]"></a>ADC1_get_RSTCAL()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init()
</UL>

<P><STRONG><a name="[197]"></a>ADC1_set_CAL()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init()
</UL>

<P><STRONG><a name="[198]"></a>ADC1_get_CAL()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init()
</UL>

<P><STRONG><a name="[199]"></a>ADC1_set_CONT(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_cnf_temperature()
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init()
</UL>

<P><STRONG><a name="[19a]"></a>ADC1_set_ADON(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_start_conversion()
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_cnf_temperature()
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init()
</UL>

<P><STRONG><a name="[19b]"></a>ADC1_set_SMPx(unsigned char, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_cnf_temperature()
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init()
</UL>

<P><STRONG><a name="[19c]"></a>ADC1_set_JPFFSETx(unsigned char, unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[19d]"></a>ADC1_set_HT(unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[19e]"></a>ADC1_get_HT()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits(unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[19f]"></a>ADC1_set_LT(unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a0]"></a>ADC1_get_LT()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits(unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a1]"></a>ADC1_set_L(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_cnf_temperature()
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init()
</UL>

<P><STRONG><a name="[1a2]"></a>ADC1_set_SQRx(unsigned char, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_cnf_temperature()
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init()
</UL>

<P><STRONG><a name="[1a3]"></a>ADC1_set_JL(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a4]"></a>ADC1_set_JSQx(unsigned char, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a5]"></a>ADC1_get_JDATAx(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits(unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a6]"></a>ADC1_get_ADC2DATA()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits(unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a7]"></a>ADC1_get_DATA()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits(unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a8]"></a>AFIO_enable_EVO(unsigned char, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[1a9]"></a>AFIO_disable_EVO()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[1aa]"></a>AFIO_remap_SWJ(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1ab]"></a>AFIO_remap_ADC2_REG(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1ac]"></a>AFIO_remap_ADC2_INJ(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1ad]"></a>AFIO_remap_ADC1_REG(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1ae]"></a>AFIO_remap_ADC1_INJ(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1af]"></a>AFIO_remap_TIM5CH4(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b0]"></a>AFIO_remap_PD01(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b1]"></a>AFIO_remap_CAN(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b2]"></a>AFIO_remap_TIM4(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b3]"></a>AFIO_remap_TIM3(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b4]"></a>AFIO_remap_TIM2(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b5]"></a>AFIO_remap_TIM1(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b6]"></a>AFIO_remap_USART3(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b7]"></a>AFIO_remap_USART2(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b8]"></a>AFIO_remap_USART1(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b9]"></a>AFIO_remap_I2C1(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1ba]"></a>AFIO_remap_SPI1(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1bb]"></a>AFIO_EXTI_set_entry(unsigned char, GPIO_PORT)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AFIO_EXTI_set_entry(unsigned char, GPIO_PORT) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::interrupt_init()
</UL>

<P><STRONG><a name="[1bc]"></a>TIM1_set_ARPE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1bd]"></a>TIM8_set_ARPE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1be]"></a>TIM1_set_CMS(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1bf]"></a>TIM8_set_CMS(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1c0]"></a>TIM1_set_DIR(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms(unsigned, unsigned)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[1c1]"></a>TIM8_set_DIR(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms(unsigned, unsigned)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[1c2]"></a>TIM1_set_OPM(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1c3]"></a>TIM8_set_OPM(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1c4]"></a>TIM1_set_URS(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms(unsigned, unsigned)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[1c5]"></a>TIM8_set_URS(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms(unsigned, unsigned)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[1c6]"></a>TIM1_set_UDIS(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1c7]"></a>TIM8_set_UDIS(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1c8]"></a>TIM1_set_CEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms(unsigned, unsigned)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[1c9]"></a>TIM8_set_CEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms(unsigned, unsigned)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[1ca]"></a>TIM1_set_TI1S(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1cb]"></a>TIM8_set_TI1S(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1cc]"></a>TIM1_set_MMS(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1cd]"></a>TIM8_set_MMS(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1ce]"></a>TIM1_set_CCDS(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1cf]"></a>TIM8_set_CCDS(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1d0]"></a>TIM1_set_ETP(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1d1]"></a>TIM8_set_ETP(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1d2]"></a>TIM1_set_ECE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1d3]"></a>TIM8_set_ECE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1d4]"></a>TIM1_set_ETPS(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1d5]"></a>TIM8_set_ETPS(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1d6]"></a>TIM1_set_ETF(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1d7]"></a>TIM8_set_ETF(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1d8]"></a>TIM1_set_MSM()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[1d9]"></a>TIM8_set_MSM()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[1da]"></a>TIM1_set_TS(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1db]"></a>TIM8_set_TS(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1dc]"></a>TIM1_set_SMS(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms(unsigned, unsigned)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[1dd]"></a>TIM8_set_SMS(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms(unsigned, unsigned)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[1de]"></a>TIM1_set_TDE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1df]"></a>TIM8_set_TDE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1e0]"></a>TIM1_set_CC4DE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1e1]"></a>TIM8_set_CC4DE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1e2]"></a>TIM1_set_CC3DE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1e3]"></a>TIM8_set_CC3DE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1e4]"></a>TIM1_set_CC2DE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1e5]"></a>TIM8_set_CC2DE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1e6]"></a>TIM1_set_CC1DE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1e7]"></a>TIM8_set_CC1DE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1e8]"></a>TIM1_set_UDE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1e9]"></a>TIM8_set_UDE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1ea]"></a>TIM1_set_TIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1eb]"></a>TIM8_set_TIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1ec]"></a>TIM1_set_CC4IE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1ed]"></a>TIM8_set_CC4IE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1ee]"></a>TIM1_set_CC3IE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1ef]"></a>TIM8_set_CC3IE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1f0]"></a>TIM1_set_CC2IE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1f1]"></a>TIM8_set_CC2IE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1f2]"></a>TIM1_set_CC1IE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1f3]"></a>TIM8_set_CC1IE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1f4]"></a>TIM1_set_UIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms(unsigned, unsigned)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[1f5]"></a>TIM8_set_UIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms(unsigned, unsigned)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[1f6]"></a>TIM1_get_CC4OF()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[1f7]"></a>TIM1_clear_CC4OF()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[1f8]"></a>TIM8_get_CC4OF()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[1f9]"></a>TIM8_clear_CC4OF()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[1fa]"></a>TIM1_get_CC3OF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[1fb]"></a>TIM1_clear_CC3OF()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[1fc]"></a>TIM8_get_CC3OF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[1fd]"></a>TIM8_clear_CC3OF()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[1fe]"></a>TIM1_get_CC2OF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[1ff]"></a>TIM1_clear_CC2OF()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[200]"></a>TIM8_get_CC2OF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[201]"></a>TIM8_clear_CC2OF()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[202]"></a>TIM1_get_CC1OF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[203]"></a>TIM1_clear_CC1OF()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[204]"></a>TIM8_get_CC1OF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[205]"></a>TIM8_clear_CC1OF()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[206]"></a>TIM1_get_TIF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[207]"></a>TIM1_clear_TIF()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[208]"></a>TIM8_get_TIF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[209]"></a>TIM8_clear_TIF()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[20a]"></a>TIM1_get_CC4F()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[20b]"></a>TIM1_clear_CC4F()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[20c]"></a>TIM8_get_CC4F()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[20d]"></a>TIM8_clear_CC4F()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[20e]"></a>TIM1_get_CC3F()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[20f]"></a>TIM1_clear_CC3F()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[210]"></a>TIM8_get_CC3F()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[211]"></a>TIM8_clear_CC3F()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[212]"></a>TIM1_get_CC2F()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[213]"></a>TIM1_clear_CC2F()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[214]"></a>TIM8_get_CC2F()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[215]"></a>TIM8_clear_CC2F()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[216]"></a>TIM1_get_CC1F()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[217]"></a>TIM1_clear_CC1F()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[218]"></a>TIM8_get_CC1F()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[219]"></a>TIM8_clear_CC1F()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[21a]"></a>TIM1_get_UIF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[21b]"></a>TIM1_clear_UIF()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[21c]"></a>TIM8_get_UIF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[21d]"></a>TIM8_clear_UIF()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[21e]"></a>TIM1_set_TG()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[21f]"></a>TIM8_set_TG()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[220]"></a>TIM1_set_CC4G()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[221]"></a>TIM8_set_CC4G()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[222]"></a>TIM1_set_CC3G()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[223]"></a>TIM8_set_CC3G()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[224]"></a>TIM1_set_CC2G()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[225]"></a>TIM8_set_CC2G()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[226]"></a>TIM1_set_CC1G()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[227]"></a>TIM8_set_CC1G()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[228]"></a>TIM1_set_UG()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[229]"></a>TIM8_set_UG()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[22a]"></a>TIM1_set_CC2S(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[22b]"></a>TIM8_set_CC2S(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[22c]"></a>TIM1_set_CC1S(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[22d]"></a>TIM8_set_CC1S(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[22e]"></a>TIM1_set_CC4S(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[22f]"></a>TIM8_set_CC4S(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[230]"></a>TIM1_set_CC3S(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[231]"></a>TIM8_set_CC3S(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[232]"></a>TIM1_set_OC2CE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[233]"></a>TIM8_set_OC2CE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[234]"></a>TIM1_set_OC2M(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[235]"></a>TIM8_set_OC2M(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[236]"></a>TIM1_set_OC2PE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[237]"></a>TIM8_set_OC2PE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[238]"></a>TIM1_set_OC1CE(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[239]"></a>TIM8_set_OC1CE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[23a]"></a>TIM1_set_OC1M(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[23b]"></a>TIM8_set_OC1M(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[23c]"></a>TIM1_set_OC1PE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[23d]"></a>TIM8_set_OC1PE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[23e]"></a>TIM1_set_OC4CE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[23f]"></a>TIM8_set_OC4CE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[240]"></a>TIM1_set_OC4M(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[241]"></a>TIM8_set_OC4M(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[242]"></a>TIM1_set_OC4PE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[243]"></a>TIM8_set_OC4PE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[244]"></a>TIM1_set_OC3CE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[245]"></a>TIM8_set_OC3CE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[246]"></a>TIM1_set_OC3M(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[247]"></a>TIM8_set_OC3M(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[248]"></a>TIM1_set_OC3PE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[249]"></a>TIM8_set_OC3PE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[24a]"></a>TIM1_set_IC2F(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[24b]"></a>TIM8_set_IC2F(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[24c]"></a>TIM1_set_IC2PSC(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[24d]"></a>TIM8_set_IC2PSC(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[24e]"></a>TIM1_set_IC1F(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[24f]"></a>TIM8_set_IC1F(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[250]"></a>TIM1_set_IC1PSC(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[251]"></a>TIM8_set_IC1PSC(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[252]"></a>TIM1_set_IC4F(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[253]"></a>TIM8_set_IC4F(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[254]"></a>TIM1_set_IC4PSC(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[255]"></a>TIM8_set_IC4PSC(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[256]"></a>TIM1_set_IC3F(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[257]"></a>TIM8_set_IC3F(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[258]"></a>TIM1_set_IC3PSC(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[259]"></a>TIM8_set_IC3PSC(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[25a]"></a>TIM1_set_CC4P(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[25b]"></a>TIM8_set_CC4P(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[25c]"></a>TIM1_set_CC4E(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[25d]"></a>TIM8_set_CC4E(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[25e]"></a>TIM1_set_CC3NP(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[25f]"></a>TIM8_set_CC3NP(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[260]"></a>TIM1_set_CC3NE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[261]"></a>TIM8_set_CC3NE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[262]"></a>TIM1_set_CC3P(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[263]"></a>TIM8_set_CC3P(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[264]"></a>TIM1_set_CC3E(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[265]"></a>TIM8_set_CC3E(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[266]"></a>TIM1_set_CC2NP(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[267]"></a>TIM8_set_CC2NP(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[268]"></a>TIM1_set_CC2NE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[269]"></a>TIM8_set_CC2NE(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[26a]"></a>TIM1_set_CC2P(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[26b]"></a>TIM8_set_CC2P(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[26c]"></a>TIM1_set_CC2E(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[26d]"></a>TIM8_set_CC2E(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[26e]"></a>TIM1_set_CC1NP(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[26f]"></a>TIM8_set_CC1NP(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[270]"></a>TIM1_set_CC1NE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[271]"></a>TIM8_set_CC1NE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[272]"></a>TIM1_set_CC1P(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[273]"></a>TIM8_set_CC1P(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[274]"></a>TIM1_set_CC1E(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[275]"></a>TIM8_set_CC1E(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4e4]"></a>TIM1_set_CNT(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms(unsigned, unsigned)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[6f1]"></a>TIM1_get_CNT()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[4f6]"></a>TIM8_set_CNT(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms(unsigned, unsigned)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[6f2]"></a>TIM8_get_CNT()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[4e1]"></a>TIM1_set_PSC(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms(unsigned, unsigned)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[6f3]"></a>TIM1_get_PSC()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[4f3]"></a>TIM8_set_PSC(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms(unsigned, unsigned)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[6f4]"></a>TIM8_get_PSC()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[4e3]"></a>TIM1_set_ARR(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms(unsigned, unsigned)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[6f5]"></a>TIM1_get_ARR()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[4f5]"></a>TIM8_set_ARR(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms(unsigned, unsigned)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[6f6]"></a>TIM8_get_ARR()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[4e2]"></a>TIM1_set_REP(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms(unsigned, unsigned)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[6f7]"></a>TIM1_get_REP()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[4f4]"></a>TIM8_set_REP(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms(unsigned, unsigned)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[6f8]"></a>TIM8_get_REP()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[4e7]"></a>TIM1_set_CCR1(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_set_pwm_duty(unsigned)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[6f9]"></a>TIM1_get_CCR1()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[4f9]"></a>TIM8_set_CCR1(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_set_pwm_duty(unsigned)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[6fa]"></a>TIM8_get_CCR1()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[4ea]"></a>TIM1_set_CCR2(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_set_pwm_duty(unsigned)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[6fb]"></a>TIM1_get_CCR2()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[4fc]"></a>TIM8_set_CCR2(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_set_pwm_duty(unsigned)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[6fc]"></a>TIM8_get_CCR2()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[4ed]"></a>TIM1_set_CCR3(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_set_pwm_duty(unsigned)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[6fd]"></a>TIM1_get_CCR3()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[4ff]"></a>TIM8_set_CCR3(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_set_pwm_duty(unsigned)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[6fe]"></a>TIM8_get_CCR3()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[4f0]"></a>TIM1_set_CCR4(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_set_pwm_duty(unsigned)
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[6ff]"></a>TIM1_get_CCR4()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[502]"></a>TIM8_set_CCR4(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_set_pwm_duty(unsigned)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[700]"></a>TIM8_get_CCR4()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>TIM1_set_MOE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[277]"></a>TIM8_set_MOE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[506]"></a>CRC_set_DR(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_check_data(unsigned*, unsigned)
</UL>

<P><STRONG><a name="[507]"></a>CRC_get_DR()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_check_data(unsigned*, unsigned)
</UL>

<P><STRONG><a name="[278]"></a>CRC_set_IDR(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[701]"></a>CRC_get_IDR()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>CRC_set_RESET()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_check_data(unsigned*, unsigned)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_init()
</UL>

<P><STRONG><a name="[27a]"></a>DMA1_get_TEIFx(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[27b]"></a>DMA1_get_HTIFx(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[27c]"></a>DMA1_get_TCIFx(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[27d]"></a>DMA1_get_GIFx(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[27e]"></a>DMA1_clear_CTEIFx(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[27f]"></a>DMA1_clear_CHTIFx(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[280]"></a>DMA1_clear_CTCIFx(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[281]"></a>DMA1_clear_CGIFx(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[282]"></a>DMA1_set_MEM2MEM(unsigned char, unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[283]"></a>DMA1_set_PL(unsigned char, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init()
</UL>

<P><STRONG><a name="[284]"></a>DMA1_set_MSIZE(unsigned char, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init()
</UL>

<P><STRONG><a name="[285]"></a>DMA1_set_PSIZE(unsigned char, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init()
</UL>

<P><STRONG><a name="[286]"></a>DMA1_set_MINC(unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init()
</UL>

<P><STRONG><a name="[287]"></a>DMA1_set_PINC(unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init()
</UL>

<P><STRONG><a name="[288]"></a>DMA1_set_CIRC(unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init()
</UL>

<P><STRONG><a name="[289]"></a>DMA1_set_DIR(unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init()
</UL>

<P><STRONG><a name="[28a]"></a>DMA1_set_TEIE(unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[28b]"></a>DMA1_set_HTIE(unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init()
</UL>

<P><STRONG><a name="[28c]"></a>DMA1_set_TCIE(unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init()
</UL>

<P><STRONG><a name="[28d]"></a>DMA1_set_EN(unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init()
</UL>

<P><STRONG><a name="[50b]"></a>DMA1_set_NDT(unsigned char, unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init()
</UL>

<P><STRONG><a name="[702]"></a>DMA1_get_NDT(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[509]"></a>DMA1_set_PA(unsigned char, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init()
</UL>

<P><STRONG><a name="[703]"></a>DMA1_get_PA(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[50a]"></a>DMA1_set_MA(unsigned char, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init()
</UL>

<P><STRONG><a name="[704]"></a>DMA1_get_MA(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>EXTI_set_IMRx(unsigned char, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::sleep()
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::interrupt_init()
</UL>

<P><STRONG><a name="[28f]"></a>EXTI_set_EMRx(unsigned char, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[290]"></a>EXTI_set_RTRx(unsigned char, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI_set_RTRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::interrupt_init()
</UL>

<P><STRONG><a name="[291]"></a>EXTI_set_FTRx(unsigned char, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI_set_FTRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::interrupt_init()
</UL>

<P><STRONG><a name="[292]"></a>EXTI_set_SWIERx(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[15e]"></a>EXTI_get_PRx(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_get_PRx(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>EXTI_clear_PRx(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_clear_PRx(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[293]"></a>PWR_set_DBP(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_shutdown()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_init()
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_syetem_time(int, int, int)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init(unsigned, unsigned char)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init_per_1_second(unsigned char)
</UL>

<P><STRONG><a name="[294]"></a>RCC_get_PLLRDY()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_get_PLLRDY()
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init()
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC_init()
</UL>

<P><STRONG><a name="[295]"></a>RCC_set_PLLON(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_PLLON(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init()
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC_init()
</UL>

<P><STRONG><a name="[296]"></a>RCC_set_CSSON(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[297]"></a>RCC_set_HSEBYP(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[298]"></a>RCC_get_HSERDY()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[299]"></a>RCC_set_HSEON(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_HSEON(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init()
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC_init()
</UL>

<P><STRONG><a name="[29a]"></a>RCC_get_HSICAL()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits(unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[29b]"></a>RCC_set_HSITRIM(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[29c]"></a>RCC_get_HSIRDY()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_get_HSIRDY()
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init()
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC_init()
</UL>

<P><STRONG><a name="[29d]"></a>RCC_set_HSION(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_HSION(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init()
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC_init()
</UL>

<P><STRONG><a name="[29e]"></a>RCC_set_MCO(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[29f]"></a>RCC_set_USBPRE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2a0]"></a>RCC_set_PLLMUL(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_set_PLLMUL(unsigned char) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init()
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC_init()
</UL>

<P><STRONG><a name="[2a1]"></a>RCC_set_PLLXTPRE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_PLLXTPRE(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init()
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC_init()
</UL>

<P><STRONG><a name="[2a2]"></a>RCC_set_PLLSRC(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_PLLSRC(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init()
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC_init()
</UL>

<P><STRONG><a name="[2a3]"></a>RCC_set_ADCPRE(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_set_ADCPRE(unsigned char) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init()
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC_init()
</UL>

<P><STRONG><a name="[2a4]"></a>RCC_set_PPRE2(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_set_PPRE2(unsigned char) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init()
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC_init()
</UL>

<P><STRONG><a name="[2a5]"></a>RCC_set_PPRE1(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_set_PPRE1(unsigned char) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init()
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC_init()
</UL>

<P><STRONG><a name="[2a6]"></a>RCC_set_HPRE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_set_HPRE(unsigned char) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init()
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC_init()
</UL>

<P><STRONG><a name="[2a7]"></a>RCC_get_SWS()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits(unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2a8]"></a>RCC_set_SW(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_set_SW(unsigned char) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init()
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RCC_init()
</UL>

<P><STRONG><a name="[2a9]"></a>RCC_set_CSSC()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2aa]"></a>RCC_set_PLLRDYC()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2ab]"></a>RCC_set_HSERDYC()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2ac]"></a>RCC_set_HSIRDYC()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2ad]"></a>RCC_set_LSERDYC()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2ae]"></a>RCC_set_LSIRDYC()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2af]"></a>RCC_set_PLLRDYIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2b0]"></a>RCC_set_HSERDYIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2b1]"></a>RCC_set_HSIRDYIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2b2]"></a>RCC_set_LSERDYIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2b3]"></a>RCC_set_LSIRDYIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2b4]"></a>RCC_get_CSSF()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[2b5]"></a>RCC_get_PLLRDYF()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[2b6]"></a>RCC_get_HSERDYF()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[2b7]"></a>RCC_get_HSIRDYF()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[2b8]"></a>RCC_get_LSERDYF()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[2b9]"></a>RCC_get_LSIRDYF()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[2ba]"></a>RCC_set_TIM11RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2bb]"></a>RCC_set_TIM10RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2bc]"></a>RCC_set_TIM9RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2bd]"></a>RCC_set_ADC3RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2be]"></a>RCC_set_USART1RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2bf]"></a>RCC_set_TIM8RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2c0]"></a>RCC_set_SPI1RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2c1]"></a>RCC_set_TIM1RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2c2]"></a>RCC_set_ADC2RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2c3]"></a>RCC_set_ADC1RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2c4]"></a>RCC_set_IOPGRST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2c5]"></a>RCC_set_IOPFRST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2c6]"></a>RCC_set_IOPERST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2c7]"></a>RCC_set_IOPDRST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2c8]"></a>RCC_set_IOPCRST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2c9]"></a>RCC_set_IOPBRST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2ca]"></a>RCC_set_IOPARST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2cb]"></a>RCC_set_AFIORST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2cc]"></a>RCC_set_DACRST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2cd]"></a>RCC_set_PWRRST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2ce]"></a>RCC_set_BKPRST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2cf]"></a>RCC_set_CANRST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2d0]"></a>RCC_set_USBRST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2d1]"></a>RCC_set_I2C2RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2d2]"></a>RCC_set_I2C1RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2d3]"></a>RCC_set_UART5RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2d4]"></a>RCC_set_UART4RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2d5]"></a>RCC_set_USART3RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2d6]"></a>RCC_set_USART2RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2d7]"></a>RCC_set_SPI3RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2d8]"></a>RCC_set_SPI2RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2d9]"></a>RCC_set_WWDGRST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2da]"></a>RCC_set_TIM14RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2db]"></a>RCC_set_TIM13RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2dc]"></a>RCC_set_TIM12RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2dd]"></a>RCC_set_TIM7RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2de]"></a>RCC_set_TIM6RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2df]"></a>RCC_set_TIM5RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2e0]"></a>RCC_set_TIM4RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2e1]"></a>RCC_set_TIM3RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2e2]"></a>RCC_set_TIM2RST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[2e3]"></a>RCC_set_SDIOEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2e4]"></a>RCC_set_FSMCEN(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_FSMCEN(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::pins_init()
</UL>

<P><STRONG><a name="[2e5]"></a>RCC_set_CRCEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_init()
</UL>

<P><STRONG><a name="[2e6]"></a>RCC_set_FLITFEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2e7]"></a>RCC_set_SRAMEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2e8]"></a>RCC_set_DMA2EN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2e9]"></a>RCC_set_DMA1EN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init()
</UL>

<P><STRONG><a name="[2ea]"></a>RCC_set_TIM11EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2eb]"></a>RCC_set_TIM10EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2ec]"></a>RCC_set_TIM9EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2ed]"></a>RCC_set_ADC3EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2ee]"></a>RCC_set_USART1EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_USART1EN(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[2ef]"></a>RCC_set_TIM8EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms(unsigned, unsigned)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[2f0]"></a>RCC_set_SPI1EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2f1]"></a>RCC_set_TIM1EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms(unsigned, unsigned)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us(unsigned, unsigned)
</UL>

<P><STRONG><a name="[2f2]"></a>RCC_set_ADC2EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2f3]"></a>RCC_set_ADC1EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_cnf_temperature()
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init()
</UL>

<P><STRONG><a name="[2f4]"></a>RCC_set_IOPGEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_IOPGEN(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::pins_init()
</UL>

<P><STRONG><a name="[2f5]"></a>RCC_set_IOPFEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_IOPFEN(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::pins_init()
</UL>

<P><STRONG><a name="[2f6]"></a>RCC_set_IOPEEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_IOPEEN(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::pins_init()
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_init()
</UL>

<P><STRONG><a name="[2f7]"></a>RCC_set_IOPDEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_IOPDEN(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::pins_init()
</UL>

<P><STRONG><a name="[2f8]"></a>RCC_set_IOPCEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2f9]"></a>RCC_set_IOPBEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_IOPBEN(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_cnf_init()
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::pins_init()
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::MPU6050_IO_init()
</UL>

<P><STRONG><a name="[2fa]"></a>RCC_set_IOPAEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_IOPAEN(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2()
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1()
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_init(USART_BAUD_RATE)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_init(USART_BAUD_RATE)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::pins_init()
</UL>

<P><STRONG><a name="[2fb]"></a>RCC_set_IOPxEN(unsigned char, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_set_IOPxEN(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::init()
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init()
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::port_init()
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::interrupt_init()
</UL>

<P><STRONG><a name="[2fc]"></a>RCC_set_AFIOEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_AFIOEN(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_cnf_init()
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_init(USART_BAUD_RATE)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_init(USART_BAUD_RATE)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::pins_init()
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::interrupt_init()
</UL>

<P><STRONG><a name="[2fd]"></a>RCC_set_DACEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2()
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1()
</UL>

<P><STRONG><a name="[2fe]"></a>RCC_set_PWREN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_shutdown()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_init()
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_syetem_time(int, int, int)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init(unsigned, unsigned char)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init_per_1_second(unsigned char)
</UL>

<P><STRONG><a name="[2ff]"></a>RCC_set_BKPEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_shutdown()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_init()
</UL>

<P><STRONG><a name="[300]"></a>RCC_set_CANEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[301]"></a>RCC_set_USBEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[302]"></a>RCC_set_I2C2EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[303]"></a>RCC_set_I2C1EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_cnf_init()
</UL>

<P><STRONG><a name="[304]"></a>RCC_set_UART5EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[305]"></a>RCC_set_UART4EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[306]"></a>RCC_set_USART3EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[307]"></a>RCC_set_USART2EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[308]"></a>RCC_set_SPI3EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[309]"></a>RCC_set_SPI2EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[30a]"></a>RCC_set_WWDGEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[30b]"></a>RCC_set_TIM14EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[30c]"></a>RCC_set_TIM13EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[30d]"></a>RCC_set_TIM12EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[30e]"></a>RCC_set_TIM7EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[30f]"></a>RCC_set_TIM6EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[310]"></a>RCC_set_TIM5EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[311]"></a>RCC_set_TIM4EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[312]"></a>RCC_set_TIM3EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[313]"></a>RCC_set_TIM2EN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[314]"></a>RCC_set_BDRST()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_reset()
</UL>

<P><STRONG><a name="[315]"></a>RCC_set_RTCEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init(unsigned, unsigned char)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init_per_1_second(unsigned char)
</UL>

<P><STRONG><a name="[316]"></a>RCC_set_RTCSEL(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init(unsigned, unsigned char)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init_per_1_second(unsigned char)
</UL>

<P><STRONG><a name="[317]"></a>RCC_set_LSEBYP(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[318]"></a>RCC_get_LSERDY()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init(unsigned, unsigned char)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init_per_1_second(unsigned char)
</UL>

<P><STRONG><a name="[319]"></a>RCC_set_LSEON(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init(unsigned, unsigned char)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init_per_1_second(unsigned char)
</UL>

<P><STRONG><a name="[31a]"></a>RCC_get_LPWRRSTF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[31b]"></a>RCC_get_WWDGRSTF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[31c]"></a>RCC_get_IWDGRSTF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[31d]"></a>RCC_get_SFTRSTF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[31e]"></a>RCC_get_PORRSTF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[31f]"></a>RCC_get_PINRSTF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[320]"></a>RCC_set_RMVF()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[321]"></a>RCC_get_LSIRDY()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[322]"></a>RCC_set_LSION(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[323]"></a>RTC_set_OWIE(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[324]"></a>RTC_set_ALRIE(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[325]"></a>RTC_set_SECIE(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init(unsigned, unsigned char)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init_per_1_second(unsigned char)
</UL>

<P><STRONG><a name="[326]"></a>RTC_set_CNF(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_syetem_time(int, int, int)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init(unsigned, unsigned char)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init_per_1_second(unsigned char)
</UL>

<P><STRONG><a name="[327]"></a>RTC_set_PRL(unsigned)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init(unsigned, unsigned char)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init_per_1_second(unsigned char)
</UL>

<P><STRONG><a name="[328]"></a>RTC_get_DIV()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits(unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[329]"></a>RTC_set_CNT(unsigned)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_syetem_time(int, int, int)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init(unsigned, unsigned char)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init_per_1_second(unsigned char)
</UL>

<P><STRONG><a name="[32a]"></a>RTC_set_ALR(unsigned)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[32b]"></a>SPI1_set_BIDIMODE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[32c]"></a>SPI2_set_BIDIMODE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[32d]"></a>SPI1_set_BIDIOE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[32e]"></a>SPI2_set_BIDIOE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[32f]"></a>SPI1_set_CRCEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[330]"></a>SPI2_set_CRCEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[331]"></a>SPI1_set_CRCNEXT(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[332]"></a>SPI2_set_CRCNEXT(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[333]"></a>SPI1_set_DFF(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[334]"></a>SPI2_set_DFF(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[335]"></a>SPI1_set_RXONLY(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[336]"></a>SPI2_set_RXONLY(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[337]"></a>SPI1_set_SSM(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[338]"></a>SPI2_set_SSM(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[339]"></a>SPI1_set_SSI(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[33a]"></a>SPI2_set_SSI(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[33b]"></a>SPI1_set_LSBFIRST(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[33c]"></a>SPI2_set_LSBFIRST(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[33d]"></a>SPI1_set_SPE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[33e]"></a>SPI2_set_SPE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[33f]"></a>SPI1_set_BR(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[340]"></a>SPI2_set_BR(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[341]"></a>SPI1_set_MSTR(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[342]"></a>SPI2_set_MSTR(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[343]"></a>SPI1_set_CPOL(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[344]"></a>SPI2_set_CPOL(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[345]"></a>SPI1_set_CPHA(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[346]"></a>SPI2_set_CPHA(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[347]"></a>SPI1_set_TXEIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[348]"></a>SPI2_set_TXEIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[349]"></a>SPI1_set_RXNEIE(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[34a]"></a>SPI2_set_RXNEIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[34b]"></a>SPI1_set_ERRIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[34c]"></a>SPI2_set_ERRIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[34d]"></a>SPI1_set_SSOE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[34e]"></a>SPI2_set_SSOE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[34f]"></a>SPI1_set_TXDMAEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[350]"></a>SPI2_set_TXDMAEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[351]"></a>SPI1_set_RXDMAEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[352]"></a>SPI2_set_RXDMAEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[353]"></a>SPI1_get_BSY()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[354]"></a>SPI2_get_BSY()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[355]"></a>SPI1_get_OVR()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[356]"></a>SPI2_get_OVR()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[357]"></a>SPI1_get_MODF()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[358]"></a>SPI2_get_MODF()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[359]"></a>SPI1_get_CRCERR()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[35a]"></a>SPI2_get_CRCERR()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[35b]"></a>SPI1_get_TXE()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[35c]"></a>SPI2_get_TXE()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[35d]"></a>SPI2_get_RXNE()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[705]"></a>SPI1_set_DR(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[706]"></a>SPI1_get_DR()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[707]"></a>SPI2_set_DR(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[708]"></a>SPI2_get_DR()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[709]"></a>SPI1_set_CRCPOLY(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[70a]"></a>SPI2_set_CRCPOLY(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[70b]"></a>SPI1_get_RXCRC()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[70c]"></a>SPI2_get_RXCRC()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[70d]"></a>SPI1_get_TXCRC()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[70e]"></a>SPI2_get_TXCRC()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>USART1_get_CTS()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[35f]"></a>USART1_clear_CTS()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[360]"></a>USART2_get_CTS()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[361]"></a>USART2_clear_CTS()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[362]"></a>USART3_get_CTS()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[363]"></a>USART3_clear_CTS()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[364]"></a>USART1_get_LBD()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[365]"></a>USART1_clear_LBD()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[366]"></a>USART2_get_LBD()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[367]"></a>USART2_clear_LBD()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[368]"></a>USART3_get_LBD()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[369]"></a>USART3_clear_LBD()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[36a]"></a>USART1_get_TXE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_get_TXE()
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_char(char)
</UL>

<P><STRONG><a name="[36b]"></a>USART1_clear_TXE()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[36c]"></a>USART2_get_TXE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_char(char)
</UL>

<P><STRONG><a name="[36d]"></a>USART2_clear_TXE()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[36e]"></a>USART3_get_TXE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[36f]"></a>USART3_clear_TXE()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[370]"></a>USART1_get_TC()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_string(char*)
</UL>

<P><STRONG><a name="[371]"></a>USART1_clear_TC()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[372]"></a>USART2_get_TC()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_string(char*)
</UL>

<P><STRONG><a name="[373]"></a>USART2_clear_TC()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[374]"></a>USART3_get_TC()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[375]"></a>USART3_clear_TC()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[376]"></a>USART1_get_RXNE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[377]"></a>USART1_clear_RXNE()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[378]"></a>USART2_get_RXNE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[379]"></a>USART2_clear_RXNE()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[37a]"></a>USART3_get_RXNE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[37b]"></a>USART3_clear_RXNE()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[37c]"></a>USART1_get_IDLE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[37d]"></a>USART1_clear_IDLE()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[37e]"></a>USART2_get_IDLE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[37f]"></a>USART2_clear_IDLE()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[380]"></a>USART3_get_IDLE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[381]"></a>USART3_clear_IDLE()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[382]"></a>USART1_get_ORE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[70f]"></a>USART1_clear_ORE()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>USART2_get_ORE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[710]"></a>USART2_clear_ORE()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>USART3_get_ORE()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[711]"></a>USART3_clear_ORE()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[385]"></a>USART1_get_NE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[386]"></a>USART2_get_NE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[387]"></a>USART3_get_NE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[388]"></a>USART1_get_FE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[389]"></a>USART2_get_FE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[38a]"></a>USART3_get_FE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[38b]"></a>USART1_get_PE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[38c]"></a>USART2_get_PE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[38d]"></a>USART3_get_PE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[712]"></a>USART1_get_DR()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[514]"></a>USART1_set_DR(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_char(char)
</UL>

<P><STRONG><a name="[713]"></a>USART2_get_DR()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[51e]"></a>USART2_set_DR(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_char(char)
</UL>

<P><STRONG><a name="[714]"></a>USART3_get_DR()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[715]"></a>USART3_set_DR(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>USART1_set_BRR(unsigned short, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, base.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div(float)
</UL>

<P><STRONG><a name="[38e]"></a>USART1_set_div(float)</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_set_div(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_BRR(unsigned short, unsigned short)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[397]"></a>USART1_get_div()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits(unsigned, unsigned char, unsigned char)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[39a]"></a>USART2_set_BRR(unsigned short, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div(float)
</UL>

<P><STRONG><a name="[399]"></a>USART2_set_div(float)</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_BRR(unsigned short, unsigned short)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[39b]"></a>USART2_get_div()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits(unsigned, unsigned char, unsigned char)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[39d]"></a>USART3_set_BRR(unsigned short, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_div(float)
</UL>

<P><STRONG><a name="[39c]"></a>USART3_set_div(float)</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_BRR(unsigned short, unsigned short)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>

<P><STRONG><a name="[39e]"></a>USART3_get_div()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits(unsigned, unsigned char, unsigned char)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[39f]"></a>USART1_set_enable(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_set_enable(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[3a0]"></a>USART2_set_enable(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[3a1]"></a>USART3_set_enable(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3a2]"></a>USART1_set_M(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_set_M(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[3a3]"></a>USART2_set_M(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[3a4]"></a>USART3_set_M(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3a5]"></a>USART1_set_WAKE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3a6]"></a>USART2_set_WAKE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3a7]"></a>USART3_set_WAKE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3a8]"></a>USART1_set_PCE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_set_PCE(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[3a9]"></a>USART2_set_PCE(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[3aa]"></a>USART3_set_PCE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3ab]"></a>USART1_set_PS(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3ac]"></a>USART2_set_PS(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3ad]"></a>USART3_set_PS(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3ae]"></a>USART1_set_PEIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3af]"></a>USART2_set_PEIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3b0]"></a>USART3_set_PEIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3b1]"></a>USART1_set_TXEIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3b2]"></a>USART2_set_TXEIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3b3]"></a>USART3_set_TXEIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3b4]"></a>USART1_set_TCIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3b5]"></a>USART2_set_TCIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3b6]"></a>USART3_set_TCIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3b7]"></a>USART1_set_RXNEIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3b8]"></a>USART2_set_RXNEIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[3b9]"></a>USART3_set_RXNEIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3ba]"></a>USART1_set_IDLEIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3bb]"></a>USART2_set_IDLEIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3bc]"></a>USART3_set_IDLEIE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3bd]"></a>USART1_set_TE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_set_TE(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[3be]"></a>USART2_set_TE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[3bf]"></a>USART3_set_TE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3c0]"></a>USART1_set_RE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_set_RE(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[3c1]"></a>USART2_set_RE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[3c2]"></a>USART3_set_RE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3c3]"></a>USART1_set_RWU(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3c4]"></a>USART2_set_RWU(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3c5]"></a>USART3_set_RWU(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3c6]"></a>USART1_set_SBK()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[3c7]"></a>USART2_set_SBK()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[3c8]"></a>USART3_set_SBK()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[3c9]"></a>USART1_set_LINEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3ca]"></a>USART2_set_LINEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3cb]"></a>USART3_set_LINEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3cc]"></a>USART1_set_STOP(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_set_STOP(unsigned char) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[3cd]"></a>USART2_set_STOP(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[3ce]"></a>USART3_set_STOP(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3cf]"></a>USART1_set_CLKEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3d0]"></a>USART2_set_CLKEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3d1]"></a>USART3_set_CLKEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3d2]"></a>USART1_set_CPOL(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3d3]"></a>USART2_set_CPOL(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3d4]"></a>USART3_set_CPOL(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3d5]"></a>USART1_set_CPHA(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3d6]"></a>USART2_set_CPHA(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3d7]"></a>USART3_set_CPHA(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3d8]"></a>USART1_set_LBCL(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3d9]"></a>USART2_set_LBCL(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3da]"></a>USART3_set_LBCL(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3db]"></a>USART1_set_LBDIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3dc]"></a>USART2_set_LBDIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3dd]"></a>USART3_set_LBDIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3de]"></a>USART1_set_LBDL(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3df]"></a>USART2_set_LBDL(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3e0]"></a>USART3_set_LBDL(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3e1]"></a>USART1_set_ADD(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[716]"></a>USART1_get_ADD()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[3e2]"></a>USART2_set_ADD(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[717]"></a>USART2_get_ADD()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[3e3]"></a>USART3_set_ADD(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[718]"></a>USART3_get_ADD()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[3e4]"></a>USART1_set_CTSIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_set_CTSIE(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[3e5]"></a>USART2_set_CTSIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3e6]"></a>USART3_set_CTSIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3e7]"></a>USART1_set_CTSE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3e8]"></a>USART2_set_CTSE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3e9]"></a>USART3_set_CTSE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3ea]"></a>USART1_set_RTSE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_set_RTSE(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[3eb]"></a>USART2_set_RTSE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3ec]"></a>USART3_set_RTSE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3ed]"></a>USART1_set_DMAT(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3ee]"></a>USART2_set_DMAT(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3ef]"></a>USART3_set_DMAT(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3f0]"></a>USART1_set_DMAR(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3f1]"></a>USART2_set_DMAR(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3f2]"></a>USART3_set_DMAR(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3f3]"></a>USART1_set_SCEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3f4]"></a>USART2_set_SCEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3f5]"></a>USART3_set_SCEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3f6]"></a>USART1_set_NACK(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3f7]"></a>USART2_set_NACK(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3f8]"></a>USART3_set_NACK(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3f9]"></a>USART1_set_HDSEL(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3fa]"></a>USART2_set_HDSEL(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3fb]"></a>USART3_set_HDSEL(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3fc]"></a>USART1_set_IRLP(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3fd]"></a>USART2_set_IRLP(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3fe]"></a>USART3_set_IRLP(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3ff]"></a>USART1_set_IREN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[400]"></a>USART2_set_IREN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[401]"></a>USART3_set_IREN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[402]"></a>USART1_set_EIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[403]"></a>USART2_set_EIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[404]"></a>USART3_set_EIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[405]"></a>USART1_set_GT(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[406]"></a>USART2_set_GT(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[407]"></a>USART3_set_GT(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[408]"></a>USART1_set_PSC(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[409]"></a>USART2_set_PSC(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[40a]"></a>USART3_set_PSC(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[40b]"></a>DAC_set_DMAEN2(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[40c]"></a>DAC_set_MAMP2(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[40d]"></a>DAC_set_WAVE2(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[40e]"></a>DAC_set_TSEL2(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[40f]"></a>DAC_set_TEN2(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[410]"></a>DAC_set_BOFF2(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[411]"></a>DAC_set_EN2(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[412]"></a>DAC_set_DMAEN1(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2()
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1()
</UL>

<P><STRONG><a name="[413]"></a>DAC_set_MAMP1(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3()
</UL>

<P><STRONG><a name="[414]"></a>DAC_set_WAVE1(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2()
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1()
</UL>

<P><STRONG><a name="[415]"></a>DAC_set_TSEL1(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2()
</UL>

<P><STRONG><a name="[416]"></a>DAC_set_TEN1(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2()
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1()
</UL>

<P><STRONG><a name="[417]"></a>DAC_set_BOFF1(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2()
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1()
</UL>

<P><STRONG><a name="[418]"></a>DAC_set_EN1(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2()
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1()
</UL>

<P><STRONG><a name="[419]"></a>DAC_set_SWTRIG2(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[41a]"></a>DAC_set_SWTRIG1(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[52b]"></a>DAC_set_DHR1(unsigned short)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_write_holding_data(unsigned short)
</UL>

<P><STRONG><a name="[719]"></a>DAC_get_DHR1()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[71a]"></a>DAC_set_DHR2(unsigned short)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[71b]"></a>DAC_get_DHR2()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[71c]"></a>DAC_set_DHRxD(unsigned, unsigned)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[71d]"></a>DAC_get_DHRxD(unsigned, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[529]"></a>DAC_set_DALIM(DAC_DALIGN_MODE)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2()
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1()
</UL>

<P><STRONG><a name="[71e]"></a>DAC_get_DOR2()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[71f]"></a>DAC_get_DOR1()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[532]"></a>BKP_set_DRx(unsigned short, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_CNF_test()
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_save_data(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[531]"></a>BKP_get_DRx(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_save_data(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[41b]"></a>BKP_set_ASOS(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[41c]"></a>BKP_set_ASOE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[41d]"></a>BKP_set_CCO(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[41e]"></a>BKP_set_CAL(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[720]"></a>BKP_get_CAL()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[41f]"></a>BKP_set_TPAL(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[420]"></a>BKP_set_TAMPER(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[421]"></a>BKP_get_TIF()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[422]"></a>BKP_get_TEF()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[423]"></a>BKP_set_TPIE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[424]"></a>BKP_set_CTI()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[425]"></a>BKP_set_CTE()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[721]"></a>BKP_test()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[426]"></a>TIM2_set_ARPE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[427]"></a>TIM3_set_ARPE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[428]"></a>TIM4_set_ARPE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[429]"></a>TIM5_set_ARPE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[42a]"></a>TIM2_set_CMS(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[42b]"></a>TIM3_set_CMS(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[42c]"></a>TIM4_set_CMS(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[42d]"></a>TIM5_set_CMS(unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[42e]"></a>TIM2_set_DIR(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[42f]"></a>TIM3_set_DIR(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[430]"></a>TIM4_set_DIR(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[431]"></a>TIM5_set_DIR(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[432]"></a>TIM2_set_OPM(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[433]"></a>TIM3_set_OPM(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[434]"></a>TIM4_set_OPM(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[435]"></a>TIM5_set_OPM(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[436]"></a>TIM2_set_URS(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[437]"></a>TIM3_set_URS(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[438]"></a>TIM4_set_URS(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[439]"></a>TIM5_set_URS(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[43a]"></a>TIM2_set_UDIS(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[43b]"></a>TIM3_set_UDIS(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[43c]"></a>TIM4_set_UDIS(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[43d]"></a>TIM5_set_UDIS(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[43e]"></a>TIM2_set_CEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[43f]"></a>TIM3_set_CEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[440]"></a>TIM4_set_CEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[441]"></a>TIM5_set_CEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[442]"></a>I2C1_set_SWRST(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[443]"></a>I2C1_set_ACK(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_cnf_init()
</UL>

<P><STRONG><a name="[444]"></a>I2C1_set_STOP(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[445]"></a>I2C1_set_START(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[446]"></a>I2C1_set_PE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_cnf_init()
</UL>

<P><STRONG><a name="[447]"></a>I2C1_set_ITBUFEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[448]"></a>I2C1_set_ITEVTEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[449]"></a>I2C1_set_ITERREN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[44a]"></a>I2C1_set_FREQ(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_cnf_init()
</UL>

<P><STRONG><a name="[44b]"></a>I2C1_set_ADDMODE(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_cnf_init()
</UL>

<P><STRONG><a name="[44c]"></a>I2C1_set_bit14()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit(unsigned*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_cnf_init()
</UL>

<P><STRONG><a name="[44d]"></a>I2C1_set_ADD_7to1(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_cnf_init()
</UL>

<P><STRONG><a name="[44e]"></a>I2C1_set_ADD0(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[44f]"></a>I2C1_set_ADD2(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[450]"></a>I2C1_set_ENDUAL(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[722]"></a>I2C1_set_DR(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[723]"></a>I2C1_get_DR()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[451]"></a>I2C1_set_address(unsigned char, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[452]"></a>I2C1_get_TIMEOUT()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[453]"></a>I2C1_get_OVR()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[454]"></a>I2C1_clear_OVR()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[455]"></a>I2C1_get_AF()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[456]"></a>I2C1_clear_AF()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[457]"></a>I2C1_get_BERR()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[458]"></a>I2C1_clear_BERR()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit(unsigned*, unsigned char)
</UL>

<P><STRONG><a name="[459]"></a>I2C1_get_TxE()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[45a]"></a>I2C1_get_RxNE()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[45b]"></a>I2C1_get_STOPF()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[45c]"></a>I2C1_get_BTF()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[45d]"></a>I2C1_get_ADDR()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[45e]"></a>I2C1_get_SB()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[45f]"></a>I2C1_get_TRA()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[460]"></a>I2C1_get_BUSY()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[461]"></a>I2C1_get_MSL()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[462]"></a>I2C1_set_FS(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[463]"></a>I2C1_set_CCR(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_cnf_init()
</UL>

<P><STRONG><a name="[464]"></a>I2C1_set_TRISE(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_cnf_init()
</UL>

<P><STRONG><a name="[465]"></a>SYSTICK_get_CONTFLAG()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[466]"></a>SYSTICK_set_CLKSOURCE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[467]"></a>SYSTICK_get_CLKSOURCE()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[468]"></a>SYSTICK_set_TICKINT(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_init_ms(unsigned)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_init()
</UL>

<P><STRONG><a name="[469]"></a>SYSTICK_set_ENABLE(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_init_ms(unsigned)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_init()
</UL>

<P><STRONG><a name="[526]"></a>SYSTICK_set_RELOAD(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_init_ms(unsigned)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_init()
</UL>

<P><STRONG><a name="[724]"></a>SYSTICK_get_RELOAD()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[725]"></a>SYSTICK_set_CURRENT(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[726]"></a>SYSTICK_get_CURRENT()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[46a]"></a>SYSTICK_get_NOREF()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[46b]"></a>SYSTICK_get_SKEW()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[46c]"></a>SYSTICK_get_TENMS()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits(unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[163]"></a>NVIC_enable_interrupt(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_enable_interrupt(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_init(USART_BAUD_RATE)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init(unsigned, unsigned char)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init_per_1_second(unsigned char)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init()
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms(unsigned, unsigned)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us(unsigned, unsigned)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms(unsigned, unsigned)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us(unsigned, unsigned)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_cnf_temperature()
</UL>

<P><STRONG><a name="[160]"></a>NVIC_disable_interrupt(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_disable_interrupt(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::sleep()
</UL>

<P><STRONG><a name="[727]"></a>NVIC_pending_interrupt(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[728]"></a>NVIC_clear_pending(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[729]"></a>NVIC_get_PRIx(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[72a]"></a>NVIC_set_PRIx(unsigned short, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, base.o(.text), UNUSED)

<P><STRONG><a name="[46d]"></a>FSMC_NORPSRAM1_set_CBURSTRW(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[46e]"></a>FSMC_NORPSRAM2_set_CBURSTRW(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[46f]"></a>FSMC_NORPSRAM3_set_CBURSTRW(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[470]"></a>FSMC_NORPSRAM4_set_CBURSTRW(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[471]"></a>FSMC_NORPSRAM1_set_ASYNCWAIT(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[472]"></a>FSMC_NORPSRAM2_set_ASYNCWAIT(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[473]"></a>FSMC_NORPSRAM3_set_ASYNCWAIT(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[474]"></a>FSMC_NORPSRAM4_set_ASYNCWAIT(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[475]"></a>FSMC_NORPSRAM1_set_EXTMOD(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[476]"></a>FSMC_NORPSRAM2_set_EXTMOD(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[477]"></a>FSMC_NORPSRAM3_set_EXTMOD(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[478]"></a>FSMC_NORPSRAM4_set_EXTMOD(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_EXTMOD(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::FSMC_init()
</UL>

<P><STRONG><a name="[479]"></a>FSMC_NORPSRAM1_set_WAITEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[47a]"></a>FSMC_NORPSRAM2_set_WAITEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[47b]"></a>FSMC_NORPSRAM3_set_WAITEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[47c]"></a>FSMC_NORPSRAM4_set_WAITEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_WAITEN(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::FSMC_init()
</UL>

<P><STRONG><a name="[47d]"></a>FSMC_NORPSRAM1_set_WREN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[47e]"></a>FSMC_NORPSRAM2_set_WREN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[47f]"></a>FSMC_NORPSRAM3_set_WREN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[480]"></a>FSMC_NORPSRAM4_set_WREN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_WREN(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::FSMC_init()
</UL>

<P><STRONG><a name="[481]"></a>FSMC_NORPSRAM1_set_WAITCFG(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[482]"></a>FSMC_NORPSRAM2_set_WAITCFG(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[483]"></a>FSMC_NORPSRAM3_set_WAITCFG(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[484]"></a>FSMC_NORPSRAM4_set_WAITCFG(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_WAITCFG(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::FSMC_init()
</UL>

<P><STRONG><a name="[485]"></a>FSMC_NORPSRAM1_set_WRAPMOD(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[486]"></a>FSMC_NORPSRAM2_set_WRAPMOD(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[487]"></a>FSMC_NORPSRAM3_set_WRAPMOD(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[488]"></a>FSMC_NORPSRAM4_set_WRAPMOD(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_WRAPMOD(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::FSMC_init()
</UL>

<P><STRONG><a name="[489]"></a>FSMC_NORPSRAM1_set_WAITPOL(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[48a]"></a>FSMC_NORPSRAM2_set_WAITPOL(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[48b]"></a>FSMC_NORPSRAM3_set_WAITPOL(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[48c]"></a>FSMC_NORPSRAM4_set_WAITPOL(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_WAITPOL(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::FSMC_init()
</UL>

<P><STRONG><a name="[48d]"></a>FSMC_NORPSRAM1_set_BURSTEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[48e]"></a>FSMC_NORPSRAM2_set_BURSTEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[48f]"></a>FSMC_NORPSRAM3_set_BURSTEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[490]"></a>FSMC_NORPSRAM4_set_BURSTEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_BURSTEN(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::FSMC_init()
</UL>

<P><STRONG><a name="[491]"></a>FSMC_NORPSRAM1_set_FACCEN(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[492]"></a>FSMC_NORPSRAM2_set_FACCEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[493]"></a>FSMC_NORPSRAM3_set_FACCEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[494]"></a>FSMC_NORPSRAM4_set_FACCEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[495]"></a>FSMC_NORPSRAM1_set_MWID(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[496]"></a>FSMC_NORPSRAM2_set_MWID(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[497]"></a>FSMC_NORPSRAM3_set_MWID(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[498]"></a>FSMC_NORPSRAM4_set_MWID(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FSMC_NORPSRAM4_set_MWID(unsigned char) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::FSMC_init()
</UL>

<P><STRONG><a name="[499]"></a>FSMC_NORPSRAM1_set_MTYP(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[49a]"></a>FSMC_NORPSRAM2_set_MTYP(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[49b]"></a>FSMC_NORPSRAM3_set_MTYP(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[49c]"></a>FSMC_NORPSRAM4_set_MTYP(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FSMC_NORPSRAM4_set_MTYP(unsigned char) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::FSMC_init()
</UL>

<P><STRONG><a name="[49d]"></a>FSMC_NORPSRAM1_set_MUXEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[49e]"></a>FSMC_NORPSRAM2_set_MUXEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[49f]"></a>FSMC_NORPSRAM3_set_MUXEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4a0]"></a>FSMC_NORPSRAM4_set_MUXEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_MUXEN(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::FSMC_init()
</UL>

<P><STRONG><a name="[4a1]"></a>FSMC_NORPSRAM1_set_MBKEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4a2]"></a>FSMC_NORPSRAM2_set_MBKEN(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4a3]"></a>FSMC_NORPSRAM3_set_MBKEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4a4]"></a>FSMC_NORPSRAM4_set_MBKEN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_MBKEN(unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::FSMC_init()
</UL>

<P><STRONG><a name="[4a5]"></a>FSMC_NORPSRAM1_set_ACCMOD(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4a6]"></a>FSMC_NORPSRAM2_set_ACCMOD(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4a7]"></a>FSMC_NORPSRAM3_set_ACCMOD(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4a8]"></a>FSMC_NORPSRAM4_set_ACCMOD(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FSMC_NORPSRAM4_set_ACCMOD(unsigned char) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::FSMC_init()
</UL>

<P><STRONG><a name="[4a9]"></a>FSMC_NORPSRAM1_set_DATLAT(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4aa]"></a>FSMC_NORPSRAM2_set_DATLAT(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4ab]"></a>FSMC_NORPSRAM3_set_DATLAT(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4ac]"></a>FSMC_NORPSRAM4_set_DATLAT(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4ad]"></a>FSMC_NORPSRAM1_set_CLKDIV(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4ae]"></a>FSMC_NORPSRAM2_set_CLKDIV(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4af]"></a>FSMC_NORPSRAM3_set_CLKDIV(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4b0]"></a>FSMC_NORPSRAM4_set_CLKDIV(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4b1]"></a>FSMC_NORPSRAM1_set_BUSTURN(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4b2]"></a>FSMC_NORPSRAM2_set_BUSTURN(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4b3]"></a>FSMC_NORPSRAM3_set_BUSTURN(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4b4]"></a>FSMC_NORPSRAM4_set_BUSTURN(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FSMC_NORPSRAM4_set_BUSTURN(unsigned char) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::FSMC_init()
</UL>

<P><STRONG><a name="[4b5]"></a>FSMC_NORPSRAM1_set_DATAST(unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4b6]"></a>FSMC_NORPSRAM2_set_DATAST(unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4b7]"></a>FSMC_NORPSRAM3_set_DATAST(unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4b8]"></a>FSMC_NORPSRAM4_set_DATAST(unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FSMC_NORPSRAM4_set_DATAST(unsigned short) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::FSMC_init()
</UL>

<P><STRONG><a name="[4b9]"></a>FSMC_NORPSRAM1_set_ADDHLD(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4ba]"></a>FSMC_NORPSRAM2_set_ADDHLD(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4bb]"></a>FSMC_NORPSRAM3_set_ADDHLD(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4bc]"></a>FSMC_NORPSRAM4_set_ADDHLD(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4bd]"></a>FSMC_NORPSRAM1_set_ADDSET(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4be]"></a>FSMC_NORPSRAM2_set_ADDSET(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4bf]"></a>FSMC_NORPSRAM3_set_ADDSET(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4c0]"></a>FSMC_NORPSRAM4_set_ADDSET(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FSMC_NORPSRAM4_set_ADDSET(unsigned char) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::FSMC_init()
</UL>

<P><STRONG><a name="[4c1]"></a>FSMC_NORPSRAM1_W_set_ACCMOD(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4c2]"></a>FSMC_NORPSRAM2_W_set_ACCMOD(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4c3]"></a>FSMC_NORPSRAM3_W_set_ACCMOD(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4c4]"></a>FSMC_NORPSRAM4_W_set_ACCMOD(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4c5]"></a>FSMC_NORPSRAM1_W_set_DATLAT(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4c6]"></a>FSMC_NORPSRAM2_W_set_DATLAT(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4c7]"></a>FSMC_NORPSRAM3_W_set_DATLAT(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4c8]"></a>FSMC_NORPSRAM4_W_set_DATLAT(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4c9]"></a>FSMC_NORPSRAM1_W_set_CLKDIV(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4ca]"></a>FSMC_NORPSRAM2_W_set_CLKDIV(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4cb]"></a>FSMC_NORPSRAM3_W_set_CLKDIV(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4cc]"></a>FSMC_NORPSRAM4_W_set_CLKDIV(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4cd]"></a>FSMC_NORPSRAM1_W_set_BUSTURN(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4ce]"></a>FSMC_NORPSRAM2_W_set_BUSTURN(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4cf]"></a>FSMC_NORPSRAM3_W_set_BUSTURN(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4d0]"></a>FSMC_NORPSRAM4_W_set_BUSTURN(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4d1]"></a>FSMC_NORPSRAM1_W_set_DATAST(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4d2]"></a>FSMC_NORPSRAM2_W_set_DATAST(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4d3]"></a>FSMC_NORPSRAM3_W_set_DATAST(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4d4]"></a>FSMC_NORPSRAM4_W_set_DATAST(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4d5]"></a>FSMC_NORPSRAM1_W_set_ADDHLD(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4d6]"></a>FSMC_NORPSRAM2_W_set_ADDHLD(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4d7]"></a>FSMC_NORPSRAM3_W_set_ADDHLD(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4d8]"></a>FSMC_NORPSRAM4_W_set_ADDHLD(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4d9]"></a>FSMC_NORPSRAM1_W_set_ADDSET(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4da]"></a>FSMC_NORPSRAM2_W_set_ADDSET(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4db]"></a>FSMC_NORPSRAM3_W_set_ADDSET(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4dc]"></a>FSMC_NORPSRAM4_W_set_ADDSET(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4dd]"></a>ADC1_IN10_init()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_SQRx(unsigned char, unsigned char)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_L(unsigned char)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_SMPx(unsigned char, unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_ADON(unsigned char)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_CONT(unsigned char)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_CAL()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_CAL()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_RSTCAL()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_RSTCAL()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_DMA(unsigned char)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_ALIGN(unsigned char)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPxEN(unsigned char, unsigned char)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADC1EN(unsigned char)
</UL>

<P><STRONG><a name="[4de]"></a>ADC1_cnf_temperature()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_SQRx(unsigned char, unsigned char)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_L(unsigned char)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_SMPx(unsigned char, unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_ADON(unsigned char)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_CONT(unsigned char)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_TSVREFE(unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_EOCIE(unsigned char)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms(unsigned)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt(unsigned char)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADC1EN(unsigned char)
</UL>

<P><STRONG><a name="[4df]"></a>ADC1_start_conversion()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_ADON(unsigned char)
</UL>

<P><STRONG><a name="[4e0]"></a>TIM1_init_us(unsigned, unsigned)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_UIE(unsigned char)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_SMS(unsigned char)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CEN(unsigned char)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_URS(unsigned char)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_DIR(unsigned char)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt(unsigned char)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM1EN(unsigned char)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_REP(unsigned char)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ARR(unsigned short)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_PSC(unsigned short)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CNT(unsigned short)
</UL>

<P><STRONG><a name="[4e5]"></a>TIM1_init_ms(unsigned, unsigned)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_UIE(unsigned char)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_SMS(unsigned char)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CEN(unsigned char)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_URS(unsigned char)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_DIR(unsigned char)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt(unsigned char)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM1EN(unsigned char)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_REP(unsigned char)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ARR(unsigned short)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_PSC(unsigned short)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CNT(unsigned short)
</UL>

<P><STRONG><a name="[4e6]"></a>TIM1_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_SMS(unsigned char)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CEN(unsigned char)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_DIR(unsigned char)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN(unsigned char)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN(unsigned char)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM1EN(unsigned char)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_MOE(unsigned char)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCR1(unsigned short)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_REP(unsigned char)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ARR(unsigned short)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_PSC(unsigned short)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1E(unsigned char)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1P(unsigned char)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1NE(unsigned char)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1NP(unsigned char)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC1PE(unsigned char)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC1M(unsigned char)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC1CE(unsigned char)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1S(unsigned char)
</UL>

<P><STRONG><a name="[4e8]"></a>TIM1_CH1_set_pwm_duty(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCR1(unsigned short)
</UL>

<P><STRONG><a name="[4e9]"></a>TIM1_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_SMS(unsigned char)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CEN(unsigned char)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_DIR(unsigned char)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN(unsigned char)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN(unsigned char)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM1EN(unsigned char)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_MOE(unsigned char)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCR2(unsigned short)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_REP(unsigned char)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ARR(unsigned short)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_PSC(unsigned short)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2E(unsigned char)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2P(unsigned char)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2NE(unsigned char)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2NP(unsigned char)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC2PE(unsigned char)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC2M(unsigned char)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC2CE(unsigned char)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2S(unsigned char)
</UL>

<P><STRONG><a name="[4eb]"></a>TIM1_CH2_set_pwm_duty(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCR2(unsigned short)
</UL>

<P><STRONG><a name="[4ec]"></a>TIM1_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_SMS(unsigned char)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CEN(unsigned char)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_DIR(unsigned char)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN(unsigned char)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN(unsigned char)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM1EN(unsigned char)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_MOE(unsigned char)
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCR3(unsigned short)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_REP(unsigned char)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ARR(unsigned short)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_PSC(unsigned short)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3E(unsigned char)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3P(unsigned char)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3NE(unsigned char)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3NP(unsigned char)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC3PE(unsigned char)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC3M(unsigned char)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC3CE(unsigned char)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3S(unsigned char)
</UL>

<P><STRONG><a name="[4ee]"></a>TIM1_CH3_set_pwm_duty(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCR3(unsigned short)
</UL>

<P><STRONG><a name="[4ef]"></a>TIM1_CH4_generate_pwm(unsigned, unsigned, unsigned char)</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_SMS(unsigned char)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CEN(unsigned char)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_DIR(unsigned char)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN(unsigned char)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM1EN(unsigned char)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_MOE(unsigned char)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCR4(unsigned short)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_REP(unsigned char)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ARR(unsigned short)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_PSC(unsigned short)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4E(unsigned char)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4P(unsigned char)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC4PE(unsigned char)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC4M(unsigned char)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC4CE(unsigned char)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4S(unsigned char)
</UL>

<P><STRONG><a name="[4f1]"></a>TIM1_CH4_set_pwm_duty(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCR4(unsigned short)
</UL>

<P><STRONG><a name="[4f2]"></a>TIM8_init_us(unsigned, unsigned)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_UIE(unsigned char)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_SMS(unsigned char)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CEN(unsigned char)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_URS(unsigned char)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_DIR(unsigned char)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt(unsigned char)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM8EN(unsigned char)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_REP(unsigned char)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ARR(unsigned short)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_PSC(unsigned short)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CNT(unsigned short)
</UL>

<P><STRONG><a name="[4f7]"></a>TIM8_init_ms(unsigned, unsigned)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_UIE(unsigned char)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_SMS(unsigned char)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CEN(unsigned char)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_URS(unsigned char)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_DIR(unsigned char)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt(unsigned char)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM8EN(unsigned char)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_REP(unsigned char)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ARR(unsigned short)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_PSC(unsigned short)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CNT(unsigned short)
</UL>

<P><STRONG><a name="[4f8]"></a>TIM8_CH1_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_SMS(unsigned char)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CEN(unsigned char)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_DIR(unsigned char)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN(unsigned char)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPCEN(unsigned char)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM8EN(unsigned char)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_MOE(unsigned char)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCR1(unsigned short)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_REP(unsigned char)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ARR(unsigned short)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_PSC(unsigned short)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1E(unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1P(unsigned char)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1NE(unsigned char)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1NP(unsigned char)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC1PE(unsigned char)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC1M(unsigned char)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC1CE(unsigned char)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1S(unsigned char)
</UL>

<P><STRONG><a name="[4fa]"></a>TIM8_CH1_set_pwm_duty(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCR1(unsigned short)
</UL>

<P><STRONG><a name="[4fb]"></a>TIM8_CH2_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_SMS(unsigned char)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CEN(unsigned char)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_DIR(unsigned char)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN(unsigned char)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN(unsigned char)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPCEN(unsigned char)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM8EN(unsigned char)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_MOE(unsigned char)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCR2(unsigned short)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_REP(unsigned char)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ARR(unsigned short)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_PSC(unsigned short)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2E(unsigned char)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2P(unsigned char)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2NE(unsigned char)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2NP(unsigned char)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC2PE(unsigned char)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC2M(unsigned char)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC2CE(unsigned char)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2S(unsigned char)
</UL>

<P><STRONG><a name="[4fd]"></a>TIM8_CH2_set_pwm_duty(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCR2(unsigned short)
</UL>

<P><STRONG><a name="[4fe]"></a>TIM8_CH3_generate_pwm(unsigned, unsigned, unsigned char, unsigned char)</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_SMS(unsigned char)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CEN(unsigned char)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_DIR(unsigned char)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN(unsigned char)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN(unsigned char)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPCEN(unsigned char)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM8EN(unsigned char)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_MOE(unsigned char)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCR3(unsigned short)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_REP(unsigned char)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ARR(unsigned short)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_PSC(unsigned short)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3E(unsigned char)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3P(unsigned char)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3NE(unsigned char)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3NP(unsigned char)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC3PE(unsigned char)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC3M(unsigned char)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC3CE(unsigned char)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3S(unsigned char)
</UL>

<P><STRONG><a name="[500]"></a>TIM8_CH3_set_pwm_duty(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCR3(unsigned short)
</UL>

<P><STRONG><a name="[501]"></a>TIM8_CH4_generate_pwm(unsigned, unsigned, unsigned char)</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_SMS(unsigned char)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CEN(unsigned char)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_DIR(unsigned char)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN(unsigned char)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPCEN(unsigned char)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM8EN(unsigned char)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_MOE(unsigned char)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCR4(unsigned short)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_REP(unsigned char)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ARR(unsigned short)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_PSC(unsigned short)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4E(unsigned char)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4P(unsigned char)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC4PE(unsigned char)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC4M(unsigned char)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC4CE(unsigned char)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4S(unsigned char)
</UL>

<P><STRONG><a name="[503]"></a>TIM8_CH4_set_pwm_duty(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCR4(unsigned short)
</UL>

<P><STRONG><a name="[504]"></a>CRC_init()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_CRCEN(unsigned char)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_set_RESET()
</UL>

<P><STRONG><a name="[505]"></a>CRC_check_data(unsigned*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_set_RESET()
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_get_DR()
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_set_DR(unsigned)
</UL>

<P><STRONG><a name="[508]"></a>DMA1_CH1_init()</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt(unsigned char)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_DMA1EN(unsigned char)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_MA(unsigned char, unsigned)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_PA(unsigned char, unsigned)
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_NDT(unsigned char, unsigned short)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_EN(unsigned char, unsigned char)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_TCIE(unsigned char, unsigned char)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_HTIE(unsigned char, unsigned char)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_DIR(unsigned char, unsigned char)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_CIRC(unsigned char, unsigned char)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_PINC(unsigned char, unsigned char)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_MINC(unsigned char, unsigned char)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_PSIZE(unsigned char, unsigned char)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_MSIZE(unsigned char, unsigned char)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_PL(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[164]"></a>RCC_init()</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, cnf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RCC_init() &rArr; RCC_set_SW(unsigned char) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SW(unsigned char)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HPRE(unsigned char)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PPRE1(unsigned char)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PPRE2(unsigned char)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADCPRE(unsigned char)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLSRC(unsigned char)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLXTPRE(unsigned char)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLMUL(unsigned char)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSION(unsigned char)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_HSIRDY()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSEON(unsigned char)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLON(unsigned char)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_PLLRDY()
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[50c]"></a>_RCC_init()</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SW(unsigned char)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HPRE(unsigned char)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PPRE1(unsigned char)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PPRE2(unsigned char)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADCPRE(unsigned char)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLSRC(unsigned char)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLXTPRE(unsigned char)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLMUL(unsigned char)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSION(unsigned char)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_HSIRDY()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSEON(unsigned char)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLON(unsigned char)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_PLLRDY()
</UL>

<P><STRONG><a name="[50d]"></a>RTC_init_per_1_second(unsigned char)</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt(unsigned char)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_CNT(unsigned)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_PRL(unsigned)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_CNF(unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_SECIE(unsigned char)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_LSEON(unsigned char)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_LSERDY()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_RTCSEL(unsigned char)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_RTCEN(unsigned char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PWREN(unsigned char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_set_DBP(unsigned char)
</UL>

<P><STRONG><a name="[50e]"></a>RTC_init(unsigned, unsigned char)</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt(unsigned char)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_CNT(unsigned)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_PRL(unsigned)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_CNF(unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_SECIE(unsigned char)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_LSEON(unsigned char)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_LSERDY()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_RTCSEL(unsigned char)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_RTCEN(unsigned char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PWREN(unsigned char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_set_DBP(unsigned char)
</UL>

<P><STRONG><a name="[50f]"></a>RTC_set_syetem_time(int, int, int)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit(unsigned, unsigned char)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_CNT(unsigned)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_CNF(unsigned char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PWREN(unsigned char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_set_DBP(unsigned char)
</UL>

<P><STRONG><a name="[510]"></a>USART1_init(USART_BAUD_RATE)</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, cnf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART1_init(USART_BAUD_RATE) &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_RTSE(unsigned char)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_CTSIE(unsigned char)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_STOP(unsigned char)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_RE(unsigned char)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_TE(unsigned char)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_PCE(unsigned char)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_M(unsigned char)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_enable(unsigned char)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div(float)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN(unsigned char)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USART1EN(unsigned char)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::init()
</UL>

<P><STRONG><a name="[512]"></a>USART2_init(USART_BAUD_RATE)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt(unsigned char)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_STOP(unsigned char)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_RE(unsigned char)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_TE(unsigned char)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_RXNEIE(unsigned char)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_PCE(unsigned char)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_M(unsigned char)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_enable(unsigned char)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div(float)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USART2EN(unsigned char)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN(unsigned char)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[513]"></a>USART1_put_char(char)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cnf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_put_char(char) &rArr; USART1_get_TXE()
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_DR(unsigned char)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_TXE()
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_string(char*)
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::go()
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::Switch_release_handler(Screen::Point, Touchable*, Touchable*)
</UL>

<P><STRONG><a name="[515]"></a>USART1_put_string(char*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_char(char)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_TC()
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_printf(char*, ...)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_long(long)
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_double(double)
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_float(float)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_int(int)
</UL>

<P><STRONG><a name="[516]"></a>USART1_put_int(int)</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_string(char*)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[518]"></a>USART1_put_float(float)</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_string(char*)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>

<P><STRONG><a name="[519]"></a>USART1_put_double(double)</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_string(char*)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[51a]"></a>USART1_put_long(long)</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_string(char*)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[51b]"></a>USART1_printf(char*, ...)</STRONG> (Thumb, 36 bytes, Stack size 88 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_string(char*)
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[51d]"></a>USART2_put_char(char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_DR(unsigned char)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_TXE()
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_string(char*)
</UL>

<P><STRONG><a name="[51f]"></a>USART2_put_string(char*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_char(char)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_TC()
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_printf(char*, ...)
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_long(long)
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_double(double)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_float(float)
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_int(int)
</UL>

<P><STRONG><a name="[520]"></a>USART2_put_int(int)</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_string(char*)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[521]"></a>USART2_put_float(float)</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_string(char*)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>

<P><STRONG><a name="[522]"></a>USART2_put_double(double)</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_string(char*)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[523]"></a>USART2_put_long(long)</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_string(char*)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[524]"></a>USART2_printf(char*, ...)</STRONG> (Thumb, 36 bytes, Stack size 88 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_string(char*)
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[525]"></a>SYSTICK_init()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_set_RELOAD(unsigned)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_set_ENABLE(unsigned char)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_set_TICKINT(unsigned char)
</UL>

<P><STRONG><a name="[527]"></a>SYSTICK_init_ms(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_set_RELOAD(unsigned)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_set_ENABLE(unsigned char)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_set_TICKINT(unsigned char)
</UL>

<P><STRONG><a name="[528]"></a>DAC_cnf_mode1()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned)
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DALIM(DAC_DALIGN_MODE)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_EN1(unsigned char)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_BOFF1(unsigned char)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TEN1(unsigned char)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_WAVE1(unsigned char)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DMAEN1(unsigned char)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_DACEN(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN(unsigned char)
</UL>

<P><STRONG><a name="[52a]"></a>DAC_cnf_write_holding_data(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DHR1(unsigned short)
</UL>

<P><STRONG><a name="[52c]"></a>DAC_cnf_mode2()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned)
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DALIM(DAC_DALIGN_MODE)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_EN1(unsigned char)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_BOFF1(unsigned char)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TEN1(unsigned char)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TSEL1(unsigned char)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_WAVE1(unsigned char)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DMAEN1(unsigned char)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_DACEN(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN(unsigned char)
</UL>

<P><STRONG><a name="[52d]"></a>DAC_cnf_mode3()</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned)
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DALIM(DAC_DALIGN_MODE)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_EN1(unsigned char)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_BOFF1(unsigned char)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TEN1(unsigned char)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TSEL1(unsigned char)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_WAVE1(unsigned char)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_MAMP1(unsigned char)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DMAEN1(unsigned char)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_DACEN(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN(unsigned char)
</UL>

<P><STRONG><a name="[52e]"></a>BKP_init()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_BKPEN(unsigned char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PWREN(unsigned char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_set_DBP(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_CNF_test()
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_save_data(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[52f]"></a>BKP_shutdown()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_BKPEN(unsigned char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PWREN(unsigned char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_set_DBP(unsigned char)
</UL>

<P><STRONG><a name="[530]"></a>BKP_save_data(unsigned short, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_init()
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_get_DRx(unsigned char)
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_set_DRx(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[533]"></a>BKP_reset()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_BDRST()
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_CNF_test()
</UL>

<P><STRONG><a name="[534]"></a>BKP_CNF_test()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_reset()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_init()
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_set_DRx(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[535]"></a>I2C1_cnf_init()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, cnf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_TRISE(unsigned char)
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_CCR(unsigned)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_ADD_7to1(unsigned char)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_bit14()
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_ADDMODE(unsigned char)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_FREQ(unsigned char)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_PE(unsigned char)
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_set_ACK(unsigned char)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_I2C1EN(unsigned char)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN(unsigned char)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN(unsigned char)
</UL>

<P><STRONG><a name="[536]"></a>LED_init()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LED_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPEEN(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::system_init()
</UL>

<P><STRONG><a name="[162]"></a>System::touch_process()</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = System::touch_process() &rArr; ADS7843::update_state() &rArr; ADS7843::get_coordinate(Screen::Point*) &rArr; ADS7843::conversion(Screen::Point*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::update_state()
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch::touch_state()
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::system_loop()
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::system_wait()
</UL>

<P><STRONG><a name="[539]"></a>System::event_process()</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = System::event_process() &rArr; Queue&lang;System::Event&rang;::arrange() &rArr; Vector&lang;System::Event&rang;::clear(System::Event*) &rArr; Vector&lang;System::Event&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue&lang;System::Event&rang;::arrange()
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue&lang;System::Event&rang;::empty()
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::system_loop()
</UL>

<P><STRONG><a name="[53c]"></a>System::process_process()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = System::process_process() &rArr; Proc::do_once()
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc::do_once()
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::system_loop()
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::system_wait()
</UL>

<P><STRONG><a name="[53e]"></a>System::user_loop()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = System::user_loop()
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::system_loop()
</UL>

<P><STRONG><a name="[540]"></a>System::user_init()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = System::user_init() &rArr; setup() &rArr; Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*) &rArr; TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::system_loop()
</UL>

<P><STRONG><a name="[13a]"></a>System::system_loop()</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = System::system_loop() &rArr; System::user_init() &rArr; setup() &rArr; Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*) &rArr; TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::touch_process()
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::user_init()
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::user_loop()
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::process_process()
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::event_process()
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>System::system_init()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = System::system_init() &rArr; Screen::Screen(unsigned, SSD1289::Oritation, Color::ColorQuality, unsigned char) &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::init()
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Screen(unsigned, SSD1289::Oritation, Color::ColorQuality, unsigned char)
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::RGB262K(int, int, int)
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[544]"></a>System::system_wait()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::touch_process()
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::process_process()
</UL>

<P><STRONG><a name="[549]"></a>Proc::Proc()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Proc::Proc() &rArr; Vector&lang;Proc*&rang;::push_back(Proc*const &) &rArr; Vector&lang;Proc*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::Vector()
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::push_back(Proc*const &)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
</UL>

<P><STRONG><a name="[72b]"></a>Proc::Proc__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, process.o(.text), UNUSED)

<P><STRONG><a name="[54c]"></a>Proc::~Proc()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Proc::~Proc() &rArr; Vector&lang;Proc*&rang;::erase(Proc**) &rArr; Vector&lang;Proc*&rang;::remove(Proc**) &rArr; Vector&lang;Proc*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::~Vector()
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::erase(Proc**)
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::find(Proc*const &)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::~Window()
</UL>

<P><STRONG><a name="[72c]"></a>Proc::~Proc__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, process.o(.text), UNUSED)

<P><STRONG><a name="[550]"></a>Proc::add_thread(void(*)())</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Proc::add_thread(void(*)()) &rArr; Vector&lang;void(*)()&rang;::push_back(void(*const &)()) &rArr; Vector&lang;void(*)()&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::push_back(void(*const &)())
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::add_thread(void(*)())
</UL>

<P><STRONG><a name="[552]"></a>Proc::delete_thread(void(*)())</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, process.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::erase(void(**)())
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::find(void(*const &)())
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::delete_thread(void(*)())
</UL>

<P><STRONG><a name="[53d]"></a>Proc::do_once()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Proc::do_once()
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::begin() const
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::end() const
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::process_process()
</UL>

<P><STRONG><a name="[557]"></a>ADS7843::interrupt_init()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADS7843::interrupt_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_EXTI_set_entry(unsigned char, GPIO_PORT)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN(unsigned char)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPxEN(unsigned char, unsigned char)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_FTRx(unsigned char, unsigned char)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_RTRx(unsigned char, unsigned char)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_IMRx(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::init()
</UL>

<P><STRONG><a name="[558]"></a>ADS7843::port_init()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADS7843::port_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPxEN(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::init()
</UL>

<P><STRONG><a name="[543]"></a>ADS7843::init()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADS7843::init() &rArr; ADS7843::port_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::port_init()
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::interrupt_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::system_init()
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::Touchable(Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
</UL>

<P><STRONG><a name="[559]"></a>ADS7843::conversion(Screen::Point*)</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADS7843::conversion(Screen::Point*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::oritation()
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::get_exact_coordinate(Screen::Point*)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::get_coordinate(Screen::Point*)
</UL>

<P><STRONG><a name="[561]"></a>ADS7843::point_filter(unsigned short*, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADS7843::point_filter(unsigned short*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::get_coordinate(Screen::Point*)
</UL>

<P><STRONG><a name="[55d]"></a>ADS7843::receive_data()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADS7843::receive_data() &rArr; GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_receive_pin(GPIO_PORT, unsigned char)
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::get_exact_coordinate(Screen::Point*)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::get_coordinate(Screen::Point*)
</UL>

<P><STRONG><a name="[55f]"></a>ADS7843::send_command(unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADS7843::send_command(unsigned char) &rArr; GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::get_exact_coordinate(Screen::Point*)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::get_coordinate(Screen::Point*)
</UL>

<P><STRONG><a name="[560]"></a>ADS7843::get_coordinate(Screen::Point*)</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADS7843::get_coordinate(Screen::Point*) &rArr; ADS7843::conversion(Screen::Point*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_receive_pin(GPIO_PORT, unsigned char)
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::send_command(unsigned char)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::receive_data()
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::point_filter(unsigned short*, unsigned char)
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::conversion(Screen::Point*)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::update_state()
</UL>

<P><STRONG><a name="[161]"></a>ADS7843::update_state()</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ADS7843::update_state() &rArr; ADS7843::get_coordinate(Screen::Point*) &rArr; ADS7843::conversion(Screen::Point*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_receive_pin(GPIO_PORT, unsigned char)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::get_coordinate(Screen::Point*)
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::touch_process()
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[562]"></a>ADS7843::sleep()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_disable_interrupt(unsigned char)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_IMRx(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::clear_screen_65K(unsigned)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::clear_screen_262K(unsigned)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_262K(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_262K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[56d]"></a>ADS7843::awake()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ads7843.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::clear_screen_65K(unsigned)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::clear_screen_262K(unsigned)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_262K(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_262K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_full_window()
</UL>

<P><STRONG><a name="[563]"></a>ADS7843::get_exact_coordinate(Screen::Point*)</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ads7843.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_receive_pin(GPIO_PORT, unsigned char)
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::send_command(unsigned char)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::receive_data()
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::conversion(Screen::Point*)
</UL>

<P><STRONG><a name="[564]"></a>ADS7843::interrupt_process()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ads7843.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::printl(short, short, const char*, ...)
</UL>

<P><STRONG><a name="[565]"></a>SSD1289::internal_init(SSD1289::InitialStruct)</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, ssd1289.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSD1289::internal_init(SSD1289::InitialStruct)
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::send_data(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::init(SSD1289::InitialStruct)
</UL>

<P><STRONG><a name="[567]"></a>SSD1289::FSMC_init()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ssd1289.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SSD1289::FSMC_init() &rArr; FSMC_NORPSRAM4_set_ADDSET(unsigned char) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_ADDSET(unsigned char)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_DATAST(unsigned short)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_BUSTURN(unsigned char)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_ACCMOD(unsigned char)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_MBKEN(unsigned char)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_MUXEN(unsigned char)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_MTYP(unsigned char)
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_MWID(unsigned char)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_BURSTEN(unsigned char)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WAITPOL(unsigned char)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WRAPMOD(unsigned char)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WAITCFG(unsigned char)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WREN(unsigned char)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WAITEN(unsigned char)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_EXTMOD(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::init(SSD1289::InitialStruct)
</UL>

<P><STRONG><a name="[568]"></a>SSD1289::pins_init()</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, ssd1289.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN(unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN(unsigned char)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN(unsigned char)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPDEN(unsigned char)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPEEN(unsigned char)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPFEN(unsigned char)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPGEN(unsigned char)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_FSMCEN(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::init(SSD1289::InitialStruct)
</UL>

<P><STRONG><a name="[569]"></a>SSD1289::init(SSD1289::InitialStruct)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ssd1289.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::pins_init()
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::FSMC_init()
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::internal_init(SSD1289::InitialStruct)
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Screen()
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Screen(unsigned, SSD1289::Oritation, Color::ColorQuality, unsigned char)
</UL>

<P><STRONG><a name="[56a]"></a>SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ssd1289.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::send_data(unsigned short, unsigned short)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_GDDRAM_position(unsigned short, unsigned short)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::sleep()
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font_right_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_rectangle(short, short, short, short, unsigned)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_65K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, const unsigned char*)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_65K(short, short, short, short, const unsigned char*)
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_65K(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_65K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_262K(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_262K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_full_window()
</UL>

<P><STRONG><a name="[56c]"></a>SSD1289::set_full_window()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ssd1289.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_GDDRAM_position(unsigned short, unsigned short)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::awake()
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font_right_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_rectangle(short, short, short, short, unsigned)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_65K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, const unsigned char*)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_65K(short, short, short, short, const unsigned char*)
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_65K(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_65K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_262K(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_262K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&)
</UL>

<P><STRONG><a name="[56e]"></a>SSD1289::get_point_262K(unsigned short, unsigned short)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, ssd1289.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::width()
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::high()
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_GDDRAM_position(unsigned short, unsigned short)
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::RGB262K(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::get_point(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[571]"></a>SSD1289::get_point_65K(unsigned short, unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ssd1289.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::width()
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::high()
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_GDDRAM_position(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::get_point(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[572]"></a>SSD1289::get_points_262K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&)</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, ssd1289.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SSD1289::get_points_262K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::push_back(Color::tag&) &rArr; Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::push_back(const Datas&lang;Color::tag&rang;::DataNode&) &rArr; Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::push_back(Color::tag&)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_full_window()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::awake()
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::sleep()
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::get_points(short, short, short, short, Datas&lang;Color::tag&rang;&)
</UL>

<P><STRONG><a name="[574]"></a>SSD1289::get_points_262K(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*)</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, ssd1289.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_full_window()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::awake()
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::sleep()
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::get_points(short, short, short, short, unsigned char*)
</UL>

<P><STRONG><a name="[575]"></a>SSD1289::get_points_65K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&)</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ssd1289.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SSD1289::get_points_65K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::push_back(Color::tag&) &rArr; Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::push_back(const Datas&lang;Color::tag&rang;::DataNode&) &rArr; Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::push_back(Color::tag&)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_full_window()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::get_points(short, short, short, short, Datas&lang;Color::tag&rang;&)
</UL>

<P><STRONG><a name="[576]"></a>SSD1289::get_points_65K(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*)</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ssd1289.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_full_window()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::get_points(short, short, short, short, unsigned char*)
</UL>

<P><STRONG><a name="[577]"></a>SSD1289::clear_screen_262K(unsigned)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ssd1289.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SSD1289::clear_screen_262K(unsigned) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::send_data(unsigned short, unsigned short)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_GDDRAM_position(unsigned short, unsigned short)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::awake()
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::sleep()
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::clear_screen(unsigned)
</UL>

<P><STRONG><a name="[578]"></a>SSD1289::clear_screen_65K(unsigned)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ssd1289.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SSD1289::clear_screen_65K(unsigned) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::send_data(unsigned short, unsigned short)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_GDDRAM_position(unsigned short, unsigned short)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::awake()
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::sleep()
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::clear_screen(unsigned)
</UL>

<P><STRONG><a name="[538]"></a>Touch::touch_state()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::touch_process()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::execute(Touchable*, Touchable*)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::execute(Touchable*, Touchable*)
</UL>

<P><STRONG><a name="[57a]"></a>Screen::color_quality()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::get_points(short, short, short, short, unsigned char*)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::get_points(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::get_point(unsigned short, unsigned short)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_point(unsigned)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap(short, short, short, short, const unsigned char*)
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::clear_screen(unsigned)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::value2RGB(unsigned)
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::ColorRGB(int, int, int)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::RGB(int, int, int)
</UL>

<P><STRONG><a name="[579]"></a>Screen::clear_screen(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Screen::clear_screen(unsigned) &rArr; SSD1289::clear_screen_65K(unsigned) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::color_quality()
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::clear_screen_65K(unsigned)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::clear_screen_262K(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(const char*, ...)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Screen()
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Screen(unsigned, SSD1289::Oritation, Color::ColorQuality, unsigned char)
</UL>

<P><STRONG><a name="[57b]"></a>Screen::Screen()</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::clear_screen(unsigned)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::init(SSD1289::InitialStruct)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Widget::Widget__sub_object(unsigned short, unsigned short)
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::Pad(unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[72d]"></a>Screen::Screen__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, screen.o(.text), UNUSED)

<P><STRONG><a name="[542]"></a>Screen::Screen(unsigned, SSD1289::Oritation, Color::ColorQuality, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Screen::Screen(unsigned, SSD1289::Oritation, Color::ColorQuality, unsigned char) &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::clear_screen(unsigned)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::init(SSD1289::InitialStruct)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::system_init()
</UL>

<P><STRONG><a name="[72e]"></a>Screen::Screen__sub_object(unsigned, SSD1289::Oritation, Color::ColorQuality, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, screen.o(.text), UNUSED)

<P><STRONG><a name="[55c]"></a>Screen::oritation()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::conversion(Screen::Point*)
</UL>

<P><STRONG><a name="[72f]"></a>Screen::back_light()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen.o(.text), UNUSED)

<P><STRONG><a name="[5a1]"></a>Screen::background_color()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(const char*, ...)
</UL>

<P><STRONG><a name="[57c]"></a>Screen::set_vwindow(Screen::RectType)</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Screen::set_vwindow(Screen::RectType) &rArr; Graphic::mix_rectangle(Screen::RectType, Screen::RectType, Screen::RectType&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::mix_rectangle(Screen::RectType, Screen::RectType, Screen::RectType&)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Widget::set_father_window(unsigned char, int, int)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::iprintf(Screen::Point, char*, ...)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_bitmap(Screen::Point, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_bitmap(Screen::Point, short, short, const unsigned char*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_point(Screen::Point, unsigned)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_oval(unsigned short, unsigned short, Screen::Point, unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_empty_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_line(Screen::Point, Screen::Point, unsigned, unsigned char)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::update(void*)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::update(void*)
</UL>

<P><STRONG><a name="[730]"></a>Screen::reset_vwindow(Screen::RectType)</STRONG> (Thumb, 32 bytes, Stack size 36 bytes, screen.o(.text), UNUSED)

<P><STRONG><a name="[57e]"></a>Screen::set_full_vwindow()</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::RectType::RectType(Screen::Point, int, int)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::width()
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::high()
</UL>

<P><STRONG><a name="[5bf]"></a>Screen::restore_vwindow(Screen::RectType)</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Screen::restore_vwindow(Screen::RectType)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Widget::release_father_window(Screen::RectType)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::iprintf(Screen::Point, char*, ...)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_bitmap(Screen::Point, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_bitmap(Screen::Point, short, short, const unsigned char*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_point(Screen::Point, unsigned)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_oval(unsigned short, unsigned short, Screen::Point, unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_empty_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_line(Screen::Point, Screen::Point, unsigned, unsigned char)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::update(void*)
</UL>

<P><STRONG><a name="[580]"></a>Screen::draw_bitmap_65K(short, short, short, short, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Screen::draw_bitmap_65K(short, short, short, short, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_point_65K(unsigned)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_full_window()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap(short, short, short, short, const unsigned char*)
</UL>

<P><STRONG><a name="[582]"></a>Screen::draw_bitmap_262K(short, short, short, short, const unsigned char*)</STRONG> (Thumb, 218 bytes, Stack size 88 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Screen::draw_bitmap_262K(short, short, short, short, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::mix_rectangle(Screen::RectType, Screen::RectType, Screen::RectType&)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_point_262K(unsigned)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::is_in_rectangle(Screen::Point, Screen::RectType)
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::RectType::RectType()
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::RectType::RectType(Screen::Point, int, int)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_full_window()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::RGB262K(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap(short, short, short, short, const unsigned char*)
</UL>

<P><STRONG><a name="[586]"></a>Screen::draw_bitmap(short, short, short, short, const unsigned char*)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Screen::draw_bitmap(short, short, short, short, const unsigned char*) &rArr; Screen::draw_bitmap_262K(short, short, short, short, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, const unsigned char*)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_65K(short, short, short, short, const unsigned char*)
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::color_quality()
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_bitmap(Screen::Point, short, short, const unsigned char*)
</UL>

<P><STRONG><a name="[587]"></a>Screen::draw_bitmap_65K(short, short, short, short, Datas&lang;Color::tag&rang;&)</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Screen::draw_bitmap_65K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::RGB65K(int, int, int)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::next()
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::set_current_position(unsigned)
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_point_65K(unsigned)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_full_window()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&)
</UL>

<P><STRONG><a name="[58b]"></a>Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&)</STRONG> (Thumb, 246 bytes, Stack size 80 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::mix_rectangle(Screen::RectType, Screen::RectType, Screen::RectType&)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::next()
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::set_current_position(unsigned)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_point_262K(unsigned)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::is_in_rectangle(Screen::Point, Screen::RectType)
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::RectType::RectType()
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::RectType::RectType(Screen::Point, int, int)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_full_window()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::RGB262K(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&)
</UL>

<P><STRONG><a name="[58c]"></a>Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_65K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::color_quality()
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_bitmap(Screen::Point, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::recover_frame()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::recover(unsigned char)
</UL>

<P><STRONG><a name="[58d]"></a>Screen::set_point(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Screen::set_point(unsigned) &rArr; SSD1289::set_point_262K(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_point_262K(unsigned)
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_point_65K(unsigned)
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::color_quality()
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font_right_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_rectangle(short, short, short, short, unsigned)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_point(Screen::Point, unsigned)
</UL>

<P><STRONG><a name="[58e]"></a>Screen::draw_point(Screen::Point, unsigned)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Screen::draw_point(Screen::Point, unsigned) &rArr; Graphic::is_in_rectangle(Screen::Point, Screen::RectType)
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::is_in_rectangle(Screen::Point, Screen::RectType)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_point(unsigned)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::send_data(unsigned short, unsigned short)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::width()
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::high()
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_line(short, short, short, short, unsigned)
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_oval(unsigned short, unsigned short, Screen::Point, unsigned)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_point(Screen::Point, unsigned)
</UL>

<P><STRONG><a name="[58f]"></a>Screen::draw_line(short, short, short, short, unsigned)</STRONG> (Thumb, 226 bytes, Stack size 80 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Screen::draw_line(short, short, short, short, unsigned) &rArr; Screen::draw_point(Screen::Point, unsigned) &rArr; Graphic::is_in_rectangle(Screen::Point, Screen::RectType)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_point(Screen::Point, unsigned)
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_circle(Screen::Point, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[593]"></a>Screen::draw_rectangle(short, short, short, short, unsigned)</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Screen::draw_rectangle(short, short, short, short, unsigned) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::mix_rectangle(Screen::RectType, Screen::RectType, Screen::RectType&)
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::RectType::RectType()
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::RectType::RectType(Screen::Point, int, int)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_point(unsigned)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_full_window()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[594]"></a>Screen::draw_font_right_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Screen::draw_font_right_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_point(unsigned)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_full_window()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::_print(short, short, char, Font::FontType)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[595]"></a>Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)</STRONG> (Thumb, 286 bytes, Stack size 88 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::mix_rectangle(Screen::RectType, Screen::RectType, Screen::RectType&)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::is_in_rectangle(Screen::Point, Screen::RectType)
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::RectType::RectType()
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::RectType::RectType(Screen::Point, int, int)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_point(unsigned)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_full_window()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::_print(short, short, char, Font::FontType)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[596]"></a>Screen::draw_font(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::lib_info(const Font::FontType&)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font_right_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[598]"></a>Screen::get_point(unsigned short, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::color_quality()
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_point_65K(unsigned short, unsigned short)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_point_262K(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[599]"></a>Screen::get_points(short, short, short, short, Datas&lang;Color::tag&rang;&)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Screen::get_points(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; SSD1289::get_points_65K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::push_back(Color::tag&) &rArr; Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::push_back(const Datas&lang;Color::tag&rang;::DataNode&) &rArr; Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::color_quality()
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_65K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_262K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::record_frame(Screen::Point)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::record(unsigned char)
</UL>

<P><STRONG><a name="[59a]"></a>Screen::get_points(short, short, short, short, unsigned char*)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::color_quality()
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_65K(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_262K(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[59b]"></a>Out::_print(short, short, char, Font::FontType)</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Out::_print(short, short, char, Font::FontType) &rArr; Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::font_info(char, const Font::FontType&)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font_right_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::_print(short, short, char*, Font::FontType)
</UL>

<P><STRONG><a name="[59d]"></a>Out::_print(short, short, char*, Font::FontType)</STRONG> (Thumb, 380 bytes, Stack size 96 bytes, out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Out::_print(short, short, char*, Font::FontType) &rArr; Out::_print(short, short, char, Font::FontType) &rArr; Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::font_info(char, const Font::FontType&)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::char_high(char, Font::FontType)
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator ==(const Screen::Point&)
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::_print(short, short, char, Font::FontType)
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::lib_info(const Font::FontType&)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::width()
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::printl(short, short, const char*, ...)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(short, short, const char*, ...)
</UL>

<P><STRONG><a name="[15c]"></a>Out::printl(short, short, const char*, ...)</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = Out::printl(short, short, const char*, ...) &rArr; Out::_print(short, short, char*, Font::FontType) &rArr; Out::_print(short, short, char, Font::FontType) &rArr; Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::_print(short, short, char*, Font::FontType)
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::lib_info(const Font::FontType&)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::width()
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::high()
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(const char*, ...)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::interrupt_process()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::release_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>

<P><STRONG><a name="[15d]"></a>Out::print(const char*, ...)</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Out::print(const char*, ...) &rArr; Out::printl(short, short, const char*, ...) &rArr; Out::_print(short, short, char*, Font::FontType) &rArr; Out::_print(short, short, char, Font::FontType) &rArr; Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::printl(short, short, const char*, ...)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::string_width(const char*, Font::FontType)
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::lib_info(const Font::FontType&)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::background_color()
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::clear_screen(unsigned)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::width()
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::high()
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5a3]"></a>Out::print(short, short, const char*, ...)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = Out::print(short, short, const char*, ...) &rArr; Out::_print(short, short, char*, Font::FontType) &rArr; Out::_print(short, short, char, Font::FontType) &rArr; Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::_print(short, short, char*, Font::FontType)
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::iprintf(Screen::Point, char*, ...)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::update(void*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::update(void*)
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::draw_myself()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::update(void*)
</UL>

<P><STRONG><a name="[5a4]"></a>String::String()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, string.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::Vector()
</UL>

<P><STRONG><a name="[731]"></a>String::String__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, string.o(.text), UNUSED)

<P><STRONG><a name="[5a6]"></a>String::end() const</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = String::end() const
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::end() const
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(String&)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator +(String&)
</UL>

<P><STRONG><a name="[5a8]"></a>String::begin() const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = String::begin() const
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::begin() const
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(String&)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator +(String&)
</UL>

<P><STRONG><a name="[153]"></a>String::String(const String&)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = String::String(const String&) &rArr; Vector&lang;char&rang;::push_back(const char&) &rArr; Vector&lang;char&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::Vector()
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::push_back(const char&)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::begin() const
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::end() const
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::TextBox(String, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::set_text(String)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator +(String&)
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::set_text(String&)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::set_content(String)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::get_content()
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::Text(String, unsigned short, unsigned short, Screen::Point)
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::go()
</UL>

<P><STRONG><a name="[732]"></a>String::String__sub_object(const String&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, string.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>String::String(const char*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = String::String(const char*) &rArr; Vector&lang;char&rang;::push_back(const char&) &rArr; Vector&lang;char&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::Vector()
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::push_back(const char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::format(const char*, ...)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_event()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_event()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_event()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_event()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_process_test(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator ==(const char*)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::UI_init()
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::Switch_release_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::OnOff_release_handler(Screen::Point, Touchable*, Touchable*)
</UL>

<P><STRONG><a name="[733]"></a>String::String__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, string.o(.text), UNUSED)

<P><STRONG><a name="[5ab]"></a>String::String(const char*, const char*)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, string.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::Vector()
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::push_back(const char&)
</UL>

<P><STRONG><a name="[734]"></a>String::String__sub_object(const char*, const char*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, string.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>String::format(const char*, ...)</STRONG> (Thumb, 44 bytes, Stack size 160 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = String::format(const char*, ...) &rArr; String::String(const char*) &rArr; Vector&lang;char&rang;::push_back(const char&) &rArr; Vector&lang;char&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_window_test(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::go()
</UL>

<P><STRONG><a name="[735]"></a>String::operator [](unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, string.o(.text), UNUSED)

<P><STRONG><a name="[5ac]"></a>String::operator +(String&)</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, string.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::end() const
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::push_back(const char&)
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::erase(char*)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::begin() const
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::end() const
</UL>

<P><STRONG><a name="[5ae]"></a>String::operator ==(String&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, string.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::operator ==(const Vector&lang;char&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator ==(const char*)
</UL>

<P><STRONG><a name="[5b0]"></a>String::operator ==(const char*)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, string.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::~Vector()
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::clear()
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator ==(String&)
</UL>

<P><STRONG><a name="[5b3]"></a>String::operator =(String&)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = String::operator =(String&) &rArr; Vector&lang;char&rang;::push_back(const char&) &rArr; Vector&lang;char&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::clear()
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::push_back(const char&)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::begin() const
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::end() const
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::set_text(String)
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::set_text(String&)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::set_content(String)
</UL>

<P><STRONG><a name="[5b4]"></a>String::c_str()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = String::c_str()
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::begin() const
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::TextBox(String, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::update(void*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::update(void*)
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::draw_myself()
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::Switch_release_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::update(void*)
</UL>

<P><STRONG><a name="[736]"></a>String::size() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, string.o(.text), UNUSED)

<P><STRONG><a name="[5b8]"></a>Font::ascii_8x16_char_info(char)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, font.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::font_info(char, const Font::FontType&)
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::char_info(char)
</UL>

<P><STRONG><a name="[5b9]"></a>Font::ascii_10x19_char_info(char)</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, font.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::font_info(char, const Font::FontType&)
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::char_info(char)
</UL>

<P><STRONG><a name="[5b6]"></a>Font::font_width(const unsigned char*, unsigned, unsigned)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Font::font_width(const unsigned char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::ascii_YAHEI_char_info(char)
</UL>

<P><STRONG><a name="[5b5]"></a>Font::ascii_YAHEI_char_info(char)</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Font::ascii_YAHEI_char_info(char) &rArr; Font::font_width(const unsigned char*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::font_width(const unsigned char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::font_info(char, const Font::FontType&)
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::char_info(char)
</UL>

<P><STRONG><a name="[5b7]"></a>Font::char_info(char)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::ascii_YAHEI_char_info(char)
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::ascii_10x19_char_info(char)
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::ascii_8x16_char_info(char)
</UL>

<P><STRONG><a name="[59c]"></a>Font::font_info(char, const Font::FontType&)</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Font::font_info(char, const Font::FontType&) &rArr; Font::ascii_YAHEI_char_info(char) &rArr; Font::font_width(const unsigned char*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::ascii_YAHEI_char_info(char)
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::ascii_10x19_char_info(char)
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::ascii_8x16_char_info(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::char_high(char, Font::FontType)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::string_width(const char*, Font::FontType)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::_print(short, short, char*, Font::FontType)
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::_print(short, short, char, Font::FontType)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::char_width(char, Font::FontType)
</UL>

<P><STRONG><a name="[597]"></a>Font::lib_info(const Font::FontType&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, font.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::printl(short, short, const char*, ...)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(const char*, ...)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::_print(short, short, char*, Font::FontType)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[5a2]"></a>Font::string_width(const char*, Font::FontType)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Font::string_width(const char*, Font::FontType) &rArr; Font::font_info(char, const Font::FontType&) &rArr; Font::ascii_YAHEI_char_info(char) &rArr; Font::font_width(const unsigned char*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::font_info(char, const Font::FontType&)
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(const char*, ...)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::TextBox(String, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::update(void*)
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::draw_myself()
</UL>

<P><STRONG><a name="[5ba]"></a>Font::char_width(char, Font::FontType)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Font::char_width(char, Font::FontType) &rArr; Font::font_info(char, const Font::FontType&) &rArr; Font::ascii_YAHEI_char_info(char) &rArr; Font::font_width(const unsigned char*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::font_info(char, const Font::FontType&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_window(Screen::RectType)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::font_width()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::update(void*)
</UL>

<P><STRONG><a name="[5a0]"></a>Font::char_high(char, Font::FontType)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Font::char_high(char, Font::FontType) &rArr; Font::font_info(char, const Font::FontType&) &rArr; Font::ascii_YAHEI_char_info(char) &rArr; Font::font_width(const unsigned char*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::font_info(char, const Font::FontType&)
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::_print(short, short, char*, Font::FontType)
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_window(Screen::RectType)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::font_high()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::update(void*)
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::draw_myself()
</UL>

<P><STRONG><a name="[737]"></a>Font::set_line_spacing(int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, font.o(.text), UNUSED)

<P><STRONG><a name="[738]"></a>Font::set_row_spacing(int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, font.o(.text), UNUSED)

<P><STRONG><a name="[5e3]"></a>Font::set_font_color(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, font.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::set_text(String)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::update(void*)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::draw(Screen::Point)
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::draw_myself()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::update(void*)
</UL>

<P><STRONG><a name="[13d]"></a>Font::set_font_back_color(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, font.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::set_text(String)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_UI(Window*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::update(void*)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::draw(Screen::Point)
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::draw_myself()
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::Switch_release_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::update(void*)
</UL>

<P><STRONG><a name="[739]"></a>Font::set_font_type(Font::FontType)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, font.o(.text), UNUSED)

<P><STRONG><a name="[5bb]"></a>Font::set_window(Screen::RectType)</STRONG> (Thumb, 70 bytes, Stack size 36 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Font::set_window(Screen::RectType) &rArr; Font::char_high(char, Font::FontType) &rArr; Font::font_info(char, const Font::FontType&) &rArr; Font::ascii_YAHEI_char_info(char) &rArr; Font::font_width(const unsigned char*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::char_high(char, Font::FontType)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::char_width(char, Font::FontType)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::update(void*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::update(void*)
</UL>

<P><STRONG><a name="[5bc]"></a>Font::set_full_window()</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Font::set_full_window() &rArr; Screen::RectType::RectType(Screen::Point, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::RectType::RectType(Screen::Point, int, int)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::width()
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::high()
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::update(void*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::update(void*)
</UL>

<P><STRONG><a name="[cb]"></a>Paintable::idraw_line(Screen::Point, Screen::Point, unsigned, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, paintable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Paintable::idraw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::restore_vwindow(Screen::RectType)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_vwindow(Screen::RectType)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator +(const Screen::Point&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> paintable.o(.constdata__ZTV9Paintable)
<LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[cc]"></a>Paintable::idraw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short)</STRONG> (Thumb, 70 bytes, Stack size 72 bytes, paintable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = Paintable::idraw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short) &rArr; Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short) &rArr; Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::restore_vwindow(Screen::RectType)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_vwindow(Screen::RectType)
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator +(const Screen::Point&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> paintable.o(.constdata__ZTV9Paintable)
<LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[cd]"></a>Paintable::idraw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short)</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, paintable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = Paintable::idraw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::restore_vwindow(Screen::RectType)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_vwindow(Screen::RectType)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::end() const
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::~Vector()
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::Vector()
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::push_back(const Screen::Point&)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator +(const Screen::Point&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> paintable.o(.constdata__ZTV9Paintable)
<LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[ce]"></a>Paintable::idraw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, paintable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = Paintable::idraw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::restore_vwindow(Screen::RectType)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_vwindow(Screen::RectType)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator +(const Screen::Point&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> paintable.o(.constdata__ZTV9Paintable)
<LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[cf]"></a>Paintable::idraw_circle(Screen::Point, unsigned short, unsigned)</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, paintable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Paintable::idraw_circle(Screen::Point, unsigned short, unsigned) &rArr; Graphic::draw_circle(Screen::Point, unsigned short, unsigned) &rArr; Screen::draw_line(short, short, short, short, unsigned) &rArr; Screen::draw_point(Screen::Point, unsigned) &rArr; Graphic::is_in_rectangle(Screen::Point, Screen::RectType)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::restore_vwindow(Screen::RectType)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_vwindow(Screen::RectType)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator +(const Screen::Point&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> paintable.o(.constdata__ZTV9Paintable)
<LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[d0]"></a>Paintable::idraw_empty_circle(Screen::Point, unsigned short, unsigned)</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, paintable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Paintable::idraw_empty_circle(Screen::Point, unsigned short, unsigned) &rArr; Graphic::draw_empty_circle(Screen::Point, unsigned short, unsigned) &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::restore_vwindow(Screen::RectType)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_vwindow(Screen::RectType)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator +(const Screen::Point&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> paintable.o(.constdata__ZTV9Paintable)
<LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[d1]"></a>Paintable::idraw_oval(unsigned short, unsigned short, Screen::Point, unsigned)</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, paintable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Paintable::idraw_oval(unsigned short, unsigned short, Screen::Point, unsigned) &rArr; Graphic::draw_oval(unsigned short, unsigned short, Screen::Point, unsigned) &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::restore_vwindow(Screen::RectType)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_vwindow(Screen::RectType)
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_oval(unsigned short, unsigned short, Screen::Point, unsigned)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator +(const Screen::Point&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> paintable.o(.constdata__ZTV9Paintable)
<LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[d2]"></a>Paintable::idraw_point(Screen::Point, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, paintable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Paintable::idraw_point(Screen::Point, unsigned) &rArr; Screen::set_vwindow(Screen::RectType) &rArr; Graphic::mix_rectangle(Screen::RectType, Screen::RectType, Screen::RectType&)
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_point(Screen::Point, unsigned)
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::restore_vwindow(Screen::RectType)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_vwindow(Screen::RectType)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator +(const Screen::Point&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> paintable.o(.constdata__ZTV9Paintable)
<LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[d3]"></a>Paintable::idraw_bitmap(Screen::Point, short, short, const unsigned char*)</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, paintable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Paintable::idraw_bitmap(Screen::Point, short, short, const unsigned char*) &rArr; Graphic::draw_bitmap(Screen::Point, short, short, const unsigned char*) &rArr; Screen::draw_bitmap(short, short, short, short, const unsigned char*) &rArr; Screen::draw_bitmap_262K(short, short, short, short, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::restore_vwindow(Screen::RectType)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_vwindow(Screen::RectType)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_bitmap(Screen::Point, short, short, const unsigned char*)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator +(const Screen::Point&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> paintable.o(.constdata__ZTV9Paintable)
<LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[d4]"></a>Paintable::idraw_bitmap(Screen::Point, short, short, Datas&lang;Color::tag&rang;&)</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, paintable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Paintable::idraw_bitmap(Screen::Point, short, short, Datas&lang;Color::tag&rang;&) &rArr; Graphic::draw_bitmap(Screen::Point, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::restore_vwindow(Screen::RectType)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_vwindow(Screen::RectType)
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_bitmap(Screen::Point, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator +(const Screen::Point&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> paintable.o(.constdata__ZTV9Paintable)
<LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[d5]"></a>Paintable::iprintf(Screen::Point, char*, ...)</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, paintable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = Paintable::iprintf(Screen::Point, char*, ...) &rArr; Out::print(short, short, const char*, ...) &rArr; Out::_print(short, short, char*, Font::FontType) &rArr; Out::_print(short, short, char, Font::FontType) &rArr; Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(short, short, const char*, ...)
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::restore_vwindow(Screen::RectType)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_vwindow(Screen::RectType)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator +(const Screen::Point&)
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> paintable.o(.constdata__ZTV9Paintable)
<LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[79]"></a>Touchable::execute(Touchable*, Touchable*)</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, touchable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Touchable::execute(Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch::touch_state()
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::execute(Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 6]<UL><LI> touchable.o(.constdata__ZTV9Touchable)
<LI> touchwidget.o(.constdata__ZTV11TouchWidget)
<LI> textbox.o(.constdata__ZTV7TextBox)
<LI> button.o(.constdata__ZTV6Button)
<LI> controlpad.o(.constdata__ZTV10ControlPad)
<LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[7a]"></a>Touchable::set_touch_vector(Vector&lang;Touchable*&rang;*)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, touchable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Touchable::set_touch_vector(Vector&lang;Touchable*&rang;*) &rArr; Vector&lang;Touchable*&rang;::erase(Touchable**) &rArr; Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::push_back(Touchable*const &)
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::erase(Touchable**)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::find(Touchable*const &)
</UL>
<BR>[Address Reference Count : 8]<UL><LI> touchable.o(.constdata__ZTV9Touchable)
<LI> touchwidget.o(.constdata__ZTV11TouchWidget)
<LI> textbox.o(.constdata__ZTV7TextBox)
<LI> button.o(.constdata__ZTV6Button)
<LI> controlpad.o(.constdata__ZTV10ControlPad)
<LI> slider.o(.constdata__ZTV6Slider)
<LI> touchpad.o(.constdata__ZTV8TouchPad)
<LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[f4]"></a>Touchable::meet_condition(Screen::Point)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchable.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> touchable.o(.constdata__ZTV9Touchable)
</UL>
<P><STRONG><a name="[5cf]"></a>Touchable::Touchable(Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, touchable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Touchable::Touchable(Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Vector&lang;Touchable*&rang;::push_back(Touchable*const &) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::init()
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::end() const
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::push_back(Touchable*const &)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::find(Touchable*const &)
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::TouchPad(unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
</UL>

<P><STRONG><a name="[73a]"></a>Touchable::Touchable__sub_object(Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, touchable.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>Touchable::~Touchable()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, touchable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Touchable::~Touchable() &rArr; Vector&lang;Touchable*&rang;::erase(Touchable**) &rArr; Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::end() const
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::erase(Touchable**)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::find(Touchable*const &)
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchWidget::~TouchWidget__sub_object()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::~Touchable__deallocating()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::~Slider()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::~TextBox()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::~ControlPad()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::~Button()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::~TouchPad()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchable.o(.constdata__ZTV9Touchable)
</UL>
<P><STRONG><a name="[73b]"></a>Touchable::~Touchable__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, touchable.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>Touchable::~Touchable__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, touchable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Touchable::~Touchable__deallocating() &rArr; Touchable::~Touchable() &rArr; Vector&lang;Touchable*&rang;::erase(Touchable**) &rArr; Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::~Touchable()
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchable.o(.constdata__ZTV9Touchable)
</UL>
<P><STRONG><a name="[73c]"></a>Touchable::long_hold_time()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchable.o(.text), UNUSED)

<P><STRONG><a name="[73d]"></a>Touchable::long_hold_time(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, touchable.o(.text), UNUSED)

<P><STRONG><a name="[73e]"></a>Touchable::set_touch_handler(void(*)(Screen::Point, Touchable*, Touchable*))</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, touchable.o(.text), UNUSED)

<P><STRONG><a name="[73f]"></a>Touchable::set_hold_handler(void(*)(Screen::Point, Touchable*, Touchable*))</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, touchable.o(.text), UNUSED)

<P><STRONG><a name="[740]"></a>Touchable::set_long_hold_handler(void(*)(Screen::Point, Touchable*, Touchable*))</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, touchable.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>Touchable::set_release_handler(void(*)(Screen::Point, Touchable*, Touchable*))</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, touchable.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[83]"></a>Touchable::touch_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, touchable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Touchable::touch_handler(Screen::Point, Touchable*, Touchable*) &rArr; Out::printl(short, short, const char*, ...) &rArr; Out::_print(short, short, char*, Font::FontType) &rArr; Out::_print(short, short, char, Font::FontType) &rArr; Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::printl(short, short, const char*, ...)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchable.o(.constdata__ZTV9Touchable)
<LI> touchwidget.o(.constdata__ZTV11TouchWidget)
</UL>
<P><STRONG><a name="[84]"></a>Touchable::hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchable.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> touchable.o(.constdata__ZTV9Touchable)
<LI> touchwidget.o(.constdata__ZTV11TouchWidget)
</UL>
<P><STRONG><a name="[85]"></a>Touchable::long_hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchable.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> touchable.o(.constdata__ZTV9Touchable)
<LI> touchwidget.o(.constdata__ZTV11TouchWidget)
</UL>
<P><STRONG><a name="[86]"></a>Touchable::release_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, touchable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Touchable::release_handler(Screen::Point, Touchable*, Touchable*) &rArr; Out::printl(short, short, const char*, ...) &rArr; Out::_print(short, short, char*, Font::FontType) &rArr; Out::_print(short, short, char, Font::FontType) &rArr; Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::printl(short, short, const char*, ...)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchable.o(.constdata__ZTV9Touchable)
<LI> touchwidget.o(.constdata__ZTV11TouchWidget)
</UL>
<P><STRONG><a name="[5be]"></a>Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char)</STRONG> (Thumb, 532 bytes, Stack size 104 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_line(short, short, short, short, unsigned)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_line(Screen::Point, Screen::Point, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[5c4]"></a>Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short)</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[5c6]"></a>Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::end() const
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::~Vector()
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::Vector()
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::push_back(const Screen::Point&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::update(void*)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::draw_frame(Screen::Point)
</UL>

<P><STRONG><a name="[5c0]"></a>Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short) &rArr; Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_rectangle(short, short, short, short, unsigned)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::update(void*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::update(void*)
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::draw_myself()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::update(void*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::draw(Screen::Point)
</UL>

<P><STRONG><a name="[5c7]"></a>Graphic::draw_circle(Screen::Point, unsigned short, unsigned)</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Graphic::draw_circle(Screen::Point, unsigned short, unsigned) &rArr; Screen::draw_line(short, short, short, short, unsigned) &rArr; Screen::draw_point(Screen::Point, unsigned) &rArr; Graphic::is_in_rectangle(Screen::Point, Screen::RectType)
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_line(short, short, short, short, unsigned)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::release_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::hold_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::update(void*)
</UL>

<P><STRONG><a name="[5c8]"></a>Graphic::draw_empty_circle(Screen::Point, unsigned short, unsigned)</STRONG> (Thumb, 446 bytes, Stack size 88 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Graphic::draw_empty_circle(Screen::Point, unsigned short, unsigned) &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_point(Screen::Point, unsigned)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_empty_circle(Screen::Point, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[5c9]"></a>Graphic::draw_oval(unsigned short, unsigned short, Screen::Point, unsigned)</STRONG> (Thumb, 400 bytes, Stack size 104 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Graphic::draw_oval(unsigned short, unsigned short, Screen::Point, unsigned) &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_point(Screen::Point, unsigned)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_oval(unsigned short, unsigned short, Screen::Point, unsigned)
</UL>

<P><STRONG><a name="[5ca]"></a>Graphic::draw_bitmap(Screen::Point, short, short, const unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Graphic::draw_bitmap(Screen::Point, short, short, const unsigned char*) &rArr; Screen::draw_bitmap(short, short, short, short, const unsigned char*) &rArr; Screen::draw_bitmap_262K(short, short, short, short, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap(short, short, short, short, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_bitmap(Screen::Point, short, short, const unsigned char*)
</UL>

<P><STRONG><a name="[5cb]"></a>Graphic::draw_bitmap(Screen::Point, short, short, Datas&lang;Color::tag&rang;&)</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = Graphic::draw_bitmap(Screen::Point, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_bitmap(Screen::Point, short, short, Datas&lang;Color::tag&rang;&)
</UL>

<P><STRONG><a name="[5d7]"></a>Graphic::revise_rectangle_position(Screen::Point&, short, short)</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Graphic::revise_rectangle_position(Screen::Point&, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::width()
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::high()
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::move(Screen::Point)
</UL>

<P><STRONG><a name="[57d]"></a>Graphic::mix_rectangle(Screen::RectType, Screen::RectType, Screen::RectType&)</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Graphic::mix_rectangle(Screen::RectType, Screen::RectType, Screen::RectType&)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_rectangle(short, short, short, short, unsigned)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, const unsigned char*)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_vwindow(Screen::RectType)
</UL>

<P><STRONG><a name="[5d8]"></a>Graphic::distance(Screen::Point, Screen::Point)</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Graphic::distance(Screen::Point, Screen::Point) &rArr; std::pow(double, int) &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(double, int)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>

<P><STRONG><a name="[541]"></a>Color::RGB262K(int, int, int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, color.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::system_init()
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, const unsigned char*)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_point_262K(unsigned short, unsigned short)
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::ColorRGB(int, int, int)
</UL>

<P><STRONG><a name="[58a]"></a>Color::RGB65K(int, int, int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, color.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_65K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::ColorRGB(int, int, int)
</UL>

<P><STRONG><a name="[5da]"></a>Color::RGB(int, int, int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, color.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Color::RGB(int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::color_quality()
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_color_cpp
</UL>

<P><STRONG><a name="[5db]"></a>Color::ColorRGB(int, int, int)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, color.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::RGB65K(int, int, int)
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::color_quality()
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::RGB262K(int, int, int)
</UL>

<P><STRONG><a name="[5dd]"></a>Color::value2RGB262K(unsigned)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, color.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::value2RGB(unsigned)
</UL>

<P><STRONG><a name="[5de]"></a>Color::value2RGB65K(unsigned)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, color.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::value2RGB(unsigned)
</UL>

<P><STRONG><a name="[5dc]"></a>Color::value2RGB(unsigned)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, color.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::color_quality()
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::value2RGB65K(unsigned)
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::value2RGB262K(unsigned)
</UL>

<P><STRONG><a name="[152]"></a>Widget::Widget__sub_object(unsigned short, unsigned short)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, widget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::Text(String, unsigned short, unsigned short, Screen::Point)
</UL>

<P><STRONG><a name="[6e]"></a>Widget::set_relataive_position(Screen::Point)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, widget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Widget::set_relataive_position(Screen::Point)
</UL>
<BR>[Address Reference Count : 7]<UL><LI> widget.o(.constdata__ZTV6Widget)
<LI> touchwidget.o(.constdata__ZTV11TouchWidget)
<LI> textbox.o(.constdata__ZTV7TextBox)
<LI> button.o(.constdata__ZTV6Button)
<LI> controlpad.o(.constdata__ZTV10ControlPad)
<LI> text.o(.constdata__ZTV4Text)
<LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[72]"></a>Widget::set_father_window(unsigned char, int, int)</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, widget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Widget::set_father_window(unsigned char, int, int) &rArr; Screen::set_vwindow(Screen::RectType) &rArr; Graphic::mix_rectangle(Screen::RectType, Screen::RectType, Screen::RectType&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_vwindow(Screen::RectType)
</UL>
<BR>[Address Reference Count : 7]<UL><LI> widget.o(.constdata__ZTV6Widget)
<LI> touchwidget.o(.constdata__ZTV11TouchWidget)
<LI> textbox.o(.constdata__ZTV7TextBox)
<LI> button.o(.constdata__ZTV6Button)
<LI> controlpad.o(.constdata__ZTV10ControlPad)
<LI> text.o(.constdata__ZTV4Text)
<LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[73]"></a>Widget::release_father_window(Screen::RectType)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, widget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Widget::release_father_window(Screen::RectType) &rArr; Screen::restore_vwindow(Screen::RectType)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::restore_vwindow(Screen::RectType)
</UL>
<BR>[Address Reference Count : 7]<UL><LI> widget.o(.constdata__ZTV6Widget)
<LI> touchwidget.o(.constdata__ZTV11TouchWidget)
<LI> textbox.o(.constdata__ZTV7TextBox)
<LI> button.o(.constdata__ZTV6Button)
<LI> controlpad.o(.constdata__ZTV10ControlPad)
<LI> text.o(.constdata__ZTV4Text)
<LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[5df]"></a>TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, touchwidget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Widget::Widget__sub_object(unsigned short, unsigned short)
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::Touchable(Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::TextBox(String, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::ControlPad(int, unsigned, unsigned)
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::Slider(int, int, Slider::DIR, int, int, unsigned, unsigned)
</UL>

<P><STRONG><a name="[74]"></a>TouchWidget::meet_condition(Screen::Point)</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, touchwidget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TouchWidget::meet_condition(Screen::Point)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to TouchWidget::meet_condition(Screen::Point)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> touchwidget.o(.constdata__ZTV11TouchWidget)
<LI> button.o(.constdata__ZTV6Button)
<LI> controlpad.o(.constdata__ZTV10ControlPad)
<LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[7b]"></a>thunk{-36} to TouchWidget::meet_condition(Screen::Point)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, touchwidget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = thunk{-36} to TouchWidget::meet_condition(Screen::Point) &rArr; TouchWidget::meet_condition(Screen::Point)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchWidget::meet_condition(Screen::Point)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> touchwidget.o(.constdata__ZTV11TouchWidget)
<LI> button.o(.constdata__ZTV6Button)
<LI> controlpad.o(.constdata__ZTV10ControlPad)
<LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[5e0]"></a>Button::get_content()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
</UL>

<P><STRONG><a name="[5e1]"></a>Button::set_content(String)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(String&)
</UL>

<P><STRONG><a name="[154]"></a>Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*)</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*) &rArr; TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::char_high(char, Font::FontType)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::string_width(const char*, Font::FontType)
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::c_str()
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::UI_init()
</UL>

<P><STRONG><a name="[741]"></a>Button::Button__sub_object(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, button.o(.text), UNUSED)

<P><STRONG><a name="[5e2]"></a>Button::draw_myself()</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = Button::draw_myself() &rArr; Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short) &rArr; Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_font_back_color(unsigned)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::char_high(char, Font::FontType)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::string_width(const char*, Font::FontType)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(short, short, const char*, ...)
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_font_color(unsigned)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::c_str()
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::release_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::touch_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::update(void*)
</UL>

<P><STRONG><a name="[9d]"></a>Button::dedraw()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, button.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTV6Button)
</UL>
<P><STRONG><a name="[9c]"></a>Button::draw(Screen::Point)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Button::draw(Screen::Point)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTV6Button)
</UL>
<P><STRONG><a name="[9f]"></a>Button::get_info()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, button.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTV6Button)
</UL>
<P><STRONG><a name="[9e]"></a>Button::update(void*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = Button::update(void*) &rArr; Button::draw_myself() &rArr; Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short) &rArr; Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::draw_myself()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTV6Button)
</UL>
<P><STRONG><a name="[a0]"></a>Button::touch_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = Button::touch_handler(Screen::Point, Touchable*, Touchable*) &rArr; Button::draw_myself() &rArr; Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short) &rArr; Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::draw_myself()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to Button::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTV6Button)
</UL>
<P><STRONG><a name="[a4]"></a>thunk{-36} to Button::touch_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = thunk{-36} to Button::touch_handler(Screen::Point, Touchable*, Touchable*) &rArr; Button::touch_handler(Screen::Point, Touchable*, Touchable*) &rArr; Button::draw_myself() &rArr; Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short) &rArr; Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTV6Button)
</UL>
<P><STRONG><a name="[a1]"></a>Button::hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, button.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to Button::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTV6Button)
</UL>
<P><STRONG><a name="[a5]"></a>thunk{-36} to Button::hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = thunk{-36} to Button::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTV6Button)
</UL>
<P><STRONG><a name="[a2]"></a>Button::long_hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, button.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to Button::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTV6Button)
</UL>
<P><STRONG><a name="[a6]"></a>thunk{-36} to Button::long_hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = thunk{-36} to Button::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTV6Button)
</UL>
<P><STRONG><a name="[a3]"></a>Button::release_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = Button::release_handler(Screen::Point, Touchable*, Touchable*) &rArr; Button::draw_myself() &rArr; Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short) &rArr; Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::draw_myself()
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to Button::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTV6Button)
</UL>
<P><STRONG><a name="[a7]"></a>thunk{-36} to Button::release_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = thunk{-36} to Button::release_handler(Screen::Point, Touchable*, Touchable*) &rArr; Button::release_handler(Screen::Point, Touchable*, Touchable*) &rArr; Button::draw_myself() &rArr; Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short) &rArr; Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTV6Button)
</UL>
<P><STRONG><a name="[156]"></a>ControlPad::ControlPad(int, unsigned, unsigned)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, controlpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ControlPad::ControlPad(int, unsigned, unsigned) &rArr; TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::centre_of_circle()
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::UI_init()
</UL>

<P><STRONG><a name="[742]"></a>ControlPad::ControlPad__sub_object(int, unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, controlpad.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>ControlPad::draw(Screen::Point)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, controlpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ControlPad::draw(Screen::Point) &rArr; ControlPad::centre_of_circle()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::centre_of_circle()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> controlpad.o(.constdata__ZTV10ControlPad)
</UL>
<P><STRONG><a name="[6c]"></a>ControlPad::update(void*)</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, controlpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ControlPad::update(void*) &rArr; Graphic::draw_circle(Screen::Point, unsigned short, unsigned) &rArr; Screen::draw_line(short, short, short, short, unsigned) &rArr; Screen::draw_point(Screen::Point, unsigned) &rArr; Graphic::is_in_rectangle(Screen::Point, Screen::RectType)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::centre_of_circle()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> controlpad.o(.constdata__ZTV10ControlPad)
</UL>
<P><STRONG><a name="[75]"></a>ControlPad::touch_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, controlpad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to ControlPad::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> controlpad.o(.constdata__ZTV10ControlPad)
</UL>
<P><STRONG><a name="[7c]"></a>thunk{-36} to ControlPad::touch_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, controlpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = thunk{-36} to ControlPad::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> controlpad.o(.constdata__ZTV10ControlPad)
</UL>
<P><STRONG><a name="[76]"></a>ControlPad::hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, controlpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ControlPad::hold_handler(Screen::Point, Touchable*, Touchable*) &rArr; Graphic::distance(Screen::Point, Screen::Point) &rArr; std::pow(double, int) &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::distance(Screen::Point, Screen::Point)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::centre_of_circle()
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to ControlPad::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> controlpad.o(.constdata__ZTV10ControlPad)
</UL>
<P><STRONG><a name="[7d]"></a>thunk{-36} to ControlPad::hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, controlpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = thunk{-36} to ControlPad::hold_handler(Screen::Point, Touchable*, Touchable*) &rArr; ControlPad::hold_handler(Screen::Point, Touchable*, Touchable*) &rArr; Graphic::distance(Screen::Point, Screen::Point) &rArr; std::pow(double, int) &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> controlpad.o(.constdata__ZTV10ControlPad)
</UL>
<P><STRONG><a name="[77]"></a>ControlPad::long_hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, controlpad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to ControlPad::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> controlpad.o(.constdata__ZTV10ControlPad)
</UL>
<P><STRONG><a name="[7e]"></a>thunk{-36} to ControlPad::long_hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, controlpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = thunk{-36} to ControlPad::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> controlpad.o(.constdata__ZTV10ControlPad)
</UL>
<P><STRONG><a name="[78]"></a>ControlPad::release_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, controlpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ControlPad::release_handler(Screen::Point, Touchable*, Touchable*) &rArr; Graphic::draw_circle(Screen::Point, unsigned short, unsigned) &rArr; Screen::draw_line(short, short, short, short, unsigned) &rArr; Screen::draw_point(Screen::Point, unsigned) &rArr; Graphic::is_in_rectangle(Screen::Point, Screen::RectType)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::centre_of_circle()
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to ControlPad::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> controlpad.o(.constdata__ZTV10ControlPad)
</UL>
<P><STRONG><a name="[7f]"></a>thunk{-36} to ControlPad::release_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, controlpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = thunk{-36} to ControlPad::release_handler(Screen::Point, Touchable*, Touchable*) &rArr; ControlPad::release_handler(Screen::Point, Touchable*, Touchable*) &rArr; Graphic::draw_circle(Screen::Point, unsigned short, unsigned) &rArr; Screen::draw_line(short, short, short, short, unsigned) &rArr; Screen::draw_point(Screen::Point, unsigned) &rArr; Graphic::is_in_rectangle(Screen::Point, Screen::RectType)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> controlpad.o(.constdata__ZTV10ControlPad)
</UL>
<P><STRONG><a name="[157]"></a>ControlPad::set_leftEvent(void(*)())</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, controlpad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::UI_init()
</UL>

<P><STRONG><a name="[158]"></a>ControlPad::set_rightEvent(void(*)())</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, controlpad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::UI_init()
</UL>

<P><STRONG><a name="[15a]"></a>ControlPad::set_downEvent(void(*)())</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, controlpad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::UI_init()
</UL>

<P><STRONG><a name="[159]"></a>ControlPad::set_upEvent(void(*)())</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, controlpad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::UI_init()
</UL>

<P><STRONG><a name="[62c]"></a>ControlPad::set_idleEvent(void(*)())</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, controlpad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::UI_init()
</UL>

<P><STRONG><a name="[14c]"></a>Text::set_text(String)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Text::set_text(String) &rArr; String::String(const String&) &rArr; Vector&lang;char&rang;::push_back(const char&) &rArr; Vector&lang;char&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_font_back_color(unsigned)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_font_color(unsigned)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(String&)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_event()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_event()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_event()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_event()
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::go()
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::OnOff_release_handler(Screen::Point, Touchable*, Touchable*)
</UL>

<P><STRONG><a name="[97]"></a>Text::draw(Screen::Point)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Text::draw(Screen::Point)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_font_back_color(unsigned)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_font_color(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> text.o(.constdata__ZTV4Text)
</UL>
<P><STRONG><a name="[98]"></a>Text::update(void*)</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, text.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Text::update(void*) &rArr; Out::print(short, short, const char*, ...) &rArr; Out::_print(short, short, char*, Font::FontType) &rArr; Out::_print(short, short, char, Font::FontType) &rArr; Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*) &rArr; SSD1289::set_full_window() &rArr; SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ADS7843::sleep() &rArr; EXTI_set_IMRx(unsigned char, unsigned char) &rArr; __write_bit(unsigned*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::char_high(char, Font::FontType)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(short, short, const char*, ...)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_full_window()
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_window(Screen::RectType)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::char_width(char, Font::FontType)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::c_str()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> text.o(.constdata__ZTV4Text)
</UL>
<P><STRONG><a name="[151]"></a>TextBox::TextBox(String, unsigned short, unsigned short, unsigned, unsigned)</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = TextBox::TextBox(String, unsigned short, unsigned short, unsigned, unsigned) &rArr; Slider::Slider(int, int, Slider::DIR, int, int, unsigned, unsigned) &rArr; TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::string_width(const char*, Font::FontType)
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::c_str()
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::Slider(int, int, Slider::DIR, int, int, unsigned, unsigned)
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::set_controlObj(Graphic*)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::font_high()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[743]"></a>TextBox::TextBox__sub_object(String, unsigned short, unsigned short, unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, textbox.o(.text), UNUSED)

<P><STRONG><a name="[5e8]"></a>TextBox::set_text(String&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, textbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(String&)
</UL>

<P><STRONG><a name="[d6]"></a>TextBox::~TextBox()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TextBox::~TextBox() &rArr; Touchable::~Touchable() &rArr; Vector&lang;Touchable*&rang;::erase(Touchable**) &rArr; Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::~Vector()
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::clear()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::~Touchable()
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to TextBox::~TextBox()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::~TextBox__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[744]"></a>TextBox::~TextBox__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, textbox.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>TextBox::~TextBox__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TextBox::~TextBox__deallocating() &rArr; TextBox::~TextBox() &rArr; Touchable::~Touchable() &rArr; Vector&lang;Touchable*&rang;::erase(Touchable**) &rArr; Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::~TextBox()
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to TextBox::~TextBox__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[e2]"></a>thunk{-36} to TextBox::~TextBox__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = thunk{-36} to TextBox::~TextBox__deallocating() &rArr; TextBox::~TextBox__deallocating() &rArr; TextBox::~TextBox() &rArr; Touchable::~Touchable() &rArr; Vector&lang;Touchable*&rang;::erase(Touchable**) &rArr; Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::~TextBox__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[e1]"></a>thunk{-36} to TextBox::~TextBox()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = thunk{-36} to TextBox::~TextBox() &rArr; TextBox::~TextBox() &rArr; Touchable::~Touchable() &rArr; Vector&lang;Touchable*&rang;::erase(Touchable**) &rArr; Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::~TextBox()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[d8]"></a>TextBox::draw(Screen::Point)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TextBox::draw(Screen::Point)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[d9]"></a>TextBox::update(void*)</STRONG> (Thumb, 1080 bytes, Stack size 184 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = TextBox::update(void*) &rArr; Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short) &rArr; Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_font_back_color(unsigned)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::string_width(const char*, Font::FontType)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(short, short, const char*, ...)
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::RectType::RectType(Screen::Point, int, int)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_vwindow(Screen::RectType)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator +(const Screen::Point&)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_full_window()
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_window(Screen::RectType)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_font_color(unsigned)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::c_str()
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::get_pos()
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::font_high()
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::font_width()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[db]"></a>TextBox::meet_condition(Screen::Point)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TextBox::meet_condition(Screen::Point)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to TextBox::meet_condition(Screen::Point)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[e0]"></a>thunk{-36} to TextBox::meet_condition(Screen::Point)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = thunk{-36} to TextBox::meet_condition(Screen::Point) &rArr; TextBox::meet_condition(Screen::Point)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::meet_condition(Screen::Point)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[dc]"></a>TextBox::touch_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TextBox::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to TextBox::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[e3]"></a>thunk{-36} to TextBox::touch_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = thunk{-36} to TextBox::touch_handler(Screen::Point, Touchable*, Touchable*) &rArr; TextBox::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[dd]"></a>TextBox::hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TextBox::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to TextBox::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[e4]"></a>thunk{-36} to TextBox::hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = thunk{-36} to TextBox::hold_handler(Screen::Point, Touchable*, Touchable*) &rArr; TextBox::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[de]"></a>TextBox::long_hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TextBox::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to TextBox::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[e5]"></a>thunk{-36} to TextBox::long_hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = thunk{-36} to TextBox::long_hold_handler(Screen::Point, Touchable*, Touchable*) &rArr; TextBox::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[df]"></a>TextBox::release_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TextBox::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to TextBox::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[e6]"></a>thunk{-36} to TextBox::release_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = thunk{-36} to TextBox::release_handler(Screen::Point, Touchable*, Touchable*) &rArr; TextBox::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[da]"></a>TextBox::set_father(Pad*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, textbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TextBox::set_father(Pad*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textbox.o(.constdata__ZTV7TextBox)
</UL>
<P><STRONG><a name="[5e6]"></a>Slider::Slider(int, int, Slider::DIR, int, int, unsigned, unsigned)</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, slider.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Slider::Slider(int, int, Slider::DIR, int, int, unsigned, unsigned) &rArr; TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::TextBox(String, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
</UL>

<P><STRONG><a name="[745]"></a>Slider::Slider__sub_object(int, int, Slider::DIR, int, int, unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, slider.o(.text), UNUSED)

<P><STRONG><a name="[5e9]"></a>Slider::get_pos()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, slider.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::update(void*)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::update(void*)
</UL>

<P><STRONG><a name="[5e7]"></a>Slider::set_controlObj(Graphic*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, slider.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::TextBox(String, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
</UL>

<P><STRONG><a name="[60d]"></a>Slider::set_range(int, int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, slider.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Slider::set_range(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::update_slider()
</UL>

<P><STRONG><a name="[aa]"></a>Slider::draw(Screen::Point)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, slider.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Slider::draw(Screen::Point)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[ab]"></a>Slider::update(void*)</STRONG> (Thumb, 352 bytes, Stack size 64 bytes, slider.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = Slider::update(void*) &rArr; Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short) &rArr; Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short)
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[ac]"></a>Slider::touch_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, slider.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Slider::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to Slider::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[b0]"></a>thunk{-36} to Slider::touch_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, slider.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = thunk{-36} to Slider::touch_handler(Screen::Point, Touchable*, Touchable*) &rArr; Slider::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[ad]"></a>Slider::hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, slider.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Slider::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to Slider::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[b1]"></a>thunk{-36} to Slider::hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, slider.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = thunk{-36} to Slider::hold_handler(Screen::Point, Touchable*, Touchable*) &rArr; Slider::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[ae]"></a>Slider::long_hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, slider.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to Slider::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[b2]"></a>thunk{-36} to Slider::long_hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, slider.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = thunk{-36} to Slider::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[af]"></a>Slider::release_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, slider.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Slider::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to Slider::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[b3]"></a>thunk{-36} to Slider::release_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, slider.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = thunk{-36} to Slider::release_handler(Screen::Point, Touchable*, Touchable*) &rArr; Slider::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[746]"></a>if_cover()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pad.o(.text), UNUSED)

<P><STRONG><a name="[5f1]"></a>is_maller(Pad*, Pad*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pad.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pad.o(.text)
</UL>
<P><STRONG><a name="[5eb]"></a>Pad::draw_frame(Screen::Point)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, pad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[5ec]"></a>Pad::Pad(unsigned short, unsigned short, unsigned)</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Pad::Pad(unsigned short, unsigned short, unsigned) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Screen()
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::Vector()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::Datas()
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::TouchPad(unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
</UL>

<P><STRONG><a name="[747]"></a>Pad::Pad__sub_object(unsigned short, unsigned short, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, pad.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>Pad::recover(unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Pad::recover(unsigned char) &rArr; Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::~Pad()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
<LI> window.o(.constdata__ZTV6Window)
<LI> pad.o(.constdata__ZTV3Pad)
</UL>
<P><STRONG><a name="[94]"></a>Pad::active()</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Pad::active() &rArr; sort&lang;Pad*&rang;(T1*, T1*, unsigned char(*)(T1, T1))
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::rbegin() const
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::begin() const
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::rend() const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::end() const
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort&lang;Pad*&rang;(T1*, T1*, unsigned char(*)(T1, T1))
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::~Pad()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
<LI> window.o(.constdata__ZTV6Window)
<LI> pad.o(.constdata__ZTV3Pad)
</UL>
<P><STRONG><a name="[87]"></a>Pad::~Pad()</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = Pad::~Pad() &rArr; Pad::recover(unsigned char) &rArr; Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::begin() const
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::end() const
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::~Vector()
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::clear()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::~Datas()
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::clear()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::active()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::recover(unsigned char)
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::~TouchPad()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::~Pad__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pad.o(.constdata__ZTV3Pad)
</UL>
<P><STRONG><a name="[748]"></a>Pad::~Pad__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, pad.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>Pad::~Pad__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Pad::~Pad__deallocating() &rArr; Pad::~Pad() &rArr; Pad::recover(unsigned char) &rArr; Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::~Pad()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pad.o(.constdata__ZTV3Pad)
</UL>
<P><STRONG><a name="[8e]"></a>Pad::record(unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Pad::record(unsigned char) &rArr; Screen::get_points(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; SSD1289::get_points_65K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::push_back(Color::tag&) &rArr; Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::push_back(const Datas&lang;Color::tag&rang;::DataNode&) &rArr; Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::get_points(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::clear()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
<LI> window.o(.constdata__ZTV6Window)
<LI> pad.o(.constdata__ZTV3Pad)
</UL>
<P><STRONG><a name="[90]"></a>Pad::record_frame(Screen::Point)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Pad::record_frame(Screen::Point) &rArr; Screen::get_points(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; SSD1289::get_points_65K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::push_back(Color::tag&) &rArr; Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::push_back(const Datas&lang;Color::tag&rang;::DataNode&) &rArr; Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::get_points(short, short, short, short, Datas&lang;Color::tag&rang;&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
<LI> window.o(.constdata__ZTV6Window)
<LI> pad.o(.constdata__ZTV3Pad)
</UL>
<P><STRONG><a name="[91]"></a>Pad::recover_frame()</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Pad::recover_frame() &rArr; Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::clear()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
<LI> window.o(.constdata__ZTV6Window)
<LI> pad.o(.constdata__ZTV3Pad)
</UL>
<P><STRONG><a name="[5fb]"></a>Pad::update_widgets_rela_position()</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Pad::update_widgets_rela_position() &rArr; Screen::Point::operator +(const Screen::Point&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator +(const Screen::Point&)
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::begin() const
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::end() const
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::update(void*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::draw(Screen::Point)
</UL>

<P><STRONG><a name="[5fc]"></a>Pad::move(Screen::Point)</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Pad::move(Screen::Point) &rArr; Graphic::revise_rectangle_position(Screen::Point&, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::revise_rectangle_position(Screen::Point&, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>

<P><STRONG><a name="[92]"></a>Pad::add_widget(Widget*, Screen::Point)</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Pad::add_widget(Widget*, Screen::Point) &rArr; Vector&lang;Widget*&rang;::push_back(Widget*const &) &rArr; Vector&lang;Widget*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator +(const Screen::Point&)
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::push_back(Widget*const &)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::add_widget(Widget*, Screen::Point)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pad.o(.constdata__ZTV3Pad)
</UL>
<P><STRONG><a name="[5ff]"></a>Pad::if_in(Screen::Point, Screen::RectType&)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pad::if_in(Screen::Point, Screen::RectType&)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::touch_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::if_covered(Screen::Point)
</UL>

<P><STRONG><a name="[5fe]"></a>Pad::if_covered(Screen::Point)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pad::if_covered(Screen::Point) &rArr; Pad::if_in(Screen::Point, Screen::RectType&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::begin() const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::end() const
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::if_in(Screen::Point, Screen::RectType&)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::meet_condition(Screen::Point)
</UL>

<P><STRONG><a name="[89]"></a>Pad::draw(Screen::Point)</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Pad::draw(Screen::Point) &rArr; Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short) &rArr; Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short)
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::begin() const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::end() const
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::push_back(Pad*const &)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::update_widgets_rela_position()
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::draw(Screen::Point)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
<LI> pad.o(.constdata__ZTV3Pad)
</UL>
<P><STRONG><a name="[8a]"></a>Pad::dedraw()</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Pad::dedraw() &rArr; Vector&lang;Pad*&rang;::erase(Pad**) &rArr; Vector&lang;Pad*&rang;::remove(Pad**) &rArr; Vector&lang;Pad*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::begin() const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::end() const
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::erase(Pad**)
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::find(Pad*const &)
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::~TouchPad()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
<LI> window.o(.constdata__ZTV6Window)
<LI> pad.o(.constdata__ZTV3Pad)
</UL>
<P><STRONG><a name="[8b]"></a>Pad::update(void*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pad::update(void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::begin() const
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::end() const
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::update(void*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
<LI> pad.o(.constdata__ZTV3Pad)
</UL>
<P><STRONG><a name="[603]"></a>Pad::redraw_all()</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, pad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::rbegin() const
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::begin() const
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::rend() const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::end() const
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort&lang;Pad*&rang;(T1*, T1*, unsigned char(*)(T1, T1))
</UL>

<P><STRONG><a name="[605]"></a>TouchPad::TouchPad(unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TouchPad::TouchPad(unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Pad::Pad(unsigned short, unsigned short, unsigned) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::Vector()
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::Touchable(Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::Pad(unsigned short, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
</UL>

<P><STRONG><a name="[749]"></a>TouchPad::TouchPad__sub_object(unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, touchpad.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>TouchPad::~TouchPad()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = TouchPad::~TouchPad() &rArr; Pad::~Pad() &rArr; Pad::recover(unsigned char) &rArr; Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::~Vector()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::~Touchable()
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::dedraw()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::~Pad()
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::~Window()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-244} to TouchPad::~TouchPad()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::~TouchPad__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
</UL>
<P><STRONG><a name="[74a]"></a>TouchPad::~TouchPad__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, touchpad.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>TouchPad::~TouchPad__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = TouchPad::~TouchPad__deallocating() &rArr; TouchPad::~TouchPad() &rArr; Pad::~Pad() &rArr; Pad::recover(unsigned char) &rArr; Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::~TouchPad()
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-244} to TouchPad::~TouchPad__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
</UL>
<P><STRONG><a name="[ef]"></a>thunk{-244} to TouchPad::~TouchPad__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = thunk{-244} to TouchPad::~TouchPad__deallocating() &rArr; TouchPad::~TouchPad__deallocating() &rArr; TouchPad::~TouchPad() &rArr; Pad::~Pad() &rArr; Pad::recover(unsigned char) &rArr; Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::~TouchPad__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
</UL>
<P><STRONG><a name="[ee]"></a>thunk{-244} to TouchPad::~TouchPad()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = thunk{-244} to TouchPad::~TouchPad() &rArr; TouchPad::~TouchPad() &rArr; Pad::~Pad() &rArr; Pad::recover(unsigned char) &rArr; Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::~TouchPad()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
</UL>
<P><STRONG><a name="[e9]"></a>TouchPad::add_widget(Widget*, Screen::Point)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = TouchPad::add_widget(Widget*, Screen::Point) &rArr; __dynamic_cast &rArr; __derived_to_base_conversion &rArr; derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::push_back(Touchable*const &)
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::add_widget(Widget*, Screen::Point)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::add_widget(Widget*, Screen::Point)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
</UL>
<P><STRONG><a name="[bd]"></a>TouchPad::meet_condition(Screen::Point)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TouchPad::meet_condition(Screen::Point) &rArr; Pad::if_covered(Screen::Point) &rArr; Pad::if_in(Screen::Point, Screen::RectType&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::if_covered(Screen::Point)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-244} to TouchPad::meet_condition(Screen::Point)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
<LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[c4]"></a>thunk{-244} to TouchPad::meet_condition(Screen::Point)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = thunk{-244} to TouchPad::meet_condition(Screen::Point) &rArr; TouchPad::meet_condition(Screen::Point) &rArr; Pad::if_covered(Screen::Point) &rArr; Pad::if_in(Screen::Point, Screen::RectType&)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::meet_condition(Screen::Point)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
<LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[ea]"></a>TouchPad::touch_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TouchPad::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-244} to TouchPad::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
</UL>
<P><STRONG><a name="[f0]"></a>thunk{-244} to TouchPad::touch_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = thunk{-244} to TouchPad::touch_handler(Screen::Point, Touchable*, Touchable*) &rArr; TouchPad::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
</UL>
<P><STRONG><a name="[eb]"></a>TouchPad::hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TouchPad::hold_handler(Screen::Point, Touchable*, Touchable*) &rArr; Pad::move(Screen::Point) &rArr; Graphic::revise_rectangle_position(Screen::Point&, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::move(Screen::Point)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::hold_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-244} to TouchPad::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
</UL>
<P><STRONG><a name="[f1]"></a>thunk{-244} to TouchPad::hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = thunk{-244} to TouchPad::hold_handler(Screen::Point, Touchable*, Touchable*) &rArr; TouchPad::hold_handler(Screen::Point, Touchable*, Touchable*) &rArr; Pad::move(Screen::Point) &rArr; Graphic::revise_rectangle_position(Screen::Point&, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
</UL>
<P><STRONG><a name="[ec]"></a>TouchPad::long_hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TouchPad::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-244} to TouchPad::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
</UL>
<P><STRONG><a name="[f2]"></a>thunk{-244} to TouchPad::long_hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = thunk{-244} to TouchPad::long_hold_handler(Screen::Point, Touchable*, Touchable*) &rArr; TouchPad::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
</UL>
<P><STRONG><a name="[ed]"></a>TouchPad::release_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchPad::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-244} to TouchPad::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
</UL>
<P><STRONG><a name="[f3]"></a>thunk{-244} to TouchPad::release_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = thunk{-244} to TouchPad::release_handler(Screen::Point, Touchable*, Touchable*) &rArr; TouchPad::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
</UL>
<P><STRONG><a name="[c2]"></a>TouchPad::execute(Touchable*, Touchable*)</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TouchPad::execute(Touchable*, Touchable*) &rArr; Touchable::execute(Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch::touch_state()
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::end() const
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::execute(Touchable*, Touchable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-244} to TouchPad::execute(Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
<LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[c3]"></a>thunk{-244} to TouchPad::execute(Touchable*, Touchable*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, touchpad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = thunk{-244} to TouchPad::execute(Touchable*, Touchable*) &rArr; TouchPad::execute(Touchable*, Touchable*) &rArr; Touchable::execute(Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::execute(Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
<LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[607]"></a>Window::dispose()</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Window::dispose() &rArr; Queue&lang;System::Event&rang;::arrange() &rArr; Vector&lang;System::Event&rang;::clear(System::Event*) &rArr; Vector&lang;System::Event&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue&lang;System::Event&rang;::arrange()
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::push_back(const System::Event&)
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::shutdown_handler(Screen::Point, Touchable*, Touchable*)
</UL>

<P><STRONG><a name="[609]"></a>Window::shutdown_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Window::shutdown_handler(Screen::Point, Touchable*, Touchable*) &rArr; Window::dispose() &rArr; Queue&lang;System::Event&rang;::arrange() &rArr; Vector&lang;System::Event&rang;::clear(System::Event*) &rArr; Vector&lang;System::Event&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::dispose()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.text)
</UL>
<P><STRONG><a name="[15b]"></a>Window::set_UI(void(*)(Window*))</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, window.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[74b]"></a>Window::set_close_handler(void(*)(Window*))</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, window.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>Window::valid_area(int)</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Window::valid_area(int) &rArr; Screen::RectType::RectType(Screen::Point, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::RectType::RectType(Screen::Point, int, int)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator +(const Screen::Point&)
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::high_of_title()
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[60c]"></a>Window::update_slider()</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Window::update_slider() &rArr; Slider::set_range(int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::set_range(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::add_widget(Widget*, Screen::Point)
</UL>

<P><STRONG><a name="[145]"></a>Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))</STRONG> (Thumb, 402 bytes, Stack size 112 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*) &rArr; TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc::Proc()
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::push_back(Touchable*const &)
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::Slider(int, int, Slider::DIR, int, int, unsigned, unsigned)
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::set_controlObj(Graphic*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::high_of_title()
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::update_slider()
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::TouchPad(unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_window_test(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_process_test(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::UI_init()
</UL>

<P><STRONG><a name="[74c]"></a>Window::Window__sub_object(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))</STRONG> (Thumb, 0 bytes, Stack size 112 bytes, window.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>Window::~Window()</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = Window::~Window() &rArr; TouchPad::~TouchPad() &rArr; Pad::~Pad() &rArr; Pad::recover(unsigned char) &rArr; Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc::~Proc()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::~TouchPad()
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-244} to Window::~Window()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::~Window__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[74d]"></a>Window::~Window__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, window.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>Window::~Window__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Window::~Window__deallocating() &rArr; Window::~Window() &rArr; TouchPad::~TouchPad() &rArr; Pad::~Pad() &rArr; Pad::recover(unsigned char) &rArr; Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::~Window()
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-244} to Window::~Window__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[c6]"></a>thunk{-244} to Window::~Window__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = thunk{-244} to Window::~Window__deallocating() &rArr; Window::~Window__deallocating() &rArr; Window::~Window() &rArr; TouchPad::~TouchPad() &rArr; Pad::~Pad() &rArr; Pad::recover(unsigned char) &rArr; Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::~Window__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[c5]"></a>thunk{-244} to Window::~Window()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = thunk{-244} to Window::~Window() &rArr; Window::~Window() &rArr; TouchPad::~TouchPad() &rArr; Pad::~Pad() &rArr; Pad::recover(unsigned char) &rArr; Screen::draw_bitmap(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&) &rArr; Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::~Window()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[bb]"></a>Window::add_widget(Widget*, Screen::Point)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = Window::add_widget(Widget*, Screen::Point) &rArr; TouchPad::add_widget(Widget*, Screen::Point) &rArr; __dynamic_cast &rArr; __derived_to_base_conversion &rArr; derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::update_slider()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::add_widget(Widget*, Screen::Point)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[b9]"></a>Window::update(void*)</STRONG> (Thumb, 354 bytes, Stack size 72 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = Window::update(void*) &rArr; Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short) &rArr; Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_font_back_color(unsigned)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(short, short, const char*, ...)
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::restore_vwindow(Screen::RectType)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_vwindow(Screen::RectType)
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_font_color(unsigned)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::c_str()
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::get_pos()
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::high_of_title()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::update(void*)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::update_widgets_rela_position()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[b8]"></a>Window::draw(Screen::Point)</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = Window::draw(Screen::Point) &rArr; Pad::draw(Screen::Point) &rArr; Graphic::draw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short) &rArr; Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short) &rArr; Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short) &rArr; Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::high_of_title()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::draw(Screen::Point)
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[be]"></a>Window::touch_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Window::touch_handler(Screen::Point, Touchable*, Touchable*) &rArr; Screen::RectType::RectType(Screen::Point, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::RectType::RectType(Screen::Point, int, int)
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::high_of_title()
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator -(const Screen::Point&)
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::if_in(Screen::Point, Screen::RectType&)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-244} to Window::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[c7]"></a>thunk{-244} to Window::touch_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = thunk{-244} to Window::touch_handler(Screen::Point, Touchable*, Touchable*) &rArr; Window::touch_handler(Screen::Point, Touchable*, Touchable*) &rArr; Screen::RectType::RectType(Screen::Point, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[bf]"></a>Window::hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Window::hold_handler(Screen::Point, Touchable*, Touchable*) &rArr; TouchPad::hold_handler(Screen::Point, Touchable*, Touchable*) &rArr; Pad::move(Screen::Point) &rArr; Graphic::revise_rectangle_position(Screen::Point&, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-244} to Window::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[c8]"></a>thunk{-244} to Window::hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = thunk{-244} to Window::hold_handler(Screen::Point, Touchable*, Touchable*) &rArr; Window::hold_handler(Screen::Point, Touchable*, Touchable*) &rArr; TouchPad::hold_handler(Screen::Point, Touchable*, Touchable*) &rArr; Pad::move(Screen::Point) &rArr; Graphic::revise_rectangle_position(Screen::Point&, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[c0]"></a>Window::long_hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, window.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-244} to Window::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[c9]"></a>thunk{-244} to Window::long_hold_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = thunk{-244} to Window::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::long_hold_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[c1]"></a>Window::release_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Window::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-244} to Window::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[ca]"></a>thunk{-244} to Window::release_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = thunk{-244} to Window::release_handler(Screen::Point, Touchable*, Touchable*) &rArr; Window::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::release_handler(Screen::Point, Touchable*, Touchable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[147]"></a>Window::add_thread(void(*)())</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Window::add_thread(void(*)()) &rArr; Proc::add_thread(void(*)()) &rArr; Vector&lang;void(*)()&rang;::push_back(void(*const &)()) &rArr; Vector&lang;void(*)()&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc::add_thread(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_process_test(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::UI_init()
</UL>

<P><STRONG><a name="[60f]"></a>Window::delete_thread(void(*)())</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, window.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc::delete_thread(void(*)())
</UL>

<P><STRONG><a name="[148]"></a>Window::run_process()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, window.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_process_test(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::UI_init()
</UL>

<P><STRONG><a name="[612]"></a>LenCar::delay_5us()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lencar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_byte()
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_ACK()
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_NACK()
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_send_byte(char)
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_stop()
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_start()
</UL>

<P><STRONG><a name="[610]"></a>LenCar::MPU6050_IO_init()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lencar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LenCar::MPU6050_IO_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::MPU6050_init()
</UL>

<P><STRONG><a name="[611]"></a>LenCar::I2C_start()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lencar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LenCar::I2C_start() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::delay_5us()
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_send_address(unsigned char, unsigned char)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_address(unsigned char)
</UL>

<P><STRONG><a name="[613]"></a>LenCar::I2C_stop()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lencar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LenCar::I2C_stop() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::delay_5us()
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_send_address(unsigned char, unsigned char)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_address(unsigned char)
</UL>

<P><STRONG><a name="[614]"></a>LenCar::I2C_send_byte(char)</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, lencar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LenCar::I2C_send_byte(char) &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_receive_pin(GPIO_PORT, unsigned char)
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::delay_5us()
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_send_address(unsigned char, unsigned char)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_address(unsigned char)
</UL>

<P><STRONG><a name="[615]"></a>LenCar::I2C_NACK()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lencar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LenCar::I2C_NACK() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::delay_5us()
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_address(unsigned char)
</UL>

<P><STRONG><a name="[616]"></a>LenCar::I2C_ACK()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lencar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::delay_5us()
</UL>

<P><STRONG><a name="[617]"></a>LenCar::I2C_read_byte()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lencar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LenCar::I2C_read_byte() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_receive_pin(GPIO_PORT, unsigned char)
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::delay_5us()
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_address(unsigned char)
</UL>

<P><STRONG><a name="[618]"></a>LenCar::I2C_read_address(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lencar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LenCar::I2C_read_address(unsigned char) &rArr; LenCar::I2C_send_byte(char) &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned)
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_byte()
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_NACK()
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_send_byte(char)
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_stop()
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_start()
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_accel(LenCar::ACCEL_TYPE)
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_gyro(LenCar::GYRO_TYPE)
</UL>

<P><STRONG><a name="[61a]"></a>LenCar::I2C_send_address(unsigned char, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lencar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LenCar::I2C_send_address(unsigned char, unsigned char) &rArr; LenCar::I2C_send_byte(char) &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_send_byte(char)
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_stop()
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_start()
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::MPU6050_init()
</UL>

<P><STRONG><a name="[61b]"></a>LenCar::I2C_read_gyro(LenCar::GYRO_TYPE)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lencar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_address(unsigned char)
</UL>

<P><STRONG><a name="[61c]"></a>LenCar::I2C_read_accel(LenCar::ACCEL_TYPE)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lencar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LenCar::I2C_read_accel(LenCar::ACCEL_TYPE) &rArr; LenCar::I2C_read_address(unsigned char) &rArr; LenCar::I2C_send_byte(char) &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_address(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::update_speed()
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::get_angle(LenCar::DIR)
</UL>

<P><STRONG><a name="[61d]"></a>LenCar::get_angle(LenCar::DIR)</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, lencar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_accel(LenCar::ACCEL_TYPE)
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[61e]"></a>LenCar::MPU6050_init()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lencar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LenCar::MPU6050_init() &rArr; LenCar::I2C_send_address(unsigned char, unsigned char) &rArr; LenCar::I2C_send_byte(char) &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_send_address(unsigned char, unsigned char)
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::MPU6050_IO_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::init()
</UL>

<P><STRONG><a name="[62b]"></a>LenCar::pad_idle_event()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lencar.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lencar.o(.text)
</UL>
<P><STRONG><a name="[62a]"></a>LenCar::pad_left_event()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lencar.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lencar.o(.text)
</UL>
<P><STRONG><a name="[629]"></a>LenCar::pad_right_event()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lencar.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lencar.o(.text)
</UL>
<P><STRONG><a name="[628]"></a>LenCar::pad_down_event()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lencar.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lencar.o(.text)
</UL>
<P><STRONG><a name="[627]"></a>LenCar::pad_up_event()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lencar.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lencar.o(.text)
</UL>
<P><STRONG><a name="[61f]"></a>LenCar::OnOff_release_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, lencar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LenCar::OnOff_release_handler(Screen::Point, Touchable*, Touchable*) &rArr; Text::set_text(String) &rArr; String::String(const String&) &rArr; Vector&lang;char&rang;::push_back(const char&) &rArr; Vector&lang;char&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::set_text(String)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lencar.o(.text)
</UL>
<P><STRONG><a name="[620]"></a>LenCar::Switch_release_handler(Screen::Point, Touchable*, Touchable*)</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, lencar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LenCar::Switch_release_handler(Screen::Point, Touchable*, Touchable*) &rArr; String::String(const char*) &rArr; Vector&lang;char&rang;::push_back(const char&) &rArr; Vector&lang;char&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_font_back_color(unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_char(char)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::c_str()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lencar.o(.text)
</UL>
<P><STRONG><a name="[621]"></a>LenCar::update_speed()</STRONG> (Thumb, 856 bytes, Stack size 72 bytes, lencar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LenCar::update_speed() &rArr; LenCar::I2C_read_accel(LenCar::ACCEL_TYPE) &rArr; LenCar::I2C_read_address(unsigned char) &rArr; LenCar::I2C_send_byte(char) &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(double)
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::I2C_read_accel(LenCar::ACCEL_TYPE)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::go()
</UL>

<P><STRONG><a name="[624]"></a>LenCar::go()</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, lencar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = LenCar::go() &rArr; String::format(const char*, ...) &rArr; String::String(const char*) &rArr; Vector&lang;char&rang;::push_back(const char&) &rArr; Vector&lang;char&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::format(const char*, ...)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::set_text(String)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_char(char)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::update_speed()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lencar.o(.text)
</UL>
<P><STRONG><a name="[625]"></a>LenCar::UI_init()</STRONG> (Thumb, 888 bytes, Stack size 112 bytes, lencar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = LenCar::UI_init() &rArr; Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*) &rArr; TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::run_process()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::add_thread(void(*)())
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::ControlPad(int, unsigned, unsigned)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::set_rightEvent(void(*)())
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::set_leftEvent(void(*)())
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::set_downEvent(void(*)())
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::set_upEvent(void(*)())
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::set_idleEvent(void(*)())
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::Text(String, unsigned short, unsigned short, Screen::Point)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::init()
</UL>

<P><STRONG><a name="[13f]"></a>LenCar::init()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lencar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = LenCar::init() &rArr; LenCar::UI_init() &rArr; Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Button::Button(String, unsigned short, unsigned short, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), Vector&lang;Touchable*&rang;*) &rArr; TouchWidget::TouchWidget__sub_object(unsigned short, unsigned short, Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*)) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin(GPIO_PORT, unsigned char, unsigned short)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_init(USART_BAUD_RATE)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPxEN(unsigned char, unsigned char)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::UI_init()
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::MPU6050_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_lenCar_handler(Screen::Point, Touchable*, Touchable*)
</UL>

<P><STRONG><a name="[51c]"></a>__c89vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::printl(short, short, const char*, ...)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(const char*, ...)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::format(const char*, ...)
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_printf(char*, ...)
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_printf(char*, ...)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(short, short, const char*, ...)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::iprintf(Screen::Point, char*, ...)
</UL>

<P><STRONG><a name="[517]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_long(long)
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_double(double)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_float(float)
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_int(int)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_long(long)
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_double(double)
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_float(float)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_int(int)
</UL>

<P><STRONG><a name="[10d]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[631]"></a>__printf</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[634]"></a>__aeabi_assert</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::find(unsigned)
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::push_back(Color::tag&)
</UL>

<P><STRONG><a name="[74e]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[59f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::printl(short, short, const char*, ...)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(const char*, ...)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::_print(short, short, char*, Font::FontType)
</UL>

<P><STRONG><a name="[74f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[750]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[751]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[752]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[5f9]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::~Pad()
</UL>

<P><STRONG><a name="[671]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[675]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[637]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[63a]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[63b]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[63d]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[63f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[640]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[62e]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[62f]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[63e]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[630]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[105]"></a>_printf_charcount</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[753]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[647]"></a>_printf_fp_dec_real</STRONG> (Thumb, 628 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[62d]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[60]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> c89vsprintf.o(.text)
<LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[64a]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[115]"></a>_printf_longlong_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[64c]"></a>_printf_longlong_oct</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[111]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[119]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[64d]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[113]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[11b]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[107]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[636]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_terminate_handler()
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[64f]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[635]"></a>__assert_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, assert_puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __assert_puts &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[653]"></a>__cxa_bad_typeid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_bad_typeid_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxa_bad_typeid &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
</UL>

<P><STRONG><a name="[64]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[652]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[138]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[754]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[65f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[755]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[638]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[127]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[63c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[756]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[757]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[758]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[759]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[639]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[656]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[125]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[658]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[a]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[646]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[649]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[659]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[11d]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[11f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[65a]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[121]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[123]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[642]"></a>_btod_etento</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[64b]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[651]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[64e]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[650]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[654]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[75a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[75b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[75c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[65b]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[655]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[134]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[65d]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[65c]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[657]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[681]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[673]"></a>__ARM_vec_cleanup</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ARM_vec_cleanup_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_vec_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[65e]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[674]"></a>__cxa_rethrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_rethrow_noexceptions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[663]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[662]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[664]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[75d]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[75e]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[643]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[666]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[665]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[667]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[668]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[644]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[645]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[669]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[5e4]"></a>ControlPad::centre_of_circle()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, controlpad.o(i._ZN10ControlPad16centre_of_circleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ControlPad::centre_of_circle()
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::ControlPad(int, unsigned, unsigned)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::release_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::hold_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::update(void*)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::draw(Screen::Point)
</UL>

<P><STRONG><a name="[6a]"></a>ControlPad::~ControlPad__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, controlpad.o(i._ZN10ControlPadD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ControlPad::~ControlPad__deallocating() &rArr; ControlPad::~ControlPad() &rArr; Touchable::~Touchable() &rArr; Vector&lang;Touchable*&rang;::erase(Touchable**) &rArr; Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::~ControlPad()
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> controlpad.o(.constdata__ZTV10ControlPad)
</UL>
<P><STRONG><a name="[69]"></a>ControlPad::~ControlPad()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, controlpad.o(i._ZN10ControlPadD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ControlPad::~ControlPad() &rArr; Touchable::~Touchable() &rArr; Vector&lang;Touchable*&rang;::erase(Touchable**) &rArr; Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::~Touchable()
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::~ControlPad__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> controlpad.o(.constdata__ZTV10ControlPad)
</UL>
<P><STRONG><a name="[75f]"></a>ControlPad::~ControlPad__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, controlpad.o(i._ZN10ControlPadD1Ev), UNUSED)

<P><STRONG><a name="[6d]"></a>TouchWidget::is_touch_widget()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchwidget.o(i._ZN11TouchWidget15is_touch_widgetEv))
<BR>[Address Reference Count : 5]<UL><LI> touchwidget.o(.constdata__ZTV11TouchWidget)
<LI> textbox.o(.constdata__ZTV7TextBox)
<LI> button.o(.constdata__ZTV6Button)
<LI> controlpad.o(.constdata__ZTV10ControlPad)
<LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[81]"></a>TouchWidget::~TouchWidget__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, touchwidget.o(i._ZN11TouchWidgetD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TouchWidget::~TouchWidget__deallocating() &rArr; TouchWidget::~TouchWidget__sub_object() &rArr; Touchable::~Touchable() &rArr; Vector&lang;Touchable*&rang;::erase(Touchable**) &rArr; Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchWidget::~TouchWidget__sub_object()
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchwidget.o(.constdata__ZTV11TouchWidget)
</UL>
<P><STRONG><a name="[760]"></a>TouchWidget::~TouchWidget()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, touchwidget.o(i._ZN11TouchWidgetD2Ev), UNUSED)

<P><STRONG><a name="[80]"></a>TouchWidget::~TouchWidget__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, touchwidget.o(i._ZN11TouchWidgetD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TouchWidget::~TouchWidget__sub_object() &rArr; Touchable::~Touchable() &rArr; Vector&lang;Touchable*&rang;::erase(Touchable**) &rArr; Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::~Touchable()
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchWidget::~TouchWidget__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchwidget.o(.constdata__ZTV11TouchWidget)
</UL>
<P><STRONG><a name="[8c]"></a>Pad::valid_area(int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pad.o(i._ZN3Pad10valid_areaEi))
<BR>[Address Reference Count : 2]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
<LI> pad.o(.constdata__ZTV3Pad)
</UL>
<P><STRONG><a name="[93]"></a>Pad::widget_off_position()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pad.o(i._ZN3Pad19widget_off_positionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pad::widget_off_position()
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
<LI> pad.o(.constdata__ZTV3Pad)
</UL>
<P><STRONG><a name="[8d]"></a>Pad::all_area()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pad.o(i._ZN3Pad8all_areaEv))
<BR>[Address Reference Count : 3]<UL><LI> touchpad.o(.constdata__ZTV8TouchPad)
<LI> window.o(.constdata__ZTV6Window)
<LI> pad.o(.constdata__ZTV3Pad)
</UL>
<P><STRONG><a name="[5ea]"></a>Font::font_width()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, textbox.o(i._ZN4Font10font_widthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Font::font_width() &rArr; Font::char_width(char, Font::FontType) &rArr; Font::font_info(char, const Font::FontType&) &rArr; Font::ascii_YAHEI_char_info(char) &rArr; Font::font_width(const unsigned char*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::char_width(char, Font::FontType)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::update(void*)
</UL>

<P><STRONG><a name="[5e5]"></a>Font::font_high()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, textbox.o(i._ZN4Font9font_highEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Font::font_high() &rArr; Font::char_high(char, Font::FontType) &rArr; Font::font_info(char, const Font::FontType&) &rArr; Font::ascii_YAHEI_char_info(char) &rArr; Font::font_width(const unsigned char*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::char_high(char, Font::FontType)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::TextBox(String, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::update(void*)
</UL>

<P><STRONG><a name="[626]"></a>Text::Text(String, unsigned short, unsigned short, Screen::Point)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lencar.o(i._ZN4TextC1E6StringttN6Screen5PointE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Text::Text(String, unsigned short, unsigned short, Screen::Point) &rArr; Widget::Widget__sub_object(unsigned short, unsigned short) &rArr; Screen::Screen() &rArr; SSD1289::init(SSD1289::InitialStruct) &rArr; SSD1289::pins_init() &rArr; GPIO_configure(GPIO_PORT, unsigned char, unsigned char, unsigned) &rArr; __set_bits(unsigned*, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Widget::Widget__sub_object(unsigned short, unsigned short)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::UI_init()
</UL>

<P><STRONG><a name="[761]"></a>Text::Text__sub_object(String, unsigned short, unsigned short, Screen::Point)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, lencar.o(i._ZN4TextC1E6StringttN6Screen5PointE), UNUSED)

<P><STRONG><a name="[96]"></a>Text::~Text__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, text.o(i._ZN4TextD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Text::~Text__deallocating() &rArr; Text::~Text() &rArr; Vector&lang;char&rang;::clear() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::~Text()
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> text.o(.constdata__ZTV4Text)
</UL>
<P><STRONG><a name="[95]"></a>Text::~Text()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, text.o(i._ZN4TextD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Text::~Text() &rArr; Vector&lang;char&rang;::clear() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::~Vector()
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::~Text__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> text.o(.constdata__ZTV4Text)
</UL>
<P><STRONG><a name="[762]"></a>Text::~Text__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, text.o(i._ZN4TextD1Ev), UNUSED)

<P><STRONG><a name="[9b]"></a>Button::~Button__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, button.o(i._ZN6ButtonD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Button::~Button__deallocating() &rArr; Button::~Button() &rArr; Touchable::~Touchable() &rArr; Vector&lang;Touchable*&rang;::erase(Touchable**) &rArr; Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::~Button()
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTV6Button)
</UL>
<P><STRONG><a name="[9a]"></a>Button::~Button()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, button.o(i._ZN6ButtonD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Button::~Button() &rArr; Touchable::~Touchable() &rArr; Vector&lang;Touchable*&rang;::erase(Touchable**) &rArr; Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::~Vector()
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::clear()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::~Touchable()
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::~Button__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTV6Button)
</UL>
<P><STRONG><a name="[763]"></a>Button::~Button__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, button.o(i._ZN6ButtonD1Ev), UNUSED)

<P><STRONG><a name="[13c]"></a>Screen::Point::Point(short, short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usermain.o(i._ZN6Screen5PointC1Ess))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Widget::Widget__sub_object(unsigned short, unsigned short)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_window_test(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_process_test(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_process_test_handler1()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_process_test_handler()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;window_UI(Window*)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::_print(short, short, char*, Font::FontType)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::mix_rectangle(Screen::RectType, Screen::RectType, Screen::RectType&)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_rectangle(short, short, short, short, unsigned)
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_line(short, short, short, short, unsigned)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, const unsigned char*)
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_full_vwindow()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_screen_cpp
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_oval(unsigned short, unsigned short, Screen::Point, unsigned)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_full_window()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_font_cpp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::update(void*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::update(void*)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::UI_init()
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::Switch_release_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::widget_off_position()
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator -(const Screen::Point&)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::draw(Screen::Point)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::update(void*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::valid_area(int)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_window_cpp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::long_hold_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::widget_off_position()
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::Pad(unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[764]"></a>Screen::Point::Point__sub_object(short, short)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, usermain.o(i._ZN6Screen5PointC1Ess), UNUSED)

<P><STRONG><a name="[68]"></a>Screen::Point::Point()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, paintable.o(i._ZN6Screen5PointC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> paintable.o(t._ZN6VectorIN6Screen5PointEE6resizeEv)
</UL>
<P><STRONG><a name="[765]"></a>Screen::Point::Point__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, paintable.o(i._ZN6Screen5PointC1Ev), UNUSED)

<P><STRONG><a name="[59e]"></a>Screen::Point::operator ==(const Screen::Point&)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, out.o(i._ZN6Screen5PointeqERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::_print(short, short, char*, Font::FontType)
</UL>

<P><STRONG><a name="[60e]"></a>Screen::Point::operator -(const Screen::Point&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, window.o(i._ZN6Screen5PointmiERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Screen::Point::operator -(const Screen::Point&)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::widget_off_position()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::touch_handler(Screen::Point, Touchable*, Touchable*)
</UL>

<P><STRONG><a name="[5bd]"></a>Screen::Point::operator +(const Screen::Point&)</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, paintable.o(i._ZN6Screen5PointplERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Screen::Point::operator +(const Screen::Point&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::iprintf(Screen::Point, char*, ...)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_bitmap(Screen::Point, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_bitmap(Screen::Point, short, short, const unsigned char*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_point(Screen::Point, unsigned)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_oval(unsigned short, unsigned short, Screen::Point, unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_empty_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned, unsigned short)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_line(Screen::Point, Screen::Point, unsigned, unsigned char)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Widget::real_position()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::update(void*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::valid_area(int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::add_widget(Widget*, Screen::Point)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::update_widgets_rela_position()
</UL>

<P><STRONG><a name="[57f]"></a>Screen::RectType::RectType(Screen::Point, int, int)</STRONG> (Thumb, 14 bytes, Stack size 20 bytes, screen.o(i._ZN6Screen8RectTypeC1ENS_5PointEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Screen::RectType::RectType(Screen::Point, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_rectangle(short, short, short, short, unsigned)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, const unsigned char*)
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_full_vwindow()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_screen_cpp
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_full_window()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_font_cpp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::update(void*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::touch_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::valid_area(int)
</UL>

<P><STRONG><a name="[766]"></a>Screen::RectType::RectType__sub_object(Screen::Point, int, int)</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, screen.o(i._ZN6Screen8RectTypeC1ENS_5PointEii), UNUSED)

<P><STRONG><a name="[583]"></a>Screen::RectType::RectType()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screen.o(i._ZN6Screen8RectTypeC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_rectangle(short, short, short, short, unsigned)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, const unsigned char*)
</UL>

<P><STRONG><a name="[767]"></a>Screen::RectType::RectType__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen.o(i._ZN6Screen8RectTypeC1Ev), UNUSED)

<P><STRONG><a name="[a9]"></a>Slider::~Slider__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, slider.o(i._ZN6SliderD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Slider::~Slider__deallocating() &rArr; Slider::~Slider() &rArr; Touchable::~Touchable() &rArr; Vector&lang;Touchable*&rang;::erase(Touchable**) &rArr; Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::~Slider()
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[a8]"></a>Slider::~Slider()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, slider.o(i._ZN6SliderD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Slider::~Slider() &rArr; Touchable::~Touchable() &rArr; Vector&lang;Touchable*&rang;::erase(Touchable**) &rArr; Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::~Touchable()
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::~Slider__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[768]"></a>Slider::~Slider__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, slider.o(i._ZN6SliderD1Ev), UNUSED)

<P><STRONG><a name="[146]"></a>String::~String()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usermain.o(i._ZN6StringD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = String::~String() &rArr; Vector&lang;char&rang;::clear() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::~Vector()
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_event()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_event()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_event()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_event()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_window_test(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_process_test(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::UI_init()
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::go()
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::Switch_release_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::OnOff_release_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::~Window()
</UL>

<P><STRONG><a name="[769]"></a>String::~String__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, usermain.o(i._ZN6StringD1Ev), UNUSED)

<P><STRONG><a name="[71]"></a>Widget::set_father(Pad*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, widget.o(i._ZN6Widget10set_fatherEP3Pad))
<BR>[Address Reference Count : 6]<UL><LI> widget.o(.constdata__ZTV6Widget)
<LI> touchwidget.o(.constdata__ZTV11TouchWidget)
<LI> button.o(.constdata__ZTV6Button)
<LI> controlpad.o(.constdata__ZTV10ControlPad)
<LI> text.o(.constdata__ZTV4Text)
<LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[6f]"></a>Widget::real_position()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, textbox.o(i._ZN6Widget13real_positionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Widget::real_position() &rArr; Screen::Point::operator +(const Screen::Point&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator +(const Screen::Point&)
</UL>
<BR>[Address Reference Count : 7]<UL><LI> widget.o(.constdata__ZTV6Widget)
<LI> touchwidget.o(.constdata__ZTV11TouchWidget)
<LI> textbox.o(.constdata__ZTV7TextBox)
<LI> button.o(.constdata__ZTV6Button)
<LI> controlpad.o(.constdata__ZTV10ControlPad)
<LI> text.o(.constdata__ZTV4Text)
<LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[99]"></a>Widget::is_touch_widget()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, widget.o(i._ZN6Widget15is_touch_widgetEv))
<BR>[Address Reference Count : 2]<UL><LI> widget.o(.constdata__ZTV6Widget)
<LI> text.o(.constdata__ZTV4Text)
</UL>
<P><STRONG><a name="[70]"></a>Widget::real_area()</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, widget.o(i._ZN6Widget9real_areaEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Widget::real_area()
</UL>
<BR>[Address Reference Count : 7]<UL><LI> widget.o(.constdata__ZTV6Widget)
<LI> touchwidget.o(.constdata__ZTV11TouchWidget)
<LI> textbox.o(.constdata__ZTV7TextBox)
<LI> button.o(.constdata__ZTV6Button)
<LI> controlpad.o(.constdata__ZTV10ControlPad)
<LI> text.o(.constdata__ZTV4Text)
<LI> slider.o(.constdata__ZTV6Slider)
</UL>
<P><STRONG><a name="[b5]"></a>Widget::~Widget__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, widget.o(i._ZN6WidgetD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Widget::~Widget__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Widget::~Widget__sub_object()
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget.o(.constdata__ZTV6Widget)
</UL>
<P><STRONG><a name="[76a]"></a>Widget::~Widget()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, widget.o(i._ZN6WidgetD2Ev), UNUSED)

<P><STRONG><a name="[b4]"></a>Widget::~Widget__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, widget.o(i._ZN6WidgetD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Widget::~Widget__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget.o(.constdata__ZTV6Widget)
</UL>
<P><STRONG><a name="[60b]"></a>Window::high_of_title()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, window.o(i._ZN6Window13high_of_titleEv))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::widget_off_position()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::touch_handler(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::draw(Screen::Point)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::update(void*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::valid_area(int)
</UL>

<P><STRONG><a name="[bc]"></a>Window::widget_off_position()</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, window.o(i._ZN6Window19widget_off_positionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Window::widget_off_position() &rArr; Screen::Point::operator -(const Screen::Point&)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::high_of_title()
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::operator -(const Screen::Point&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata__ZTV6Window)
</UL>
<P><STRONG><a name="[584]"></a>Graphic::is_in_rectangle(Screen::Point, Screen::RectType)</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, screen.o(i._ZN7Graphic15is_in_rectangleEN6Screen5PointENS0_8RectTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Graphic::is_in_rectangle(Screen::Point, Screen::RectType)
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_font_left_align(unsigned short, unsigned short, unsigned short, unsigned short, unsigned, unsigned, const unsigned char*)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_point(Screen::Point, unsigned)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, const unsigned char*)
</UL>

<P><STRONG><a name="[581]"></a>SSD1289::set_point_65K(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen.o(i._ZN7SSD128913set_point_65KEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSD1289::set_point_65K(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::send_data(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_point(unsigned)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_65K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_65K(short, short, short, short, const unsigned char*)
</UL>

<P><STRONG><a name="[585]"></a>SSD1289::set_point_262K(unsigned)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, screen.o(i._ZN7SSD128914set_point_262KEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSD1289::set_point_262K(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::send_data(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_point(unsigned)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, const unsigned char*)
</UL>

<P><STRONG><a name="[56b]"></a>SSD1289::set_GDDRAM_position(unsigned short, unsigned short)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ssd1289.o(i._ZN7SSD128919set_GDDRAM_positionEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSD1289::set_GDDRAM_position(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::send_data(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::clear_screen_65K(unsigned)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::clear_screen_262K(unsigned)
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_point_65K(unsigned short, unsigned short)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_point_262K(unsigned short, unsigned short)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_full_window()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[570]"></a>SSD1289::high()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssd1289.o(i._ZN7SSD12894highEv))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::printl(short, short, const char*, ...)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(const char*, ...)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_point(Screen::Point, unsigned)
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_full_vwindow()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_screen_cpp
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_point_65K(unsigned short, unsigned short)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_point_262K(unsigned short, unsigned short)
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::revise_rectangle_position(Screen::Point&, short, short)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_full_window()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_font_cpp
</UL>

<P><STRONG><a name="[56f]"></a>SSD1289::width()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssd1289.o(i._ZN7SSD12895widthEv))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::printl(short, short, const char*, ...)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::print(const char*, ...)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out::_print(short, short, char*, Font::FontType)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_point(Screen::Point, unsigned)
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::set_full_vwindow()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_screen_cpp
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_point_65K(unsigned short, unsigned short)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_point_262K(unsigned short, unsigned short)
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::revise_rectangle_position(Screen::Point&, short, short)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::set_full_window()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_font_cpp
</UL>

<P><STRONG><a name="[566]"></a>SSD1289::send_data(unsigned short, unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssd1289.o(i._ZN7SSD12899send_dataEtt))
<BR><BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_point_262K(unsigned)
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_point_65K(unsigned)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_point(Screen::Point, unsigned)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_GDDRAM_position(unsigned short, unsigned short)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::clear_screen_65K(unsigned)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::clear_screen_262K(unsigned)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::internal_init(SSD1289::InitialStruct)
</UL>

<P><STRONG><a name="[66a]"></a>std::type_info::operator ==(const std::type_info&) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, type_info_eq.o(i._ZNKSt9type_infoeqERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbc_post_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbc_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
</UL>

<P><STRONG><a name="[622]"></a>std::abs(double)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lencar.o(i._ZSt3absd))
<BR><BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::update_speed()
</UL>

<P><STRONG><a name="[5d9]"></a>std::pow(double, int)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, graphic.o(i._ZSt3powdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = std::pow(double, int) &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::distance(Screen::Point, Screen::Point)
</UL>

<P><STRONG><a name="[65]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::clear()
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::resize()
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::resize()
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::resize()
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::resize()
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::resize()
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::resize()
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::resize()
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::resize()
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::clear()
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::resize()
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::clear()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_vec_new.o(i.__cxa_vec_new)
</UL>
<P><STRONG><a name="[5d1]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::~Vector()
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::~Vector()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::~Vector()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::~Vector()
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::~Vector()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue&lang;System::Event&rang;::~Queue()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchWidget::~TouchWidget__deallocating()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Widget::~Widget__deallocating()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::~Touchable__deallocating()
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::~Vector()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::~Slider__deallocating()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::~TextBox__deallocating()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::~Text__deallocating()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlPad::~ControlPad__deallocating()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::~Button__deallocating()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::~Window__deallocating()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::~TouchPad__deallocating()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::~TouchPad()
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::~Vector()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::~Vector()
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::~Vector()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::~Pad__deallocating()
</UL>

<P><STRONG><a name="[670]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::resize()
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::resize()
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::resize()
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::resize()
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::resize()
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::resize()
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::resize()
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::resize()
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[143]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::TextBox(String, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_window_test(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_process_test(Screen::Point, Touchable*, Touchable*)
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue&lang;System::Event&rang;::Queue()
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::UI_init()
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::TouchPad(unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
</UL>

<P><STRONG><a name="[672]"></a>__ARM_array_new_general</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, array_new_general.o(i.__ARM_array_new_general))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>

<P><STRONG><a name="[66c]"></a>__ARM_common_get_typeid</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtti.o(i.__ARM_common_get_typeid))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = __ARM_common_get_typeid &rArr; __cxa_bad_typeid &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
</UL>

<P><STRONG><a name="[648]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[546]"></a>__aeabi_atexit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_System_cpp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_pad_cpp
</UL>

<P><STRONG><a name="[5ee]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::Pad(unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[676]"></a>__aeabi_vec_new_nocookie</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, aeabi_vec_new_nocookie.o(i.__aeabi_vec_new_nocookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __aeabi_vec_new_nocookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::resize()
</UL>

<P><STRONG><a name="[12d]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_1
</UL>

<P><STRONG><a name="[60a]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::draw(Screen::Point)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::valid_area(int)
</UL>

<P><STRONG><a name="[82]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 3]<UL><LI> widget.o(.constdata__ZTV6Widget)
<LI> widget.o(.constdata__ZTV7Graphic)
<LI> touchwidget.o(.constdata__ZTV11TouchWidget)
</UL>
<P><STRONG><a name="[677]"></a>__cxa_vec_new</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, cxa_vec_new.o(i.__cxa_vec_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_nocookie
</UL>

<P><STRONG><a name="[678]"></a>__derived_to_base_conversion</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, rtti.o(i.__derived_to_base_conversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = __derived_to_base_conversion &rArr; derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
</UL>

<P><STRONG><a name="[606]"></a>__dynamic_cast</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, rtti.o(i.__dynamic_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = __dynamic_cast &rArr; __derived_to_base_conversion &rArr; derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::add_widget(Widget*, Screen::Point)
</UL>

<P><STRONG><a name="[679]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 832 bytes, Stack size 136 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[67c]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[67d]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[67e]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[67f]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[632]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5d3]"></a>atan</STRONG> (Thumb, 478 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[66f]"></a>pow</STRONG> (Thumb, 2510 bytes, Stack size 112 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(double, int)
</UL>

<P><STRONG><a name="[5d4]"></a>sin</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[170]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_in_range_circle(int, int, int, int, int)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::distance(Screen::Point, Screen::Point)
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_oval(unsigned short, unsigned short, Screen::Point, unsigned)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[12a]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[62]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[5f2]"></a>sort&lang;Pad*&rang;(T1*, T1*, unsigned char(*)(T1, T1))</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, pad.o(t._Z4sortIP3PadEhPT_S3_PFhS2_S2_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sort&lang;Pad*&rang;(T1*, T1*, unsigned char(*)(T1, T1))
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::redraw_all()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::active()
</UL>

<P><STRONG><a name="[588]"></a>Datas&lang;Color::tag&rang;::set_current_position(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, screen.o(t._ZN5DatasIN5Color3tagEE20set_current_positionEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::find(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::next()
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_65K(short, short, short, short, Datas&lang;Color::tag&rang;&)
</UL>

<P><STRONG><a name="[682]"></a>Datas&lang;Color::tag&rang;::find(unsigned)</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, screen.o(t._ZN5DatasIN5Color3tagEE4findEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::operator [](unsigned)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::set_current_position(unsigned)
</UL>

<P><STRONG><a name="[589]"></a>Datas&lang;Color::tag&rang;::next()</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, screen.o(t._ZN5DatasIN5Color3tagEE4nextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Datas&lang;Color::tag&rang;::next() &rArr; Datas&lang;Color::tag&rang;::set_current_position(unsigned) &rArr; Datas&lang;Color::tag&rang;::find(unsigned) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::operator [](unsigned)
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::set_current_position(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_262K(short, short, short, short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_bitmap_65K(short, short, short, short, Datas&lang;Color::tag&rang;&)
</UL>

<P><STRONG><a name="[5f8]"></a>Datas&lang;Color::tag&rang;::clear()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pad.o(t._ZN5DatasIN5Color3tagEE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Datas&lang;Color::tag&rang;::clear() &rArr; Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::clear() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::dedraw()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::recover_frame()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::record(unsigned char)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::~Pad()
</UL>

<P><STRONG><a name="[573]"></a>Datas&lang;Color::tag&rang;::push_back(Color::tag&)</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ssd1289.o(t._ZN5DatasIN5Color3tagEE9push_backERS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Datas&lang;Color::tag&rang;::push_back(Color::tag&) &rArr; Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::push_back(const Datas&lang;Color::tag&rang;::DataNode&) &rArr; Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::push_back(const Datas&lang;Color::tag&rang;::DataNode&)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_65K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::get_points_262K(unsigned short, unsigned short, unsigned short, unsigned short, Datas&lang;Color::tag&rang;&)
</UL>

<P><STRONG><a name="[5d]"></a>Datas&lang;Color::tag&rang;::Datas()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pad.o(t._ZN5DatasIN5Color3tagEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Datas&lang;Color::tag&rang;::Datas()
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::Vector()
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::Pad(unsigned short, unsigned short, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pad.o(.text)
</UL>
<P><STRONG><a name="[76b]"></a>Datas&lang;Color::tag&rang;::Datas__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, pad.o(t._ZN5DatasIN5Color3tagEEC1Ev), UNUSED)

<P><STRONG><a name="[5e]"></a>Datas&lang;Color::tag&rang;::~Datas()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pad.o(t._ZN5DatasIN5Color3tagEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Datas&lang;Color::tag&rang;::~Datas() &rArr; Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::~Vector() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::~Vector()
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::~Pad()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pad.o(.text)
</UL>
<P><STRONG><a name="[76c]"></a>Datas&lang;Color::tag&rang;::~Datas__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, pad.o(t._ZN5DatasIN5Color3tagEED1Ev), UNUSED)

<P><STRONG><a name="[53a]"></a>Queue&lang;System::Event&rang;::empty()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system.o(t._ZN5QueueIN6System5EventEE5emptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::event_process()
</UL>

<P><STRONG><a name="[53b]"></a>Queue&lang;System::Event&rang;::arrange()</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, system.o(t._ZN5QueueIN6System5EventEE7arrangeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Queue&lang;System::Event&rang;::arrange() &rArr; Vector&lang;System::Event&rang;::clear(System::Event*) &rArr; Vector&lang;System::Event&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::begin() const
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::resize()
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::clear(System::Event*)
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::copy(const System::Event*, const System::Event*, System::Event*)
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System::event_process()
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::dispose()
</UL>

<P><STRONG><a name="[547]"></a>Queue&lang;System::Event&rang;::Queue()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, system.o(t._ZN5QueueIN6System5EventEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Queue&lang;System::Event&rang;::Queue() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::Vector()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_System_cpp
</UL>

<P><STRONG><a name="[76d]"></a>Queue&lang;System::Event&rang;::Queue__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, system.o(t._ZN5QueueIN6System5EventEEC1Ev), UNUSED)

<P><STRONG><a name="[5b]"></a>Queue&lang;System::Event&rang;::~Queue()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, system.o(t._ZN5QueueIN6System5EventEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Queue&lang;System::Event&rang;::~Queue() &rArr; Vector&lang;System::Event&rang;::~Vector() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::~Vector()
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.text)
</UL>
<P><STRONG><a name="[76e]"></a>Queue&lang;System::Event&rang;::~Queue__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, system.o(t._ZN5QueueIN6System5EventEED1Ev), UNUSED)

<P><STRONG><a name="[68f]"></a>Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::copy(const Datas&lang;Color::tag&rang;::DataNode*, const Datas&lang;Color::tag&rang;::DataNode*, Datas&lang;Color::tag&rang;::DataNode*)</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, ssd1289.o(t._ZN6VectorIN5DatasIN5Color3tagEE8DataNodeEE4copyEPKS4_S7_PS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::copy(const Datas&lang;Color::tag&rang;::DataNode*, const Datas&lang;Color::tag&rang;::DataNode*, Datas&lang;Color::tag&rang;::DataNode*)
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::resize()
</UL>

<P><STRONG><a name="[684]"></a>Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::clear()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pad.o(t._ZN6VectorIN5DatasIN5Color3tagEE8DataNodeEE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::clear() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::clear()
</UL>

<P><STRONG><a name="[68e]"></a>Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::resize()</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ssd1289.o(t._ZN6VectorIN5DatasIN5Color3tagEE8DataNodeEE6resizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::copy(const Datas&lang;Color::tag&rang;::DataNode*, const Datas&lang;Color::tag&rang;::DataNode*, Datas&lang;Color::tag&rang;::DataNode*)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::push_back(const Datas&lang;Color::tag&rang;::DataNode&)
</UL>

<P><STRONG><a name="[685]"></a>Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::push_back(const Datas&lang;Color::tag&rang;::DataNode&)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ssd1289.o(t._ZN6VectorIN5DatasIN5Color3tagEE8DataNodeEE9push_backERKS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::push_back(const Datas&lang;Color::tag&rang;::DataNode&) &rArr; Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::resize()
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::push_back(Color::tag&)
</UL>

<P><STRONG><a name="[686]"></a>Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::Vector()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pad.o(t._ZN6VectorIN5DatasIN5Color3tagEE8DataNodeEEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::Datas()
</UL>

<P><STRONG><a name="[76f]"></a>Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pad.o(t._ZN6VectorIN5DatasIN5Color3tagEE8DataNodeEEC1Ev), UNUSED)

<P><STRONG><a name="[687]"></a>Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::~Vector()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pad.o(t._ZN6VectorIN5DatasIN5Color3tagEE8DataNodeEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::~Vector() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::~Datas()
</UL>

<P><STRONG><a name="[770]"></a>Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::~Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, pad.o(t._ZN6VectorIN5DatasIN5Color3tagEE8DataNodeEED1Ev), UNUSED)

<P><STRONG><a name="[683]"></a>Vector&lang;Datas&lang;Color::tag&rang;::DataNode&rang;::operator [](unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, screen.o(t._ZN6VectorIN5DatasIN5Color3tagEE8DataNodeEEixEj))
<BR><BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::next()
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datas&lang;Color::tag&rang;::find(unsigned)
</UL>

<P><STRONG><a name="[691]"></a>Vector&lang;Screen::Point&rang;::copy(const Screen::Point*, const Screen::Point*, Screen::Point*)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, paintable.o(t._ZN6VectorIN6Screen5PointEE4copyEPKS1_S4_PS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Vector&lang;Screen::Point&rang;::copy(const Screen::Point*, const Screen::Point*, Screen::Point*)
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::resize()
</UL>

<P><STRONG><a name="[690]"></a>Vector&lang;Screen::Point&rang;::resize()</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, paintable.o(t._ZN6VectorIN6Screen5PointEE6resizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Vector&lang;Screen::Point&rang;::resize() &rArr; __aeabi_vec_new_nocookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::end() const
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::copy(const Screen::Point*, const Screen::Point*, Screen::Point*)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_nocookie
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::push_back(const Screen::Point&)
</UL>

<P><STRONG><a name="[5c2]"></a>Vector&lang;Screen::Point&rang;::push_back(const Screen::Point&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, paintable.o(t._ZN6VectorIN6Screen5PointEE9push_backERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Vector&lang;Screen::Point&rang;::push_back(const Screen::Point&) &rArr; Vector&lang;Screen::Point&rang;::resize() &rArr; __aeabi_vec_new_nocookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::resize()
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[5c1]"></a>Vector&lang;Screen::Point&rang;::Vector()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, paintable.o(t._ZN6VectorIN6Screen5PointEEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[771]"></a>Vector&lang;Screen::Point&rang;::Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, paintable.o(t._ZN6VectorIN6Screen5PointEEC1Ev), UNUSED)

<P><STRONG><a name="[5c5]"></a>Vector&lang;Screen::Point&rang;::~Vector()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, paintable.o(t._ZN6VectorIN6Screen5PointEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Vector&lang;Screen::Point&rang;::~Vector() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[772]"></a>Vector&lang;Screen::Point&rang;::~Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, paintable.o(t._ZN6VectorIN6Screen5PointEED1Ev), UNUSED)

<P><STRONG><a name="[689]"></a>Vector&lang;System::Event&rang;::copy(const System::Event*, const System::Event*, System::Event*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, system.o(t._ZN6VectorIN6System5EventEE4copyEPKS1_S4_PS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Vector&lang;System::Event&rang;::copy(const System::Event*, const System::Event*, System::Event*)
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::resize()
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue&lang;System::Event&rang;::arrange()
</UL>

<P><STRONG><a name="[68a]"></a>Vector&lang;System::Event&rang;::clear(System::Event*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, system.o(t._ZN6VectorIN6System5EventEE5clearEPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Vector&lang;System::Event&rang;::clear(System::Event*) &rArr; Vector&lang;System::Event&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::begin() const
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::end() const
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::resize()
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue&lang;System::Event&rang;::arrange()
</UL>

<P><STRONG><a name="[68b]"></a>Vector&lang;System::Event&rang;::resize()</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, system.o(t._ZN6VectorIN6System5EventEE6resizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Vector&lang;System::Event&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::begin() const
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::end() const
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::copy(const System::Event*, const System::Event*, System::Event*)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::clear(System::Event*)
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue&lang;System::Event&rang;::arrange()
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::push_back(const System::Event&)
</UL>

<P><STRONG><a name="[608]"></a>Vector&lang;System::Event&rang;::push_back(const System::Event&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, window.o(t._ZN6VectorIN6System5EventEE9push_backERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Vector&lang;System::Event&rang;::push_back(const System::Event&) &rArr; Vector&lang;System::Event&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::resize()
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::dispose()
</UL>

<P><STRONG><a name="[68c]"></a>Vector&lang;System::Event&rang;::Vector()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system.o(t._ZN6VectorIN6System5EventEEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue&lang;System::Event&rang;::Queue()
</UL>

<P><STRONG><a name="[773]"></a>Vector&lang;System::Event&rang;::Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, system.o(t._ZN6VectorIN6System5EventEEC1Ev), UNUSED)

<P><STRONG><a name="[68d]"></a>Vector&lang;System::Event&rang;::~Vector()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, system.o(t._ZN6VectorIN6System5EventEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Vector&lang;System::Event&rang;::~Vector() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue&lang;System::Event&rang;::~Queue()
</UL>

<P><STRONG><a name="[774]"></a>Vector&lang;System::Event&rang;::~Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, system.o(t._ZN6VectorIN6System5EventEED1Ev), UNUSED)

<P><STRONG><a name="[694]"></a>Vector&lang;Pad*&rang;::copy(Pad*const *, Pad*const *, Pad**)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, pad.o(t._ZN6VectorIP3PadE4copyEPKS1_S4_PS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Vector&lang;Pad*&rang;::copy(Pad*const *, Pad*const *, Pad**)
</UL>
<BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::resize()
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::remove(Pad**)
</UL>

<P><STRONG><a name="[601]"></a>Vector&lang;Pad*&rang;::find(Pad*const &)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pad.o(t._ZN6VectorIP3PadE4findERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Vector&lang;Pad*&rang;::find(Pad*const &)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::begin() const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::end() const
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::dedraw()
</UL>

<P><STRONG><a name="[602]"></a>Vector&lang;Pad*&rang;::erase(Pad**)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pad.o(t._ZN6VectorIP3PadE5eraseEPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Vector&lang;Pad*&rang;::erase(Pad**) &rArr; Vector&lang;Pad*&rang;::remove(Pad**) &rArr; Vector&lang;Pad*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::begin() const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::end() const
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::remove(Pad**)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::dedraw()
</UL>

<P><STRONG><a name="[693]"></a>Vector&lang;Pad*&rang;::remove(Pad**)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pad.o(t._ZN6VectorIP3PadE6removeEPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Vector&lang;Pad*&rang;::remove(Pad**) &rArr; Vector&lang;Pad*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::begin() const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::end() const
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::resize()
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::copy(Pad*const *, Pad*const *, Pad**)
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::erase(Pad**)
</UL>

<P><STRONG><a name="[695]"></a>Vector&lang;Pad*&rang;::resize()</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, pad.o(t._ZN6VectorIP3PadE6resizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Vector&lang;Pad*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::begin() const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::end() const
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::copy(Pad*const *, Pad*const *, Pad**)
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::push_back(Pad*const &)
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::remove(Pad**)
</UL>

<P><STRONG><a name="[600]"></a>Vector&lang;Pad*&rang;::push_back(Pad*const &)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pad.o(t._ZN6VectorIP3PadE9push_backERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Vector&lang;Pad*&rang;::push_back(Pad*const &) &rArr; Vector&lang;Pad*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::resize()
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::draw(Screen::Point)
</UL>

<P><STRONG><a name="[604]"></a>Vector&lang;Pad*&rang;::Vector()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pad.o(t._ZN6VectorIP3PadEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_pad_cpp
</UL>

<P><STRONG><a name="[775]"></a>Vector&lang;Pad*&rang;::Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pad.o(t._ZN6VectorIP3PadEC1Ev), UNUSED)

<P><STRONG><a name="[5f]"></a>Vector&lang;Pad*&rang;::~Vector()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pad.o(t._ZN6VectorIP3PadED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Vector&lang;Pad*&rang;::~Vector() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pad.o(.text)
</UL>
<P><STRONG><a name="[776]"></a>Vector&lang;Pad*&rang;::~Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, pad.o(t._ZN6VectorIP3PadED1Ev), UNUSED)

<P><STRONG><a name="[699]"></a>Vector&lang;Proc*&rang;::copy(Proc*const *, Proc*const *, Proc**)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, process.o(t._ZN6VectorIP4ProcE4copyEPKS1_S4_PS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Vector&lang;Proc*&rang;::copy(Proc*const *, Proc*const *, Proc**)
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::resize()
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::remove(Proc**)
</UL>

<P><STRONG><a name="[54d]"></a>Vector&lang;Proc*&rang;::find(Proc*const &)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, process.o(t._ZN6VectorIP4ProcE4findERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Vector&lang;Proc*&rang;::find(Proc*const &)
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::begin() const
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::end() const
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc::~Proc()
</UL>

<P><STRONG><a name="[54e]"></a>Vector&lang;Proc*&rang;::erase(Proc**)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, process.o(t._ZN6VectorIP4ProcE5eraseEPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Vector&lang;Proc*&rang;::erase(Proc**) &rArr; Vector&lang;Proc*&rang;::remove(Proc**) &rArr; Vector&lang;Proc*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::begin() const
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::end() const
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::remove(Proc**)
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc::~Proc()
</UL>

<P><STRONG><a name="[698]"></a>Vector&lang;Proc*&rang;::remove(Proc**)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, process.o(t._ZN6VectorIP4ProcE6removeEPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Vector&lang;Proc*&rang;::remove(Proc**) &rArr; Vector&lang;Proc*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::begin() const
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::end() const
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::resize()
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::copy(Proc*const *, Proc*const *, Proc**)
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::erase(Proc**)
</UL>

<P><STRONG><a name="[69a]"></a>Vector&lang;Proc*&rang;::resize()</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, process.o(t._ZN6VectorIP4ProcE6resizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Vector&lang;Proc*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::begin() const
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::end() const
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::copy(Proc*const *, Proc*const *, Proc**)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::push_back(Proc*const &)
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::remove(Proc**)
</UL>

<P><STRONG><a name="[54b]"></a>Vector&lang;Proc*&rang;::push_back(Proc*const &)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, process.o(t._ZN6VectorIP4ProcE9push_backERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Vector&lang;Proc*&rang;::push_back(Proc*const &) &rArr; Vector&lang;Proc*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::resize()
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc::Proc()
</UL>

<P><STRONG><a name="[548]"></a>Vector&lang;Proc*&rang;::Vector()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system.o(t._ZN6VectorIP4ProcEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_System_cpp
</UL>

<P><STRONG><a name="[777]"></a>Vector&lang;Proc*&rang;::Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, system.o(t._ZN6VectorIP4ProcEC1Ev), UNUSED)

<P><STRONG><a name="[5c]"></a>Vector&lang;Proc*&rang;::~Vector()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, system.o(t._ZN6VectorIP4ProcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Vector&lang;Proc*&rang;::~Vector() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.text)
</UL>
<P><STRONG><a name="[778]"></a>Vector&lang;Proc*&rang;::~Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, system.o(t._ZN6VectorIP4ProcED1Ev), UNUSED)

<P><STRONG><a name="[69c]"></a>Vector&lang;Widget*&rang;::copy(Widget*const *, Widget*const *, Widget**)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, pad.o(t._ZN6VectorIP6WidgetE4copyEPKS1_S4_PS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Vector&lang;Widget*&rang;::copy(Widget*const *, Widget*const *, Widget**)
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::resize()
</UL>

<P><STRONG><a name="[5f7]"></a>Vector&lang;Widget*&rang;::clear()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pad.o(t._ZN6VectorIP6WidgetE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Vector&lang;Widget*&rang;::clear() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::~Pad()
</UL>

<P><STRONG><a name="[69b]"></a>Vector&lang;Widget*&rang;::resize()</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, pad.o(t._ZN6VectorIP6WidgetE6resizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Vector&lang;Widget*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::begin() const
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::end() const
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::copy(Widget*const *, Widget*const *, Widget**)
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::push_back(Widget*const &)
</UL>

<P><STRONG><a name="[5fd]"></a>Vector&lang;Widget*&rang;::push_back(Widget*const &)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pad.o(t._ZN6VectorIP6WidgetE9push_backERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Vector&lang;Widget*&rang;::push_back(Widget*const &) &rArr; Vector&lang;Widget*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::resize()
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::add_widget(Widget*, Screen::Point)
</UL>

<P><STRONG><a name="[5ed]"></a>Vector&lang;Widget*&rang;::Vector()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pad.o(t._ZN6VectorIP6WidgetEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::Pad(unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[779]"></a>Vector&lang;Widget*&rang;::Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pad.o(t._ZN6VectorIP6WidgetEC1Ev), UNUSED)

<P><STRONG><a name="[5fa]"></a>Vector&lang;Widget*&rang;::~Vector()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pad.o(t._ZN6VectorIP6WidgetED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Vector&lang;Widget*&rang;::~Vector() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::~Pad()
</UL>

<P><STRONG><a name="[77a]"></a>Vector&lang;Widget*&rang;::~Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, pad.o(t._ZN6VectorIP6WidgetED1Ev), UNUSED)

<P><STRONG><a name="[69f]"></a>Vector&lang;Touchable*&rang;::copy(Touchable*const *, Touchable*const *, Touchable**)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, touchable.o(t._ZN6VectorIP9TouchableE4copyEPKS1_S4_PS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Vector&lang;Touchable*&rang;::copy(Touchable*const *, Touchable*const *, Touchable**)
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::remove(Touchable**)
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::resize()
</UL>

<P><STRONG><a name="[5cc]"></a>Vector&lang;Touchable*&rang;::find(Touchable*const &)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, touchable.o(t._ZN6VectorIP9TouchableE4findERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Vector&lang;Touchable*&rang;::find(Touchable*const &)
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::begin() const
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::end() const
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::~Touchable()
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::Touchable(Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::set_touch_vector(Vector&lang;Touchable*&rang;*)
</UL>

<P><STRONG><a name="[5cd]"></a>Vector&lang;Touchable*&rang;::erase(Touchable**)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, touchable.o(t._ZN6VectorIP9TouchableE5eraseEPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Vector&lang;Touchable*&rang;::erase(Touchable**) &rArr; Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::begin() const
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::end() const
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::remove(Touchable**)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::~Touchable()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::set_touch_vector(Vector&lang;Touchable*&rang;*)
</UL>

<P><STRONG><a name="[69e]"></a>Vector&lang;Touchable*&rang;::remove(Touchable**)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, touchable.o(t._ZN6VectorIP9TouchableE6removeEPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Vector&lang;Touchable*&rang;::remove(Touchable**) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::begin() const
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::end() const
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::copy(Touchable*const *, Touchable*const *, Touchable**)
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::resize()
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::erase(Touchable**)
</UL>

<P><STRONG><a name="[6a0]"></a>Vector&lang;Touchable*&rang;::resize()</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, touchpad.o(t._ZN6VectorIP9TouchableE6resizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::end() const
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::copy(Touchable*const *, Touchable*const *, Touchable**)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::push_back(Touchable*const &)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::remove(Touchable**)
</UL>

<P><STRONG><a name="[5ce]"></a>Vector&lang;Touchable*&rang;::push_back(Touchable*const &)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, touchable.o(t._ZN6VectorIP9TouchableE9push_backERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Vector&lang;Touchable*&rang;::push_back(Touchable*const &) &rArr; Vector&lang;Touchable*&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::resize()
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window::Window(String, unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::Touchable(Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::set_touch_vector(Vector&lang;Touchable*&rang;*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::add_widget(Widget*, Screen::Point)
</UL>

<P><STRONG><a name="[545]"></a>Vector&lang;Touchable*&rang;::Vector()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system.o(t._ZN6VectorIP9TouchableEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_System_cpp
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::TouchPad(unsigned short, unsigned short, unsigned, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
</UL>

<P><STRONG><a name="[77b]"></a>Vector&lang;Touchable*&rang;::Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, system.o(t._ZN6VectorIP9TouchableEC1Ev), UNUSED)

<P><STRONG><a name="[5a]"></a>Vector&lang;Touchable*&rang;::~Vector()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, system.o(t._ZN6VectorIP9TouchableED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Vector&lang;Touchable*&rang;::~Vector() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::~TouchPad()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.text)
</UL>
<P><STRONG><a name="[77c]"></a>Vector&lang;Touchable*&rang;::~Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, system.o(t._ZN6VectorIP9TouchableED1Ev), UNUSED)

<P><STRONG><a name="[6a2]"></a>Vector&lang;void(*)()&rang;::copy(void(*const *)(), void(*const *)(), void(**)())</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, process.o(t._ZN6VectorIPFvvEE4copyEPKS1_S4_PS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Vector&lang;void(*)()&rang;::copy(void(*const *)(), void(*const *)(), void(**)())
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::resize()
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::remove(void(**)())
</UL>

<P><STRONG><a name="[553]"></a>Vector&lang;void(*)()&rang;::find(void(*const &)())</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, process.o(t._ZN6VectorIPFvvEE4findERKS1_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::begin() const
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::end() const
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc::delete_thread(void(*)())
</UL>

<P><STRONG><a name="[554]"></a>Vector&lang;void(*)()&rang;::erase(void(**)())</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, process.o(t._ZN6VectorIPFvvEE5eraseEPS1_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::begin() const
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::end() const
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::remove(void(**)())
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc::delete_thread(void(*)())
</UL>

<P><STRONG><a name="[6a1]"></a>Vector&lang;void(*)()&rang;::remove(void(**)())</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, process.o(t._ZN6VectorIPFvvEE6removeEPS1_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::begin() const
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::end() const
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::resize()
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::copy(void(*const *)(), void(*const *)(), void(**)())
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::erase(void(**)())
</UL>

<P><STRONG><a name="[6a3]"></a>Vector&lang;void(*)()&rang;::resize()</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, process.o(t._ZN6VectorIPFvvEE6resizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Vector&lang;void(*)()&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::begin() const
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::end() const
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::copy(void(*const *)(), void(*const *)(), void(**)())
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::push_back(void(*const &)())
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::remove(void(**)())
</UL>

<P><STRONG><a name="[551]"></a>Vector&lang;void(*)()&rang;::push_back(void(*const &)())</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, process.o(t._ZN6VectorIPFvvEE9push_backERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Vector&lang;void(*)()&rang;::push_back(void(*const &)()) &rArr; Vector&lang;void(*)()&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::resize()
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc::add_thread(void(*)())
</UL>

<P><STRONG><a name="[54a]"></a>Vector&lang;void(*)()&rang;::Vector()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, process.o(t._ZN6VectorIPFvvEEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc::Proc()
</UL>

<P><STRONG><a name="[77d]"></a>Vector&lang;void(*)()&rang;::Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, process.o(t._ZN6VectorIPFvvEEC1Ev), UNUSED)

<P><STRONG><a name="[54f]"></a>Vector&lang;void(*)()&rang;::~Vector()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, process.o(t._ZN6VectorIPFvvEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Vector&lang;void(*)()&rang;::~Vector() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc::~Proc()
</UL>

<P><STRONG><a name="[77e]"></a>Vector&lang;void(*)()&rang;::~Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, process.o(t._ZN6VectorIPFvvEED1Ev), UNUSED)

<P><STRONG><a name="[6a5]"></a>Vector&lang;char&rang;::copy(const char*, const char*, char*)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, string.o(t._ZN6VectorIcE4copyEPKcS2_Pc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Vector&lang;char&rang;::copy(const char*, const char*, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::resize()
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::remove(char*)
</UL>

<P><STRONG><a name="[5b1]"></a>Vector&lang;char&rang;::clear()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usermain.o(t._ZN6VectorIcE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Vector&lang;char&rang;::clear() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(String&)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator ==(const char*)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::~TextBox()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::~Text()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::~Button()
</UL>

<P><STRONG><a name="[5ad]"></a>Vector&lang;char&rang;::erase(char*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, string.o(t._ZN6VectorIcE5eraseEPc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::begin() const
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::end() const
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::remove(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator +(String&)
</UL>

<P><STRONG><a name="[6a4]"></a>Vector&lang;char&rang;::remove(char*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, string.o(t._ZN6VectorIcE6removeEPc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::begin() const
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::end() const
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::resize()
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::copy(const char*, const char*, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::erase(char*)
</UL>

<P><STRONG><a name="[6a6]"></a>Vector&lang;char&rang;::resize()</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, string.o(t._ZN6VectorIcE6resizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Vector&lang;char&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::begin() const
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::end() const
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::copy(const char*, const char*, char*)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::push_back(const char&)
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::remove(char*)
</UL>

<P><STRONG><a name="[5aa]"></a>Vector&lang;char&rang;::push_back(const char&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, string.o(t._ZN6VectorIcE9push_backERKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Vector&lang;char&rang;::push_back(const char&) &rArr; Vector&lang;char&rang;::resize() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::resize()
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(String&)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator +(String&)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*, const char*)
</UL>

<P><STRONG><a name="[5a5]"></a>Vector&lang;char&rang;::Vector()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, string.o(t._ZN6VectorIcEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*, const char*)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String()
</UL>

<P><STRONG><a name="[77f]"></a>Vector&lang;char&rang;::Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, string.o(t._ZN6VectorIcEC1Ev), UNUSED)

<P><STRONG><a name="[5b2]"></a>Vector&lang;char&rang;::~Vector()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usermain.o(t._ZN6VectorIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Vector&lang;char&rang;::~Vector() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator ==(const char*)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBox::~TextBox()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text::~Text()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::~Button()
</UL>

<P><STRONG><a name="[780]"></a>Vector&lang;char&rang;::~Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, usermain.o(t._ZN6VectorIcED1Ev), UNUSED)

<P><STRONG><a name="[5af]"></a>Vector&lang;char&rang;::operator ==(const Vector&lang;char&rang;&)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, string.o(t._ZN6VectorIcEeqERKS0_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::begin() const
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::end() const
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator ==(String&)
</UL>

<P><STRONG><a name="[5c3]"></a>Vector&lang;Screen::Point&rang;::end() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, paintable.o(t._ZNK6VectorIN6Screen5PointEE3endEv))
<BR><BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_rectangle(Screen::Point, unsigned short, unsigned short, unsigned, unsigned short)
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Screen::Point&rang;::resize()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paintable::idraw_lines(Screen::Point*, Screen::Point*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[692]"></a>Vector&lang;System::Event&rang;::end() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system.o(t._ZNK6VectorIN6System5EventEE3endEv))
<BR><BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::resize()
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::clear(System::Event*)
</UL>

<P><STRONG><a name="[688]"></a>Vector&lang;System::Event&rang;::begin() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system.o(t._ZNK6VectorIN6System5EventEE5beginEv))
<BR><BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::resize()
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;System::Event&rang;::clear(System::Event*)
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue&lang;System::Event&rang;::arrange()
</UL>

<P><STRONG><a name="[5ef]"></a>Vector&lang;Pad*&rang;::end() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pad.o(t._ZNK6VectorIP3PadE3endEv))
<BR><BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::resize()
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::remove(Pad**)
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::erase(Pad**)
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::find(Pad*const &)
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::redraw_all()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::dedraw()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::draw(Screen::Point)
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::if_covered(Screen::Point)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::active()
</UL>

<P><STRONG><a name="[5f4]"></a>Vector&lang;Pad*&rang;::rend() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pad.o(t._ZNK6VectorIP3PadE4rendEv))
<BR><BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::redraw_all()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::active()
</UL>

<P><STRONG><a name="[5f0]"></a>Vector&lang;Pad*&rang;::begin() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pad.o(t._ZNK6VectorIP3PadE5beginEv))
<BR><BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::resize()
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::remove(Pad**)
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::erase(Pad**)
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::find(Pad*const &)
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::redraw_all()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::dedraw()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::draw(Screen::Point)
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::if_covered(Screen::Point)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::active()
</UL>

<P><STRONG><a name="[5f3]"></a>Vector&lang;Pad*&rang;::rbegin() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pad.o(t._ZNK6VectorIP3PadE6rbeginEv))
<BR><BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::redraw_all()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::active()
</UL>

<P><STRONG><a name="[697]"></a>Vector&lang;Proc*&rang;::end() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, process.o(t._ZNK6VectorIP4ProcE3endEv))
<BR><BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::resize()
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::remove(Proc**)
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::erase(Proc**)
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::find(Proc*const &)
</UL>

<P><STRONG><a name="[696]"></a>Vector&lang;Proc*&rang;::begin() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, process.o(t._ZNK6VectorIP4ProcE5beginEv))
<BR><BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::resize()
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::remove(Proc**)
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::erase(Proc**)
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::find(Proc*const &)
</UL>

<P><STRONG><a name="[5f6]"></a>Vector&lang;Widget*&rang;::end() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pad.o(t._ZNK6VectorIP6WidgetE3endEv))
<BR><BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::resize()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::update(void*)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::update_widgets_rela_position()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::~Pad()
</UL>

<P><STRONG><a name="[5f5]"></a>Vector&lang;Widget*&rang;::begin() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pad.o(t._ZNK6VectorIP6WidgetE5beginEv))
<BR><BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Widget*&rang;::resize()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::update(void*)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::update_widgets_rela_position()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad::~Pad()
</UL>

<P><STRONG><a name="[5d0]"></a>Vector&lang;Touchable*&rang;::end() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, touchable.o(t._ZNK6VectorIP9TouchableE3endEv))
<BR><BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::remove(Touchable**)
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::erase(Touchable**)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::find(Touchable*const &)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::~Touchable()
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchable::Touchable(Vector&lang;Touchable*&rang;*, void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*), void(*)(Screen::Point, Touchable*, Touchable*))
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::resize()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPad::execute(Touchable*, Touchable*)
</UL>

<P><STRONG><a name="[69d]"></a>Vector&lang;Touchable*&rang;::begin() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchable.o(t._ZNK6VectorIP9TouchableE5beginEv))
<BR><BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::remove(Touchable**)
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::erase(Touchable**)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::find(Touchable*const &)
</UL>

<P><STRONG><a name="[556]"></a>Vector&lang;void(*)()&rang;::end() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, process.o(t._ZNK6VectorIPFvvEE3endEv))
<BR><BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::resize()
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::remove(void(**)())
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::erase(void(**)())
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::find(void(*const &)())
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc::do_once()
</UL>

<P><STRONG><a name="[555]"></a>Vector&lang;void(*)()&rang;::begin() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, process.o(t._ZNK6VectorIPFvvEE5beginEv))
<BR><BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::resize()
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::remove(void(**)())
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::erase(void(**)())
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;void(*)()&rang;::find(void(*const &)())
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc::do_once()
</UL>

<P><STRONG><a name="[5a7]"></a>Vector&lang;char&rang;::end() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, string.o(t._ZNK6VectorIcE3endEv))
<BR><BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::operator ==(const Vector&lang;char&rang;&)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::resize()
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::remove(char*)
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::erase(char*)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator +(String&)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::end() const
</UL>

<P><STRONG><a name="[5a9]"></a>Vector&lang;char&rang;::begin() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, string.o(t._ZNK6VectorIcE5beginEv))
<BR><BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::operator ==(const Vector&lang;char&rang;&)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::resize()
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::remove(char*)
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;char&rang;::erase(char*)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::c_str()
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::begin() const
</UL>

<P><STRONG><a name="[511]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_init(USART_BAUD_RATE)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_init(USART_BAUD_RATE)
</UL>

<P><STRONG><a name="[6a7]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[591]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_line(short, short, short, short, unsigned)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::distance(Screen::Point, Screen::Point)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::update(void*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::update_speed()
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[6aa]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[6ad]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[6b1]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[590]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_line(short, short, short, short, unsigned)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char)
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::Slider(int, int, Slider::DIR, int, int, unsigned, unsigned)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::update_speed()
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::get_angle(LenCar::DIR)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[6af]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[5d2]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[6b0]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[55b]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::conversion(Screen::Point*)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::distance(Screen::Point, Screen::Point)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::update(void*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::update_speed()
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[6b2]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[592]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_line(short, short, short, short, unsigned)
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_oval(unsigned short, unsigned short, Screen::Point, unsigned)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_circle(Screen::Point, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[6b3]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_in_range_circle(int, int, int, int, int)
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_line(short, short, short, short, unsigned)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(double, int)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::distance(Screen::Point, Screen::Point)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_empty_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_circle(Screen::Point, unsigned short, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::update(void*)
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::Slider(int, int, Slider::DIR, int, int, unsigned, unsigned)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::update_speed()
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::get_angle(LenCar::DIR)
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[781]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[67a]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[782]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[171]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_in_range_circle(int, int, int, int, int)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::update_speed()
</UL>

<P><STRONG><a name="[6b4]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[6b7]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[55a]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::draw_line(short, short, short, short, unsigned)
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::conversion(Screen::Point*)
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_oval(unsigned short, unsigned short, Screen::Point, unsigned)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_line(Screen::Point, Screen::Point, unsigned, unsigned char)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slider::update(void*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::update_speed()
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::get_angle(LenCar::DIR)
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[6b5]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[6a9]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[6ac]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[394]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_div(float)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div(float)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div(float)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::update_speed()
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[6b6]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[5d6]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_oval(unsigned short, unsigned short, Screen::Point, unsigned)
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[6b8]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[680]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[623]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LenCar::update_speed()
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[6ba]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[393]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_put_float(float)
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_put_float(float)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_div(float)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div(float)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div(float)
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::conversion(Screen::Point*)
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_oval(unsigned short, unsigned short, Screen::Point, unsigned)
</UL>

<P><STRONG><a name="[6bb]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[395]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_div()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_div(float)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_div()
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div(float)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_div()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div(float)
</UL>

<P><STRONG><a name="[6bd]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[398]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_div()
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_div()
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_div()
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::conversion(Screen::Point*)
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_oval(unsigned short, unsigned short, Screen::Point, unsigned)
</UL>

<P><STRONG><a name="[6bf]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[38f]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_div(float)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div(float)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div(float)
</UL>

<P><STRONG><a name="[6c0]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[390]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_div()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_div(float)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_div()
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div(float)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_div()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div(float)
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843::conversion(Screen::Point*)
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_oval(unsigned short, unsigned short, Screen::Point, unsigned)
</UL>

<P><STRONG><a name="[783]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[5d5]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic::draw_oval(unsigned short, unsigned short, Screen::Point, unsigned)
</UL>

<P><STRONG><a name="[784]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[392]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_div(float)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div(float)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div(float)
</UL>

<P><STRONG><a name="[6c1]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[6bc]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[6a8]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[391]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_div(float)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div(float)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div(float)
</UL>

<P><STRONG><a name="[6c2]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[785]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[6c4]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[109]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[6ae]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[67b]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[6c5]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f7]"></a>__sti___10_System_cpp</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___10_System_cpp &rArr; Queue&lang;System::Event&rang;::Queue() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Touchable*&rang;::Vector()
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Proc*&rang;::Vector()
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue&lang;System::Event&rang;::Queue()
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.init_array)
</UL>
<P><STRONG><a name="[f8]"></a>__sti___11_ads7843_cpp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ads7843.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ads7843.o(.init_array)
</UL>
<P><STRONG><a name="[f9]"></a>__sti___10_screen_cpp</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __sti___10_screen_cpp &rArr; Screen::RectType::RectType(Screen::Point, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::RectType::RectType(Screen::Point, int, int)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::width()
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::high()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.init_array)
</UL>
<P><STRONG><a name="[fa]"></a>__sti___8_font_cpp</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __sti___8_font_cpp &rArr; Screen::RectType::RectType(Screen::Point, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::RectType::RectType(Screen::Point, int, int)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::width()
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289::high()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> font.o(.init_array)
</UL>
<P><STRONG><a name="[fb]"></a>__sti___9_color_cpp</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, color.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __sti___9_color_cpp &rArr; Color::RGB(int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::RGB(int, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color.o(.init_array)
</UL>
<P><STRONG><a name="[fc]"></a>__sti___7_pad_cpp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___7_pad_cpp &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Pad*&rang;::Vector()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pad.o(.init_array)
</UL>
<P><STRONG><a name="[fd]"></a>__sti___12_touchPad_cpp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, touchpad.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> touchpad.o(.init_array)
</UL>
<P><STRONG><a name="[fe]"></a>__sti___10_window_cpp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, window.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___10_window_cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Point::Point(short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.init_array)
</UL>
<P><STRONG><a name="[66]"></a>tbc_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtti.o(i._Z12tbc_downcastPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tbc_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*) &rArr; std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtti.o(i.__dynamic_cast)
</UL>
<P><STRONG><a name="[67]"></a>tbc_post_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtti.o(i._Z17tbc_post_downcastPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tbc_post_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*) &rArr; std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtti.o(i.__dynamic_cast)
</UL>
<P><STRONG><a name="[66b]"></a>traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, rtti.o(i._Z21traverse_base_classesPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*) &rArr;  traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
</UL>

<P><STRONG><a name="[66d]"></a>find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, rtti.o(i._Z23find_base_class_at_addrPvS_PKSt9type_infoS2_Pi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*) &rArr;  find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
</UL>

<P><STRONG><a name="[66e]"></a>derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)</STRONG> (Thumb, 482 bytes, Stack size 96 bytes, rtti.o(i._Z28derived_to_base_conversion_rPvPS_PKSt9type_infoS3_jPiiPS3_P19a_result_virtualityS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
</UL>

<P><STRONG><a name="[6b9]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[6ab]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[6c3]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[6be]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[641]"></a>_fp_digits</STRONG> (Thumb, 426 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[61]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
