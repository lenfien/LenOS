<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [D:\Work\Projects\Cortex-M3\STM32F103ZET6_LIB\current\STM32F103ZET6\stm32f103.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image D:\Work\Projects\Cortex-M3\STM32F103ZET6_LIB\current\STM32F103ZET6\stm32f103.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Thu Jun 14 16:43:56 2012
<BR><P>
<H3>Maximum Stack Usage =        408 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; EXAM_init &rArr; WINDOW_show_dialog_box &rArr; BUTTON_draw_button &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[460]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC1_2_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">ADC3_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40d]">BUTTON_BtnAdd_hold_handler</a> from adconverter.o(.text) referenced from adconverter.o(.text)
 <LI><a href="#[40c]">BUTTON_BtnSub_hold_handler</a> from adconverter.o(.text) referenced from adconverter.o(.text)
 <LI><a href="#[432]">BUTTON_btn1_click_handler</a> from button.o(.text) referenced from button.o(.text)
 <LI><a href="#[433]">BUTTON_btn1_hold_handler</a> from button.o(.text) referenced from button.o(.text)
 <LI><a href="#[434]">BUTTON_btn2_click_handler</a> from button.o(.text) referenced from button.o(.text)
 <LI><a href="#[435]">BUTTON_btn2_hold_handler</a> from button.o(.text) referenced from button.o(.text)
 <LI><a href="#[41a]">BtHandler_adConverter</a> from exam.o(.text) referenced from exam.o(.text)
 <LI><a href="#[419]">BtHandler_drawLine</a> from exam.o(.text) referenced from exam.o(.text)
 <LI><a href="#[418]">BtHandler_touchTest</a> from exam.o(.text) referenced from exam.o(.text)
 <LI><a href="#[c]">BusFault_Handler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">CAN1_RX1_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">CAN1_SCE_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[407]">DAConverter_click_handler</a> from daconverter.o(.text) referenced from daconverter.o(.text)
 <LI><a href="#[406]">DAConverter_hold_handler</a> from daconverter.o(.text) referenced from daconverter.o(.text)
 <LI><a href="#[404]">DAConverter_release_handler</a> from daconverter.o(.text) referenced from daconverter.o(.text)
 <LI><a href="#[1d]">DMA1_Channel1_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel2_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel3_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">DMA1_Channel4_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">DMA1_Channel5_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">DMA1_Channel6_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">DMA1_Channel7_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">DMA2_Channel1_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">DMA2_Channel2_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel3_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel4_5_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">EXTI0_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">EXTI15_10_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">EXTI1_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">EXTI2_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">EXTI3_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">EXTI4_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">EXTI9_5_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">FSMC_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">HardFault_Handler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">I2C1_ER_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">I2C1_EV_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">I2C2_ER_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">I2C2_EV_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">MemManage_Handler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">NMI_Handler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">PVD_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">RCC_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">RTCAlarm_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">RTC_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">SDIO_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">SPI1_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">SPI2_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">SPI3_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">SysTick_Handler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">SystemInit</a> from systeminit.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[14]">TAMPER_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM1_BRK_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">TIM1_CC_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">TIM1_TRG_COM_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM1_UP_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">TIM2_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">TIM3_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">TIM4_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM5_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">TIM6_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">TIM7_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">TIM8_BRK_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM8_CC_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM8_TRG_COM_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">TIM8_UP_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">UART4_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">UART5_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">USART1_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">USART2_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">USART3_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">USBWakeUp_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">USB_HP_CAN1_TX_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">USB_LP_CAN1_RX0_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">UsageFault_Handler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43a]">WINDOW_btnHandler_no</a> from windows.o(.text) referenced from windows.o(.text)
 <LI><a href="#[43b]">WINDOW_btnHandler_ok</a> from windows.o(.text) referenced from windows.o(.text)
 <LI><a href="#[439]">WINDOW_btnHandler_yes</a> from windows.o(.text) referenced from windows.o(.text)
 <LI><a href="#[12]">WWDG_IRQHandler</a> from interruptservice.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[52]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[51]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[50]">_sputc</a> from _sputc.o(.text) referenced from c89vsprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[53]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[54]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[56]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[483]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[484]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[57]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[485]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[58]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[444]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5a]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[5c]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[5e]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[5f]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[486]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[487]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[60]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[62]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[63]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[64]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[66]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[68]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[6a]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[6b]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[6c]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[6e]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[488]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[70]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[72]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[74]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[76]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[489]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[78]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[7a]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[48a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[48b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[48c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[48d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[48e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[48f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[490]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[491]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[492]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[493]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[494]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[495]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[496]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[497]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[498]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[499]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[49a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[49b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[49c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[88]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[49d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[49e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[49f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[4a0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[4a1]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[4a2]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[55]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[4a3]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[81]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[83]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[4a4]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[84]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; EXAM_init &rArr; WINDOW_show_dialog_box &rArr; BUTTON_draw_button &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4a5]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[445]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[87]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[4a6]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[89]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[c4]"></a>__set_bit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, com_bit_operations.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_clear_CGIFx
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_UG
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_UG
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1G
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1G
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2G
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2G
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3G
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3G
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4G
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4G
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_TG
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_TG
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_MSM
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_MSM
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_disable_EVO
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_enable_EVO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_CAL
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_RSTCAL
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JSWSTART
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_SWSTART
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_clear_PRx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_clear_CTEIFx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_clear_CTCIFx
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_clear_CHTIFx
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_SBK
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_SBK
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_SBK
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_RMVF
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_BDRST
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM2RST
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM3RST
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM4RST
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM5RST
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM6RST
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM7RST
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM12RST
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM13RST
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM14RST
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_WWDGRST
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SPI2RST
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SPI3RST
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USART2RST
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USART3RST
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_UART4RST
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_UART5RST
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_I2C1RST
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_I2C2RST
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USBRST
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_CANRST
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_BKPRST
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PWRRST
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_DACRST
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIORST
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPARST
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBRST
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPCRST
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPDRST
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPERST
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPFRST
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPGRST
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADC1RST
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADC2RST
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM1RST
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SPI1RST
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM8RST
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USART1RST
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADC3RST
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM9RST
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM10RST
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM11RST
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_LSIRDYC
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_LSERDYC
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSIRDYC
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSERDYC
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLRDYC
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_CSSC
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_SWIERx
</UL>

<P><STRONG><a name="[99]"></a>__clear_bit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, com_bit_operations.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_CC1F
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_CC2F
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC2F
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_CC3F
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC3F
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_CC4F
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC4F
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_TIF
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_TIF
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_CC1OF
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC1OF
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_CC2OF
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC2OF
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_CC3OF
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC3OF
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_CC4OF
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC4OF
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_clear_AWD
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_clear_JEOC
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_clear_JSTRT
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_clear_STRT
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_UIF
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_UIF
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC1F
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_clear_EOC
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_clear_IDLE
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_clear_IDLE
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_clear_IDLE
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_clear_RXNE
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_clear_RXNE
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_clear_RXNE
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_clear_TC
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_clear_TC
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_clear_TC
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_clear_TXE
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_clear_TXE
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_clear_TXE
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_clear_LBD
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_clear_LBD
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_clear_LBD
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_clear_CTS
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_clear_CTS
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_clear_CTS
</UL>

<P><STRONG><a name="[96]"></a>__get_bit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, com_bit_operations.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_get_GIFx
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_CC1F
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_CC2F
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC2F
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_CC3F
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC3F
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_CC4F
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC4F
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_TIF
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_TIF
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_CC1OF
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC1OF
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_CC2OF
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC2OF
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_CC3OF
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC3OF
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_CC4OF
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC4OF
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_CAL
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_RSTCAL
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_AWD
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_JEOC
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_JSTRT
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_STRT
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_RXNE
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_RXNE
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_UIF
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_UIF
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC1F
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_get_PRx
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_get_TEIFx
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_get_TCIFx
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_get_HTIFx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_EOC
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_PE
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_PE
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_PE
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_FE
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_FE
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_FE
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_NE
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_NE
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_NE
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_ORE
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_ORE
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_ORE
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_IDLE
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_IDLE
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_IDLE
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_RXNE
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_TC
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_TC
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_TC
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_TXE
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_TXE
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_TXE
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_LBD
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_LBD
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_LBD
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_CTS
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_CTS
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_CTS
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_ALR
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_CNT
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_PRL
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_LSIRDY
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_PINRSTF
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_PORRSTF
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_SFTRSTF
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_IWDGRSTF
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_WWDGRSTF
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_LPWRRSTF
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_LSERDY
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_LSIRDYF
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_LSERDYF
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_HSIRDYF
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_HSERDYF
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_PLLRDYF
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_CSSF
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_HSIRDY
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_HSERDY
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_PLLRDY
</UL>

<P><STRONG><a name="[4a7]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[85]"></a>main</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = main &rArr; EXAM_init &rArr; WINDOW_show_dialog_box &rArr; BUTTON_draw_button &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_show_dialog_box
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LENFIEN_copyright
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXAM_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[90]"></a>LENFIEN_draw_logo</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lenfien.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = LENFIEN_draw_logo &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_font_color
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LENFIEN_logo_animation
</UL>

<P><STRONG><a name="[93]"></a>LENFIEN_logo_animation</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lenfien.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = LENFIEN_logo_animation &rArr; LENFIEN_draw_logo &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LENFIEN_draw_logo
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_update_UI
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8b]"></a>LENFIEN_copyright</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lenfien.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = LENFIEN_copyright &rArr; WINDOW_show_dialog_box &rArr; BUTTON_draw_button &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_show_dialog_box
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interruptservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; LENFIEN_logo_animation &rArr; LENFIEN_draw_logo &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LENFIEN_logo_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, interruptservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = RTC_IRQHandler &rArr; LENFIEN_logo_animation &rArr; LENFIEN_draw_logo &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_SECIE
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_disable_interrupt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LENFIEN_logo_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, interruptservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; ADConverter_update_UI &rArr; LENFIEN_logo_animation &rArr; LENFIEN_draw_logo &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_on_LED3
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_on_LED2
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_MA
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_EN
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_get_TEIFx
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_get_TCIFx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_get_MA
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_get_HTIFx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_clear_CTEIFx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_clear_CTCIFx
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_clear_CHTIFx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_update_UI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, interruptservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ADC1_2_IRQHandler &rArr; ADConverter_update_UI &rArr; LENFIEN_logo_animation &rArr; LENFIEN_draw_logo &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_UIE
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_disable_interrupt
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_update_UI
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_record_ADValue
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_EOC
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_DATA
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_clear_EOC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, interruptservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = EXTI9_5_IRQHandler &rArr; BUTTON_process &rArr; BUTTON_execute_handlers &rArr; BUTTON_update_press_effects &rArr; BUTTON_update_press_effect &rArr; BUTTON_draw_release_effect &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_disable_interrupt
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_get_PRx
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_clear_PRx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_process
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_update_state
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, interruptservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM1_UP_IRQHandler &rArr; ADC1_start_conversion &rArr; ADC1_set_ADON &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_UIE
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_UIF
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_UIF
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_on_LED1
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_start_conversion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, interruptservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM1_CC_IRQHandler &rArr; LED_turn_on_LED1 &rArr; GPIO_send_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_get_CC1F
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_clear_CC1F
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_on_LED1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, interruptservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler &rArr; USART1_get_RXNE
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_DR
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_RXNE
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_DR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interruptservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_IRQHandler &rArr; USART2_get_RXNE
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_RXNE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, interruptservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM8_UP_IRQHandler &rArr; LED_turn_on_LED1 &rArr; GPIO_send_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_get_UIF
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_clear_UIF
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_on_LED1
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_off_LED1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ADC3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>FSMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SDIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interruptservice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SystemInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, systeminit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SystemInit &rArr; LED_init &rArr; GPIO_configure &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_on_all
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_off_all
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[460]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c3]"></a>__set_bits</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, com_bit_operations.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_PSIZE
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_MSIZE
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_PL
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_IC3PSC
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_IC3PSC
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_IC3F
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_IC3F
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_IC4PSC
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_IC4PSC
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_IC4F
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_IC4F
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_IC1PSC
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_IC1PSC
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_IC1F
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_IC1F
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_IC2PSC
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_IC2PSC
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_IC2F
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_IC2F
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC3M
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC3M
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC4M
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC4M
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC1M
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC1M
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC2M
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC2M
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3S
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3S
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4S
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4S
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1S
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1S
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2S
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2S
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_SMS
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_SMS
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_TS
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_TS
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ETF
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ETF
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ETPS
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ETPS
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_MMS
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_MMS
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CMS
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CMS
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_EXTI_set_entry
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_USART3
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_TIM1
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_TIM2
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_TIM3
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_CAN
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_SWJ
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_enable_EVO
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JSQx
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JL
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_SQRx
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_L
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_LT
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_HT
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JPFFSETx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_SMPx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JEXTSEL
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_EXTSEL
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_AWDCH
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_DISCNUM
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_DUALMOD
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bits
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TSEL1
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_WAVE1
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_MAMP1
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TSEL2
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_WAVE2
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_MAMP2
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_PSC
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_PSC
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_PSC
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_GT
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_GT
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_GT
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_ADD
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_ADD
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_ADD
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_STOP
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_STOP
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_STOP
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_ALR
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_RTCSEL
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SW
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HPRE
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PPRE1
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PPRE2
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADCPRE
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLMUL
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_MCO
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSITRIM
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_W_set_ADDSET
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_W_set_ADDSET
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_W_set_ADDSET
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_W_set_ADDSET
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_W_set_ADDHLD
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_W_set_ADDHLD
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_W_set_ADDHLD
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_W_set_ADDHLD
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_W_set_DATAST
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_W_set_DATAST
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_W_set_DATAST
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_W_set_DATAST
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_W_set_BUSTURN
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_W_set_BUSTURN
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_W_set_BUSTURN
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_W_set_BUSTURN
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_W_set_CLKDIV
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_W_set_CLKDIV
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_W_set_CLKDIV
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_W_set_CLKDIV
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_W_set_DATLAT
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_W_set_DATLAT
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_W_set_DATLAT
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_W_set_DATLAT
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_W_set_ACCMOD
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_W_set_ACCMOD
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_W_set_ACCMOD
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_W_set_ACCMOD
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_ADDSET
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_ADDSET
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_ADDSET
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_ADDSET
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_ADDHLD
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_ADDHLD
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_ADDHLD
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_ADDHLD
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_DATAST
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_DATAST
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_DATAST
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_DATAST
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_BUSTURN
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_BUSTURN
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_BUSTURN
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_BUSTURN
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_CLKDIV
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_CLKDIV
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_CLKDIV
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_CLKDIV
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_DATLAT
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_DATLAT
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_DATLAT
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_DATLAT
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_ACCMOD
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_ACCMOD
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_ACCMOD
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_ACCMOD
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_MTYP
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_MTYP
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_MTYP
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_MTYP
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_MWID
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_MWID
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_MWID
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_MWID
</UL>

<P><STRONG><a name="[c5]"></a>__clear_bits</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, com_bit_operations.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[c6]"></a>__get_bits</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, com_bit_operations.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __get_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_ADC2DATA
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_JDATAx
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_LT
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_HT
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_DISNUM
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_DUALMOD
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_DATA
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_div
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_div
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_div
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_DIV
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_SWS
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_HSICAL
</UL>

<P><STRONG><a name="[c7]"></a>__write_bit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, com_bit_operations.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_PINC
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_MINC
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_MEM2MEM
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_MOE
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_MOE
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1E
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1E
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1P
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1P
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1NE
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1NE
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1NP
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1NP
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2E
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2E
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2P
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2P
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2NE
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2NE
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2NP
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2NP
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3E
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3E
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3P
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3P
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3NE
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3NE
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3NP
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3NP
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4E
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4E
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4P
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4P
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC3PE
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC3PE
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC3CE
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC3CE
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC4PE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC4PE
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC4CE
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC4CE
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC1PE
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC1PE
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC1CE
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC1CE
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC2PE
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC2PE
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC2CE
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC2CE
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_UIE
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1IE
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1IE
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2IE
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2IE
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3IE
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3IE
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4IE
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4IE
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_TIE
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_TIE
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_UDE
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_UDE
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1DE
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1DE
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2DE
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2DE
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3DE
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3DE
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4DE
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4DE
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_TDE
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_TDE
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ECE
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ECE
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ETP
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ETP
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCDS
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCDS
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_TI1S
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_TI1S
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CEN
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CEN
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_UDIS
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_UDIS
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_URS
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_URS
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OPM
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OPM
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_DIR
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_DIR
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ARPE
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ARPE
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_SPI1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_I2C1
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_USART1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_USART2
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_TIM4
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_PD01
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_TIM5CH4
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_ADC1_INJ
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_ADC1_REG
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_ADC2_INJ
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_remap_ADC2_REG
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_ADON
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_CONT
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_DMA
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_ALIGN
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JEXTTRIG
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_EXTTRIG
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_TSVREFE
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_EOCIE
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_AWDIE
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JEOIE
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_SCAN
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_AWDSGL
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JAUTO
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_DISCEN
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JDISCEN
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_JAWDEN
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_AWDEN
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_UIE
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_SECIE
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_EN
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_SWTRIG1
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_SWTRIG2
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_EN1
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_BOFF1
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TEN1
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DMAEN1
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_EN2
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_BOFF2
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TEN2
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DMAEN2
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_EIE
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_EIE
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_EIE
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_IREN
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_IREN
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_IREN
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_IRLP
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_IRLP
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_IRLP
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_HDSEL
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_HDSEL
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_HDSEL
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_NACK
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_NACK
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_NACK
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_SCEN
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_SCEN
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_SCEN
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_DMAR
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_DMAR
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_DMAR
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_DMAT
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_DMAT
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_DMAT
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_RTSE
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_RTSE
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_RTSE
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_CTSE
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_CTSE
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_CTSE
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_CTSIE
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_CTSIE
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_CTSIE
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_LBDL
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_LBDL
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_LBDL
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_LBDIE
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_LBDIE
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_LBDIE
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_LBCL
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_LBCL
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_LBCL
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_CPHA
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_CPHA
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_CPHA
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_CPOL
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_CPOL
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_CPOL
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_CLKEN
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_CLKEN
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_CLKEN
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_LINEN
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_LINEN
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_LINEN
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_RWU
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_RWU
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_RWU
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_RE
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_RE
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_RE
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_TE
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_TE
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_TE
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_IDLEIE
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_IDLEIE
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_IDLEIE
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_RXNEIE
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_RXNEIE
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_RXNEIE
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_TCIE
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_TCIE
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_TCIE
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_TXEIE
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_TXEIE
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_TXEIE
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_PEIE
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_PEIE
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_PEIE
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_PS
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_PS
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_PS
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_PCE
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_PCE
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_PCE
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_WAKE
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_WAKE
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_WAKE
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_M
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_M
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_M
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_enable
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_enable
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_enable
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_CNF
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_ALRIE
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_set_OWIE
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_LSION
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_LSEON
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_LSEBYP
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_RTCEN
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM2EN
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM3EN
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM4EN
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM5EN
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM6EN
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM7EN
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM12EN
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM13EN
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM14EN
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_WWDGEN
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SPI2EN
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SPI3EN
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USART2EN
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USART3EN
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_UART4EN
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_UART5EN
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_I2C1EN
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_I2C2EN
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USBEN
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_CANEN
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_BKPEN
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PWREN
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_DACEN
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPxEN
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPCEN
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPDEN
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPEEN
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPFEN
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPGEN
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADC1EN
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADC2EN
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM1EN
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SPI1EN
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM8EN
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USART1EN
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADC3EN
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM9EN
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM10EN
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM11EN
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_DMA1EN
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_DMA2EN
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SRAMEN
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_FLITFEN
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_CRCEN
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_FSMCEN
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SDIOEN
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_LSIRDYIE
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_LSERDYIE
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSIRDYIE
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSERDYIE
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLRDYIE
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLSRC
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLXTPRE
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_USBPRE
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSION
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSEON
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSEBYP
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_CSSON
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLON
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_MBKEN
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_MBKEN
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_MBKEN
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_MBKEN
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_MUXEN
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_MUXEN
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_MUXEN
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_MUXEN
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_FACCEN
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_FACCEN
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_FACCEN
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_FACCEN
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_BURSTEN
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_BURSTEN
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_BURSTEN
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_BURSTEN
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WAITPOL
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_WAITPOL
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_WAITPOL
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_WAITPOL
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WRAPMOD
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_WRAPMOD
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_WRAPMOD
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_WRAPMOD
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WAITCFG
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_WAITCFG
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_WAITCFG
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_WAITCFG
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WREN
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_WREN
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_WREN
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_WREN
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WAITEN
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_WAITEN
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_WAITEN
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_WAITEN
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_EXTMOD
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_EXTMOD
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_EXTMOD
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_EXTMOD
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_ASYNCWAIT
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_ASYNCWAIT
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_ASYNCWAIT
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_ASYNCWAIT
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_CBURSTRW
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM3_set_CBURSTRW
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM2_set_CBURSTRW
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM1_set_CBURSTRW
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_FTRx
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_RTRx
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_EMRx
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_IMRx
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_TCIE
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_HTIE
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_TEIE
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_DIR
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_CIRC
</UL>

<P><STRONG><a name="[c1]"></a>delay</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, com_functions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_big_to_small
</UL>

<P><STRONG><a name="[c9]"></a>delay_us</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, com_functions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1
</UL>

<P><STRONG><a name="[c8]"></a>delay_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, com_functions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[ca]"></a>ADC1_get_STRT</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[cb]"></a>ADC1_clear_STRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[cc]"></a>ADC1_get_JSTRT</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[cd]"></a>ADC1_clear_JSTRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[ce]"></a>ADC1_get_JEOC</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[cf]"></a>ADC1_clear_JEOC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[a8]"></a>ADC1_get_EOC</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_get_EOC
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>ADC1_clear_EOC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_clear_EOC
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>ADC1_get_AWD</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[d1]"></a>ADC1_clear_AWD</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[d2]"></a>ADC1_set_AWDEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[d3]"></a>ADC1_set_JAWDEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[d4]"></a>ADC1_set_DUALMOD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[d5]"></a>ADC1_get_DUALMOD</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits
</UL>

<P><STRONG><a name="[d6]"></a>ADC1_set_DISCNUM</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[d7]"></a>ADC1_get_DISNUM</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits
</UL>

<P><STRONG><a name="[d8]"></a>ADC1_set_JDISCEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[d9]"></a>ADC1_set_DISCEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[da]"></a>ADC1_set_JAUTO</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[db]"></a>ADC1_set_AWDSGL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[dc]"></a>ADC1_set_SCAN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[dd]"></a>ADC1_set_JEOIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[de]"></a>ADC1_set_AWDIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[df]"></a>ADC1_set_EOCIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[e0]"></a>ADC1_set_AWDCH</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[e1]"></a>ADC1_set_TSVREFE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[e2]"></a>ADC1_set_SWSTART</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[e3]"></a>ADC1_set_JSWSTART</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[e4]"></a>ADC1_set_EXTTRIG</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[e5]"></a>ADC1_set_EXTSEL</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[e6]"></a>ADC1_set_JEXTTRIG</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[e7]"></a>ADC1_set_JEXTSEL</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[e8]"></a>ADC1_set_ALIGN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC1_set_ALIGN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init
</UL>

<P><STRONG><a name="[e9]"></a>ADC1_set_DMA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC1_set_DMA &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init
</UL>

<P><STRONG><a name="[ea]"></a>ADC1_set_RSTCAL</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_set_RSTCAL
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init
</UL>

<P><STRONG><a name="[eb]"></a>ADC1_get_RSTCAL</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_get_RSTCAL
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init
</UL>

<P><STRONG><a name="[ec]"></a>ADC1_set_CAL</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_set_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init
</UL>

<P><STRONG><a name="[ed]"></a>ADC1_get_CAL</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_get_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init
</UL>

<P><STRONG><a name="[ee]"></a>ADC1_set_CONT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC1_set_CONT &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init
</UL>

<P><STRONG><a name="[ef]"></a>ADC1_set_ADON</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC1_set_ADON &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_start_conversion
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init
</UL>

<P><STRONG><a name="[f0]"></a>ADC1_set_SMPx</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, base_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC1_set_SMPx &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init
</UL>

<P><STRONG><a name="[f1]"></a>ADC1_set_JPFFSETx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[f2]"></a>ADC1_set_HT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[f3]"></a>ADC1_get_HT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits
</UL>

<P><STRONG><a name="[f4]"></a>ADC1_set_LT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[f5]"></a>ADC1_get_LT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits
</UL>

<P><STRONG><a name="[f6]"></a>ADC1_set_L</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC1_set_L &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init
</UL>

<P><STRONG><a name="[f7]"></a>ADC1_set_SQRx</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, base_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC1_set_SQRx &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init
</UL>

<P><STRONG><a name="[f8]"></a>ADC1_set_JL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[f9]"></a>ADC1_set_JSQx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[fa]"></a>ADC1_get_JDATAx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits
</UL>

<P><STRONG><a name="[fb]"></a>ADC1_get_ADC2DATA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits
</UL>

<P><STRONG><a name="[aa]"></a>ADC1_get_DATA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC1_get_DATA &rArr; __get_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>AFIO_enable_EVO</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[fd]"></a>AFIO_disable_EVO</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[fe]"></a>AFIO_remap_SWJ</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[ff]"></a>AFIO_remap_ADC2_REG</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[100]"></a>AFIO_remap_ADC2_INJ</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[101]"></a>AFIO_remap_ADC1_REG</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[102]"></a>AFIO_remap_ADC1_INJ</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[103]"></a>AFIO_remap_TIM5CH4</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[104]"></a>AFIO_remap_PD01</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[105]"></a>AFIO_remap_CAN</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[106]"></a>AFIO_remap_TIM4</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[107]"></a>AFIO_remap_TIM3</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[108]"></a>AFIO_remap_TIM2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[109]"></a>AFIO_remap_TIM1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[10a]"></a>AFIO_remap_USART3</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[10b]"></a>AFIO_remap_USART2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[10c]"></a>AFIO_remap_USART1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[10d]"></a>AFIO_remap_I2C1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[10e]"></a>AFIO_remap_SPI1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_afio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[10f]"></a>AFIO_EXTI_set_entry</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, base_afio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AFIO_EXTI_set_entry &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_init
</UL>

<P><STRONG><a name="[110]"></a>TIM1_set_ARPE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[111]"></a>TIM8_set_ARPE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[112]"></a>TIM1_set_CMS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[113]"></a>TIM8_set_CMS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[114]"></a>TIM1_set_DIR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_set_DIR &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us
</UL>

<P><STRONG><a name="[115]"></a>TIM8_set_DIR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us
</UL>

<P><STRONG><a name="[116]"></a>TIM1_set_OPM</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[117]"></a>TIM8_set_OPM</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[118]"></a>TIM1_set_URS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_set_URS &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us
</UL>

<P><STRONG><a name="[119]"></a>TIM8_set_URS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us
</UL>

<P><STRONG><a name="[11a]"></a>TIM1_set_UDIS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[11b]"></a>TIM8_set_UDIS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[11c]"></a>TIM1_set_CEN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_set_CEN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us
</UL>

<P><STRONG><a name="[11d]"></a>TIM8_set_CEN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us
</UL>

<P><STRONG><a name="[11e]"></a>TIM1_set_TI1S</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[11f]"></a>TIM8_set_TI1S</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[120]"></a>TIM1_set_MMS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[121]"></a>TIM8_set_MMS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[122]"></a>TIM1_set_CCDS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[123]"></a>TIM8_set_CCDS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[124]"></a>TIM1_set_ETP</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[125]"></a>TIM8_set_ETP</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[126]"></a>TIM1_set_ECE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[127]"></a>TIM8_set_ECE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[128]"></a>TIM1_set_ETPS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[129]"></a>TIM8_set_ETPS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[12a]"></a>TIM1_set_ETF</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[12b]"></a>TIM8_set_ETF</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[12c]"></a>TIM1_set_MSM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[12d]"></a>TIM8_set_MSM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[12e]"></a>TIM1_set_TS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[12f]"></a>TIM8_set_TS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[130]"></a>TIM1_set_SMS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM1_set_SMS &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us
</UL>

<P><STRONG><a name="[131]"></a>TIM8_set_SMS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us
</UL>

<P><STRONG><a name="[132]"></a>TIM1_set_TDE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[133]"></a>TIM8_set_TDE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[134]"></a>TIM1_set_CC4DE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[135]"></a>TIM8_set_CC4DE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[136]"></a>TIM1_set_CC3DE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[137]"></a>TIM8_set_CC3DE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[138]"></a>TIM1_set_CC2DE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[139]"></a>TIM8_set_CC2DE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[13a]"></a>TIM1_set_CC1DE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[13b]"></a>TIM8_set_CC1DE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[13c]"></a>TIM1_set_UDE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[13d]"></a>TIM8_set_UDE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[13e]"></a>TIM1_set_TIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[13f]"></a>TIM8_set_TIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[140]"></a>TIM1_set_CC4IE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[141]"></a>TIM8_set_CC4IE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[142]"></a>TIM1_set_CC3IE</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[143]"></a>TIM8_set_CC3IE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[144]"></a>TIM1_set_CC2IE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[145]"></a>TIM8_set_CC2IE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[146]"></a>TIM1_set_CC1IE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[147]"></a>TIM8_set_CC1IE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[a7]"></a>TIM1_set_UIE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_set_UIE &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us
</UL>

<P><STRONG><a name="[148]"></a>TIM8_set_UIE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us
</UL>

<P><STRONG><a name="[149]"></a>TIM1_get_CC4OF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[14a]"></a>TIM1_clear_CC4OF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[14b]"></a>TIM8_get_CC4OF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[14c]"></a>TIM8_clear_CC4OF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[14d]"></a>TIM1_get_CC3OF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[14e]"></a>TIM1_clear_CC3OF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[14f]"></a>TIM8_get_CC3OF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[150]"></a>TIM8_clear_CC3OF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[151]"></a>TIM1_get_CC2OF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[152]"></a>TIM1_clear_CC2OF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[153]"></a>TIM8_get_CC2OF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[154]"></a>TIM8_clear_CC2OF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[155]"></a>TIM1_get_CC1OF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[156]"></a>TIM1_clear_CC1OF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[157]"></a>TIM8_get_CC1OF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[158]"></a>TIM8_clear_CC1OF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[159]"></a>TIM1_get_TIF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[15a]"></a>TIM1_clear_TIF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[15b]"></a>TIM8_get_TIF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[15c]"></a>TIM8_clear_TIF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[15d]"></a>TIM1_get_CC4F</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[15e]"></a>TIM1_clear_CC4F</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[15f]"></a>TIM8_get_CC4F</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[160]"></a>TIM8_clear_CC4F</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[161]"></a>TIM1_get_CC3F</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[162]"></a>TIM1_clear_CC3F</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[163]"></a>TIM8_get_CC3F</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[164]"></a>TIM8_clear_CC3F</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[165]"></a>TIM1_get_CC2F</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[166]"></a>TIM1_clear_CC2F</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[167]"></a>TIM8_get_CC2F</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[168]"></a>TIM8_clear_CC2F</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[b5]"></a>TIM1_get_CC1F</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_get_CC1F
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>TIM1_clear_CC1F</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_clear_CC1F
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>TIM8_get_CC1F</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[16a]"></a>TIM8_clear_CC1F</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[b1]"></a>TIM1_get_UIF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_get_UIF
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>TIM1_clear_UIF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_clear_UIF
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>TIM8_get_UIF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM8_get_UIF
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>TIM8_clear_UIF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM8_clear_UIF
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>TIM1_set_TG</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[16c]"></a>TIM8_set_TG</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[16d]"></a>TIM1_set_CC4G</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[16e]"></a>TIM8_set_CC4G</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[16f]"></a>TIM1_set_CC3G</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[170]"></a>TIM8_set_CC3G</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[171]"></a>TIM1_set_CC2G</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[172]"></a>TIM8_set_CC2G</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[173]"></a>TIM1_set_CC1G</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[174]"></a>TIM8_set_CC1G</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[175]"></a>TIM1_set_UG</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[176]"></a>TIM8_set_UG</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[177]"></a>TIM1_set_CC2S</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
</UL>

<P><STRONG><a name="[178]"></a>TIM8_set_CC2S</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
</UL>

<P><STRONG><a name="[179]"></a>TIM1_set_CC1S</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
</UL>

<P><STRONG><a name="[17a]"></a>TIM8_set_CC1S</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
</UL>

<P><STRONG><a name="[17b]"></a>TIM1_set_CC4S</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
</UL>

<P><STRONG><a name="[17c]"></a>TIM8_set_CC4S</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
</UL>

<P><STRONG><a name="[17d]"></a>TIM1_set_CC3S</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
</UL>

<P><STRONG><a name="[17e]"></a>TIM8_set_CC3S</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
</UL>

<P><STRONG><a name="[17f]"></a>TIM1_set_OC2CE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
</UL>

<P><STRONG><a name="[180]"></a>TIM8_set_OC2CE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
</UL>

<P><STRONG><a name="[181]"></a>TIM1_set_OC2M</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
</UL>

<P><STRONG><a name="[182]"></a>TIM8_set_OC2M</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
</UL>

<P><STRONG><a name="[183]"></a>TIM1_set_OC2PE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
</UL>

<P><STRONG><a name="[184]"></a>TIM8_set_OC2PE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
</UL>

<P><STRONG><a name="[185]"></a>TIM1_set_OC1CE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
</UL>

<P><STRONG><a name="[186]"></a>TIM8_set_OC1CE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
</UL>

<P><STRONG><a name="[187]"></a>TIM1_set_OC1M</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
</UL>

<P><STRONG><a name="[188]"></a>TIM8_set_OC1M</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
</UL>

<P><STRONG><a name="[189]"></a>TIM1_set_OC1PE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
</UL>

<P><STRONG><a name="[18a]"></a>TIM8_set_OC1PE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
</UL>

<P><STRONG><a name="[18b]"></a>TIM1_set_OC4CE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
</UL>

<P><STRONG><a name="[18c]"></a>TIM8_set_OC4CE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
</UL>

<P><STRONG><a name="[18d]"></a>TIM1_set_OC4M</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
</UL>

<P><STRONG><a name="[18e]"></a>TIM8_set_OC4M</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
</UL>

<P><STRONG><a name="[18f]"></a>TIM1_set_OC4PE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
</UL>

<P><STRONG><a name="[190]"></a>TIM8_set_OC4PE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
</UL>

<P><STRONG><a name="[191]"></a>TIM1_set_OC3CE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
</UL>

<P><STRONG><a name="[192]"></a>TIM8_set_OC3CE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
</UL>

<P><STRONG><a name="[193]"></a>TIM1_set_OC3M</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
</UL>

<P><STRONG><a name="[194]"></a>TIM8_set_OC3M</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
</UL>

<P><STRONG><a name="[195]"></a>TIM1_set_OC3PE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
</UL>

<P><STRONG><a name="[196]"></a>TIM8_set_OC3PE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
</UL>

<P><STRONG><a name="[197]"></a>TIM1_set_IC2F</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[198]"></a>TIM8_set_IC2F</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[199]"></a>TIM1_set_IC2PSC</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[19a]"></a>TIM8_set_IC2PSC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[19b]"></a>TIM1_set_IC1F</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[19c]"></a>TIM8_set_IC1F</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[19d]"></a>TIM1_set_IC1PSC</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[19e]"></a>TIM8_set_IC1PSC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[19f]"></a>TIM1_set_IC4F</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[1a0]"></a>TIM8_set_IC4F</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[1a1]"></a>TIM1_set_IC4PSC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[1a2]"></a>TIM8_set_IC4PSC</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[1a3]"></a>TIM1_set_IC3F</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[1a4]"></a>TIM8_set_IC3F</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[1a5]"></a>TIM1_set_IC3PSC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[1a6]"></a>TIM8_set_IC3PSC</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[1a7]"></a>TIM1_set_CC4P</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
</UL>

<P><STRONG><a name="[1a8]"></a>TIM8_set_CC4P</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
</UL>

<P><STRONG><a name="[1a9]"></a>TIM1_set_CC4E</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
</UL>

<P><STRONG><a name="[1aa]"></a>TIM8_set_CC4E</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
</UL>

<P><STRONG><a name="[1ab]"></a>TIM1_set_CC3NP</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
</UL>

<P><STRONG><a name="[1ac]"></a>TIM8_set_CC3NP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
</UL>

<P><STRONG><a name="[1ad]"></a>TIM1_set_CC3NE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
</UL>

<P><STRONG><a name="[1ae]"></a>TIM8_set_CC3NE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
</UL>

<P><STRONG><a name="[1af]"></a>TIM1_set_CC3P</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
</UL>

<P><STRONG><a name="[1b0]"></a>TIM8_set_CC3P</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
</UL>

<P><STRONG><a name="[1b1]"></a>TIM1_set_CC3E</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
</UL>

<P><STRONG><a name="[1b2]"></a>TIM8_set_CC3E</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
</UL>

<P><STRONG><a name="[1b3]"></a>TIM1_set_CC2NP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
</UL>

<P><STRONG><a name="[1b4]"></a>TIM8_set_CC2NP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
</UL>

<P><STRONG><a name="[1b5]"></a>TIM1_set_CC2NE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
</UL>

<P><STRONG><a name="[1b6]"></a>TIM8_set_CC2NE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
</UL>

<P><STRONG><a name="[1b7]"></a>TIM1_set_CC2P</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
</UL>

<P><STRONG><a name="[1b8]"></a>TIM8_set_CC2P</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
</UL>

<P><STRONG><a name="[1b9]"></a>TIM1_set_CC2E</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
</UL>

<P><STRONG><a name="[1ba]"></a>TIM8_set_CC2E</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
</UL>

<P><STRONG><a name="[1bb]"></a>TIM1_set_CC1NP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
</UL>

<P><STRONG><a name="[1bc]"></a>TIM8_set_CC1NP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
</UL>

<P><STRONG><a name="[1bd]"></a>TIM1_set_CC1NE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
</UL>

<P><STRONG><a name="[1be]"></a>TIM8_set_CC1NE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
</UL>

<P><STRONG><a name="[1bf]"></a>TIM1_set_CC1P</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
</UL>

<P><STRONG><a name="[1c0]"></a>TIM8_set_CC1P</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
</UL>

<P><STRONG><a name="[1c1]"></a>TIM1_set_CC1E</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
</UL>

<P><STRONG><a name="[1c2]"></a>TIM8_set_CC1E</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
</UL>

<P><STRONG><a name="[39e]"></a>TIM1_set_CNT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_atime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us
</UL>

<P><STRONG><a name="[4a8]"></a>TIM1_get_CNT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>TIM8_set_CNT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us
</UL>

<P><STRONG><a name="[4a9]"></a>TIM8_get_CNT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>TIM1_set_PSC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_atime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us
</UL>

<P><STRONG><a name="[4aa]"></a>TIM1_get_PSC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)

<P><STRONG><a name="[3ad]"></a>TIM8_set_PSC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us
</UL>

<P><STRONG><a name="[4ab]"></a>TIM8_get_PSC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>TIM1_set_ARR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_atime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_BtnAdd_hold_handler
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_BtnSub_hold_handler
</UL>

<P><STRONG><a name="[4ac]"></a>TIM1_get_ARR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>TIM8_set_ARR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us
</UL>

<P><STRONG><a name="[4ad]"></a>TIM8_get_ARR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>TIM1_set_REP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_atime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us
</UL>

<P><STRONG><a name="[4ae]"></a>TIM1_get_REP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>TIM8_set_REP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us
</UL>

<P><STRONG><a name="[4af]"></a>TIM8_get_REP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>TIM1_set_CCR1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_set_pwm_duty
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
</UL>

<P><STRONG><a name="[4b0]"></a>TIM1_get_CCR1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>TIM8_set_CCR1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_set_pwm_duty
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
</UL>

<P><STRONG><a name="[4b1]"></a>TIM8_get_CCR1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>TIM1_set_CCR2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_set_pwm_duty
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
</UL>

<P><STRONG><a name="[4b2]"></a>TIM1_get_CCR2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>TIM8_set_CCR2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_set_pwm_duty
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
</UL>

<P><STRONG><a name="[4b3]"></a>TIM8_get_CCR2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>TIM1_set_CCR3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_set_pwm_duty
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
</UL>

<P><STRONG><a name="[4b4]"></a>TIM1_get_CCR3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>TIM8_set_CCR3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_set_pwm_duty
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
</UL>

<P><STRONG><a name="[4b5]"></a>TIM8_get_CCR3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>TIM1_set_CCR4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_set_pwm_duty
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
</UL>

<P><STRONG><a name="[4b6]"></a>TIM1_get_CCR4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>TIM8_set_CCR4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_set_pwm_duty
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
</UL>

<P><STRONG><a name="[4b7]"></a>TIM8_get_CCR4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_atime.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>TIM1_set_MOE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
</UL>

<P><STRONG><a name="[1c4]"></a>TIM8_set_MOE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
</UL>

<P><STRONG><a name="[a1]"></a>DMA1_get_TEIFx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_get_TEIFx
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>DMA1_get_HTIFx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_get_HTIFx
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>DMA1_get_TCIFx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_get_TCIFx
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[1c5]"></a>DMA1_get_GIFx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, base_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[a2]"></a>DMA1_clear_CTEIFx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_clear_CTEIFx
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>DMA1_clear_CHTIFx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_clear_CHTIFx
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>DMA1_clear_CTCIFx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_clear_CTCIFx
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[1c6]"></a>DMA1_clear_CGIFx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, base_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[1c7]"></a>DMA1_set_MEM2MEM</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, base_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1c8]"></a>DMA1_set_PL</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA1_set_PL &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init
</UL>

<P><STRONG><a name="[1c9]"></a>DMA1_set_MSIZE</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA1_set_MSIZE &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init
</UL>

<P><STRONG><a name="[1ca]"></a>DMA1_set_PSIZE</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA1_set_PSIZE &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init
</UL>

<P><STRONG><a name="[1cb]"></a>DMA1_set_MINC</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_set_MINC &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init
</UL>

<P><STRONG><a name="[1cc]"></a>DMA1_set_PINC</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_set_PINC &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init
</UL>

<P><STRONG><a name="[1cd]"></a>DMA1_set_CIRC</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_set_CIRC &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init
</UL>

<P><STRONG><a name="[1ce]"></a>DMA1_set_DIR</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_set_DIR &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init
</UL>

<P><STRONG><a name="[1cf]"></a>DMA1_set_TEIE</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, base_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1d0]"></a>DMA1_set_HTIE</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_set_HTIE &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init
</UL>

<P><STRONG><a name="[1d1]"></a>DMA1_set_TCIE</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_set_TCIE &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init
</UL>

<P><STRONG><a name="[9d]"></a>DMA1_set_EN</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_set_EN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init
</UL>

<P><STRONG><a name="[3c0]"></a>DMA1_set_NDT</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA1_set_NDT
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init
</UL>

<P><STRONG><a name="[4b8]"></a>DMA1_get_NDT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, base_dma.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>DMA1_set_PA</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_set_PA
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init
</UL>

<P><STRONG><a name="[4b9]"></a>DMA1_get_PA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, base_dma.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>DMA1_set_MA</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA1_set_MA
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init
</UL>

<P><STRONG><a name="[9f]"></a>DMA1_get_MA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, base_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_get_MA
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[1d2]"></a>EXTI_set_IMRx</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, base_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI_set_IMRx &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_init
</UL>

<P><STRONG><a name="[1d3]"></a>EXTI_set_EMRx</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, base_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1d4]"></a>EXTI_set_RTRx</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, base_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI_set_RTRx &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_init
</UL>

<P><STRONG><a name="[1d5]"></a>EXTI_set_FTRx</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, base_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI_set_FTRx &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_init
</UL>

<P><STRONG><a name="[1d6]"></a>EXTI_set_SWIERx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[ac]"></a>EXTI_get_PRx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_get_PRx
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>EXTI_clear_PRx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_clear_PRx
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[1d7]"></a>FSMC_NORPSRAM1_set_CBURSTRW</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1d8]"></a>FSMC_NORPSRAM2_set_CBURSTRW</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1d9]"></a>FSMC_NORPSRAM3_set_CBURSTRW</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1da]"></a>FSMC_NORPSRAM4_set_CBURSTRW</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1db]"></a>FSMC_NORPSRAM1_set_ASYNCWAIT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1dc]"></a>FSMC_NORPSRAM2_set_ASYNCWAIT</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1dd]"></a>FSMC_NORPSRAM3_set_ASYNCWAIT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1de]"></a>FSMC_NORPSRAM4_set_ASYNCWAIT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1df]"></a>FSMC_NORPSRAM1_set_EXTMOD</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1e0]"></a>FSMC_NORPSRAM2_set_EXTMOD</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1e1]"></a>FSMC_NORPSRAM3_set_EXTMOD</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1e2]"></a>FSMC_NORPSRAM4_set_EXTMOD</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_EXTMOD &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_FSMC_init
</UL>

<P><STRONG><a name="[1e3]"></a>FSMC_NORPSRAM1_set_WAITEN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1e4]"></a>FSMC_NORPSRAM2_set_WAITEN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1e5]"></a>FSMC_NORPSRAM3_set_WAITEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1e6]"></a>FSMC_NORPSRAM4_set_WAITEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_WAITEN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_FSMC_init
</UL>

<P><STRONG><a name="[1e7]"></a>FSMC_NORPSRAM1_set_WREN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1e8]"></a>FSMC_NORPSRAM2_set_WREN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1e9]"></a>FSMC_NORPSRAM3_set_WREN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1ea]"></a>FSMC_NORPSRAM4_set_WREN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_WREN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_FSMC_init
</UL>

<P><STRONG><a name="[1eb]"></a>FSMC_NORPSRAM1_set_WAITCFG</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1ec]"></a>FSMC_NORPSRAM2_set_WAITCFG</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1ed]"></a>FSMC_NORPSRAM3_set_WAITCFG</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1ee]"></a>FSMC_NORPSRAM4_set_WAITCFG</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_WAITCFG &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_FSMC_init
</UL>

<P><STRONG><a name="[1ef]"></a>FSMC_NORPSRAM1_set_WRAPMOD</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1f0]"></a>FSMC_NORPSRAM2_set_WRAPMOD</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1f1]"></a>FSMC_NORPSRAM3_set_WRAPMOD</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1f2]"></a>FSMC_NORPSRAM4_set_WRAPMOD</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_WRAPMOD &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_FSMC_init
</UL>

<P><STRONG><a name="[1f3]"></a>FSMC_NORPSRAM1_set_WAITPOL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1f4]"></a>FSMC_NORPSRAM2_set_WAITPOL</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1f5]"></a>FSMC_NORPSRAM3_set_WAITPOL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1f6]"></a>FSMC_NORPSRAM4_set_WAITPOL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_WAITPOL &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_FSMC_init
</UL>

<P><STRONG><a name="[1f7]"></a>FSMC_NORPSRAM1_set_BURSTEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1f8]"></a>FSMC_NORPSRAM2_set_BURSTEN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1f9]"></a>FSMC_NORPSRAM3_set_BURSTEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1fa]"></a>FSMC_NORPSRAM4_set_BURSTEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_BURSTEN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_FSMC_init
</UL>

<P><STRONG><a name="[1fb]"></a>FSMC_NORPSRAM1_set_FACCEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1fc]"></a>FSMC_NORPSRAM2_set_FACCEN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1fd]"></a>FSMC_NORPSRAM3_set_FACCEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1fe]"></a>FSMC_NORPSRAM4_set_FACCEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[1ff]"></a>FSMC_NORPSRAM1_set_MWID</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[200]"></a>FSMC_NORPSRAM2_set_MWID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[201]"></a>FSMC_NORPSRAM3_set_MWID</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[202]"></a>FSMC_NORPSRAM4_set_MWID</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FSMC_NORPSRAM4_set_MWID &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_FSMC_init
</UL>

<P><STRONG><a name="[203]"></a>FSMC_NORPSRAM1_set_MTYP</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[204]"></a>FSMC_NORPSRAM2_set_MTYP</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[205]"></a>FSMC_NORPSRAM3_set_MTYP</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[206]"></a>FSMC_NORPSRAM4_set_MTYP</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FSMC_NORPSRAM4_set_MTYP &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_FSMC_init
</UL>

<P><STRONG><a name="[207]"></a>FSMC_NORPSRAM1_set_MUXEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[208]"></a>FSMC_NORPSRAM2_set_MUXEN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[209]"></a>FSMC_NORPSRAM3_set_MUXEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[20a]"></a>FSMC_NORPSRAM4_set_MUXEN</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, base_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_MUXEN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_FSMC_init
</UL>

<P><STRONG><a name="[20b]"></a>FSMC_NORPSRAM1_set_MBKEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[20c]"></a>FSMC_NORPSRAM2_set_MBKEN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[20d]"></a>FSMC_NORPSRAM3_set_MBKEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[20e]"></a>FSMC_NORPSRAM4_set_MBKEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NORPSRAM4_set_MBKEN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_FSMC_init
</UL>

<P><STRONG><a name="[20f]"></a>FSMC_NORPSRAM1_set_ACCMOD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[210]"></a>FSMC_NORPSRAM2_set_ACCMOD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[211]"></a>FSMC_NORPSRAM3_set_ACCMOD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[212]"></a>FSMC_NORPSRAM4_set_ACCMOD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FSMC_NORPSRAM4_set_ACCMOD &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_FSMC_init
</UL>

<P><STRONG><a name="[213]"></a>FSMC_NORPSRAM1_set_DATLAT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[214]"></a>FSMC_NORPSRAM2_set_DATLAT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[215]"></a>FSMC_NORPSRAM3_set_DATLAT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[216]"></a>FSMC_NORPSRAM4_set_DATLAT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[217]"></a>FSMC_NORPSRAM1_set_CLKDIV</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[218]"></a>FSMC_NORPSRAM2_set_CLKDIV</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[219]"></a>FSMC_NORPSRAM3_set_CLKDIV</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[21a]"></a>FSMC_NORPSRAM4_set_CLKDIV</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[21b]"></a>FSMC_NORPSRAM1_set_BUSTURN</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[21c]"></a>FSMC_NORPSRAM2_set_BUSTURN</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[21d]"></a>FSMC_NORPSRAM3_set_BUSTURN</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[21e]"></a>FSMC_NORPSRAM4_set_BUSTURN</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FSMC_NORPSRAM4_set_BUSTURN &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_FSMC_init
</UL>

<P><STRONG><a name="[21f]"></a>FSMC_NORPSRAM1_set_DATAST</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[220]"></a>FSMC_NORPSRAM2_set_DATAST</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[221]"></a>FSMC_NORPSRAM3_set_DATAST</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[222]"></a>FSMC_NORPSRAM4_set_DATAST</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FSMC_NORPSRAM4_set_DATAST &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_FSMC_init
</UL>

<P><STRONG><a name="[223]"></a>FSMC_NORPSRAM1_set_ADDHLD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[224]"></a>FSMC_NORPSRAM2_set_ADDHLD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[225]"></a>FSMC_NORPSRAM3_set_ADDHLD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[226]"></a>FSMC_NORPSRAM4_set_ADDHLD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[227]"></a>FSMC_NORPSRAM1_set_ADDSET</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[228]"></a>FSMC_NORPSRAM2_set_ADDSET</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[229]"></a>FSMC_NORPSRAM3_set_ADDSET</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[22a]"></a>FSMC_NORPSRAM4_set_ADDSET</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FSMC_NORPSRAM4_set_ADDSET &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_FSMC_init
</UL>

<P><STRONG><a name="[22b]"></a>FSMC_NORPSRAM1_W_set_ACCMOD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[22c]"></a>FSMC_NORPSRAM2_W_set_ACCMOD</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[22d]"></a>FSMC_NORPSRAM3_W_set_ACCMOD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[22e]"></a>FSMC_NORPSRAM4_W_set_ACCMOD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[22f]"></a>FSMC_NORPSRAM1_W_set_DATLAT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[230]"></a>FSMC_NORPSRAM2_W_set_DATLAT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[231]"></a>FSMC_NORPSRAM3_W_set_DATLAT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[232]"></a>FSMC_NORPSRAM4_W_set_DATLAT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[233]"></a>FSMC_NORPSRAM1_W_set_CLKDIV</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[234]"></a>FSMC_NORPSRAM2_W_set_CLKDIV</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[235]"></a>FSMC_NORPSRAM3_W_set_CLKDIV</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[236]"></a>FSMC_NORPSRAM4_W_set_CLKDIV</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[237]"></a>FSMC_NORPSRAM1_W_set_BUSTURN</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[238]"></a>FSMC_NORPSRAM2_W_set_BUSTURN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[239]"></a>FSMC_NORPSRAM3_W_set_BUSTURN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[23a]"></a>FSMC_NORPSRAM4_W_set_BUSTURN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[23b]"></a>FSMC_NORPSRAM1_W_set_DATAST</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[23c]"></a>FSMC_NORPSRAM2_W_set_DATAST</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[23d]"></a>FSMC_NORPSRAM3_W_set_DATAST</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[23e]"></a>FSMC_NORPSRAM4_W_set_DATAST</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[23f]"></a>FSMC_NORPSRAM1_W_set_ADDHLD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[240]"></a>FSMC_NORPSRAM2_W_set_ADDHLD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[241]"></a>FSMC_NORPSRAM3_W_set_ADDHLD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[242]"></a>FSMC_NORPSRAM4_W_set_ADDHLD</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[243]"></a>FSMC_NORPSRAM1_W_set_ADDSET</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[244]"></a>FSMC_NORPSRAM2_W_set_ADDSET</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[245]"></a>FSMC_NORPSRAM3_W_set_ADDSET</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[246]"></a>FSMC_NORPSRAM4_W_set_ADDSET</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[247]"></a>GPIO_configure</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, base_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPIO_configure &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_pins_init
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_port_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1
</UL>

<P><STRONG><a name="[3c8]"></a>GPIO_send_port</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, base_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_state
</UL>

<P><STRONG><a name="[3c9]"></a>GPIO_send_pin</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, base_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_send_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_on_LED3
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_on_LED2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_on_LED1
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_off_LED1
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_init
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_coordinate
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_exact_coordinate
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_receive_data
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_send_command
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_stop
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_off_LED4
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_off_LED3
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_off_LED2
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_on_LED4
</UL>

<P><STRONG><a name="[4ba]"></a>GPIO_receive_port</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, base_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3d3]"></a>GPIO_receive_pin</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, base_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_update_state
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_coordinate
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_exact_coordinate
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_receive_data
</UL>

<P><STRONG><a name="[248]"></a>RCC_get_PLLRDY</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_get_PLLRDY
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[249]"></a>RCC_set_PLLON</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_PLLON &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[24a]"></a>RCC_set_CSSON</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[24b]"></a>RCC_set_HSEBYP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[24c]"></a>RCC_get_HSERDY</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[24d]"></a>RCC_set_HSEON</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_HSEON &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[24e]"></a>RCC_get_HSICAL</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits
</UL>

<P><STRONG><a name="[24f]"></a>RCC_set_HSITRIM</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[250]"></a>RCC_get_HSIRDY</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_get_HSIRDY
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[251]"></a>RCC_set_HSION</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_HSION &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[252]"></a>RCC_set_MCO</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[253]"></a>RCC_set_USBPRE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[254]"></a>RCC_set_PLLMUL</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_set_PLLMUL &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[255]"></a>RCC_set_PLLXTPRE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_PLLXTPRE &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[256]"></a>RCC_set_PLLSRC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_PLLSRC &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[257]"></a>RCC_set_ADCPRE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_set_ADCPRE &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[258]"></a>RCC_set_PPRE2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_set_PPRE2 &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[259]"></a>RCC_set_PPRE1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_set_PPRE1 &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[25a]"></a>RCC_set_HPRE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_set_HPRE &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[25b]"></a>RCC_get_SWS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits
</UL>

<P><STRONG><a name="[25c]"></a>RCC_set_SW</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_set_SW &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_init
</UL>

<P><STRONG><a name="[25d]"></a>RCC_set_CSSC</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[25e]"></a>RCC_set_PLLRDYC</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[25f]"></a>RCC_set_HSERDYC</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[260]"></a>RCC_set_HSIRDYC</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[261]"></a>RCC_set_LSERDYC</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[262]"></a>RCC_set_LSIRDYC</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[263]"></a>RCC_set_PLLRDYIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[264]"></a>RCC_set_HSERDYIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[265]"></a>RCC_set_HSIRDYIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[266]"></a>RCC_set_LSERDYIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[267]"></a>RCC_set_LSIRDYIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[268]"></a>RCC_get_CSSF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[269]"></a>RCC_get_PLLRDYF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[26a]"></a>RCC_get_HSERDYF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[26b]"></a>RCC_get_HSIRDYF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[26c]"></a>RCC_get_LSERDYF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[26d]"></a>RCC_get_LSIRDYF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[26e]"></a>RCC_set_TIM11RST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[26f]"></a>RCC_set_TIM10RST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[270]"></a>RCC_set_TIM9RST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[271]"></a>RCC_set_ADC3RST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[272]"></a>RCC_set_USART1RST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[273]"></a>RCC_set_TIM8RST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[274]"></a>RCC_set_SPI1RST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[275]"></a>RCC_set_TIM1RST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[276]"></a>RCC_set_ADC2RST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[277]"></a>RCC_set_ADC1RST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[278]"></a>RCC_set_IOPGRST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[279]"></a>RCC_set_IOPFRST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[27a]"></a>RCC_set_IOPERST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[27b]"></a>RCC_set_IOPDRST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[27c]"></a>RCC_set_IOPCRST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[27d]"></a>RCC_set_IOPBRST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[27e]"></a>RCC_set_IOPARST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[27f]"></a>RCC_set_AFIORST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[280]"></a>RCC_set_DACRST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[281]"></a>RCC_set_PWRRST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[282]"></a>RCC_set_BKPRST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[283]"></a>RCC_set_CANRST</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[284]"></a>RCC_set_USBRST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[285]"></a>RCC_set_I2C2RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[286]"></a>RCC_set_I2C1RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[287]"></a>RCC_set_UART5RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[288]"></a>RCC_set_UART4RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[289]"></a>RCC_set_USART3RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[28a]"></a>RCC_set_USART2RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[28b]"></a>RCC_set_SPI3RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[28c]"></a>RCC_set_SPI2RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[28d]"></a>RCC_set_WWDGRST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[28e]"></a>RCC_set_TIM14RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[28f]"></a>RCC_set_TIM13RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[290]"></a>RCC_set_TIM12RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[291]"></a>RCC_set_TIM7RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[292]"></a>RCC_set_TIM6RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[293]"></a>RCC_set_TIM5RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[294]"></a>RCC_set_TIM4RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[295]"></a>RCC_set_TIM3RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[296]"></a>RCC_set_TIM2RST</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[297]"></a>RCC_set_SDIOEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[298]"></a>RCC_set_FSMCEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_FSMCEN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_pins_init
</UL>

<P><STRONG><a name="[299]"></a>RCC_set_CRCEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[29a]"></a>RCC_set_FLITFEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[29b]"></a>RCC_set_SRAMEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[29c]"></a>RCC_set_DMA2EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[29d]"></a>RCC_set_DMA1EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_DMA1EN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init
</UL>

<P><STRONG><a name="[29e]"></a>RCC_set_TIM11EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[29f]"></a>RCC_set_TIM10EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2a0]"></a>RCC_set_TIM9EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2a1]"></a>RCC_set_ADC3EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2a2]"></a>RCC_set_USART1EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2a3]"></a>RCC_set_TIM8EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us
</UL>

<P><STRONG><a name="[2a4]"></a>RCC_set_SPI1EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2a5]"></a>RCC_set_TIM1EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_TIM1EN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us
</UL>

<P><STRONG><a name="[2a6]"></a>RCC_set_ADC2EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2a7]"></a>RCC_set_ADC1EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_ADC1EN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init
</UL>

<P><STRONG><a name="[2a8]"></a>RCC_set_IOPGEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_IOPGEN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_pins_init
</UL>

<P><STRONG><a name="[2a9]"></a>RCC_set_IOPFEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2aa]"></a>RCC_set_IOPEEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_IOPEEN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_pins_init
</UL>

<P><STRONG><a name="[2ab]"></a>RCC_set_IOPDEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_IOPDEN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_pins_init
</UL>

<P><STRONG><a name="[2ac]"></a>RCC_set_IOPCEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
</UL>

<P><STRONG><a name="[2ad]"></a>RCC_set_IOPBEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_IOPBEN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_pins_init
</UL>

<P><STRONG><a name="[2ae]"></a>RCC_set_IOPAEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_IOPAEN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_pins_init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1
</UL>

<P><STRONG><a name="[2af]"></a>RCC_set_IOPxEN</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_set_IOPxEN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_init
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_port_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_init
</UL>

<P><STRONG><a name="[2b0]"></a>RCC_set_AFIOEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_AFIOEN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH4_generate_pwm
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH3_generate_pwm
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH2_generate_pwm
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CH1_generate_pwm
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH4_generate_pwm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH3_generate_pwm
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH2_generate_pwm
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CH1_generate_pwm
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_pins_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_init
</UL>

<P><STRONG><a name="[2b1]"></a>RCC_set_DACEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_set_DACEN &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1
</UL>

<P><STRONG><a name="[2b2]"></a>RCC_set_PWREN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2b3]"></a>RCC_set_BKPEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2b4]"></a>RCC_set_CANEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2b5]"></a>RCC_set_USBEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2b6]"></a>RCC_set_I2C2EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2b7]"></a>RCC_set_I2C1EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2b8]"></a>RCC_set_UART5EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2b9]"></a>RCC_set_UART4EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2ba]"></a>RCC_set_USART3EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2bb]"></a>RCC_set_USART2EN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2bc]"></a>RCC_set_SPI3EN</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2bd]"></a>RCC_set_SPI2EN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2be]"></a>RCC_set_WWDGEN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2bf]"></a>RCC_set_TIM14EN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2c0]"></a>RCC_set_TIM13EN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2c1]"></a>RCC_set_TIM12EN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2c2]"></a>RCC_set_TIM7EN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2c3]"></a>RCC_set_TIM6EN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2c4]"></a>RCC_set_TIM5EN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2c5]"></a>RCC_set_TIM4EN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2c6]"></a>RCC_set_TIM3EN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2c7]"></a>RCC_set_TIM2EN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2c8]"></a>RCC_set_BDRST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[2c9]"></a>RCC_set_RTCEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2ca]"></a>RCC_set_RTCSEL</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[2cb]"></a>RCC_set_LSEBYP</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2cc]"></a>RCC_get_LSERDY</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2cd]"></a>RCC_set_LSEON</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2ce]"></a>RCC_get_LPWRRSTF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2cf]"></a>RCC_get_WWDGRSTF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2d0]"></a>RCC_get_IWDGRSTF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2d1]"></a>RCC_get_SFTRSTF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2d2]"></a>RCC_get_PORRSTF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2d3]"></a>RCC_get_PINRSTF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2d4]"></a>RCC_set_RMVF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[2d5]"></a>RCC_get_LSIRDY</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2d6]"></a>RCC_set_LSION</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2d7]"></a>RTC_set_OWIE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2d8]"></a>RTC_set_ALRIE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[98]"></a>RTC_set_SECIE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_set_SECIE &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[2d9]"></a>RTC_set_CNF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[2da]"></a>RTC_set_PRL</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, base_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2db]"></a>RTC_get_DIV</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, base_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits
</UL>

<P><STRONG><a name="[2dc]"></a>RTC_set_CNT</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, base_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2dd]"></a>RTC_set_ALR</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, base_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2de]"></a>USART1_get_CTS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2df]"></a>USART1_clear_CTS</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[2e0]"></a>USART2_get_CTS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2e1]"></a>USART2_clear_CTS</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[2e2]"></a>USART3_get_CTS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2e3]"></a>USART3_clear_CTS</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[2e4]"></a>USART1_get_LBD</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2e5]"></a>USART1_clear_LBD</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[2e6]"></a>USART2_get_LBD</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2e7]"></a>USART2_clear_LBD</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[2e8]"></a>USART3_get_LBD</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2e9]"></a>USART3_clear_LBD</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[2ea]"></a>USART1_get_TXE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2eb]"></a>USART1_clear_TXE</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[2ec]"></a>USART2_get_TXE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2ed]"></a>USART2_clear_TXE</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[2ee]"></a>USART3_get_TXE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2ef]"></a>USART3_clear_TXE</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[2f0]"></a>USART1_get_TC</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2f1]"></a>USART1_clear_TC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[2f2]"></a>USART2_get_TC</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2f3]"></a>USART2_clear_TC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[2f4]"></a>USART3_get_TC</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2f5]"></a>USART3_clear_TC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[b7]"></a>USART1_get_RXNE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_get_RXNE
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2f6]"></a>USART1_clear_RXNE</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[ba]"></a>USART2_get_RXNE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_get_RXNE
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[2f7]"></a>USART2_clear_RXNE</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[2f8]"></a>USART3_get_RXNE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2f9]"></a>USART3_clear_RXNE</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[2fa]"></a>USART1_get_IDLE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2fb]"></a>USART1_clear_IDLE</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[2fc]"></a>USART2_get_IDLE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2fd]"></a>USART2_clear_IDLE</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[2fe]"></a>USART3_get_IDLE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[2ff]"></a>USART3_clear_IDLE</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clear_bit
</UL>

<P><STRONG><a name="[300]"></a>USART1_get_ORE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[4bb]"></a>USART1_clear_ORE</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, base_usart.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>USART2_get_ORE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[4bc]"></a>USART2_clear_ORE</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, base_usart.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>USART3_get_ORE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[4bd]"></a>USART3_clear_ORE</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, base_usart.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>USART1_get_NE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[304]"></a>USART2_get_NE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[305]"></a>USART3_get_NE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[306]"></a>USART1_get_FE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[307]"></a>USART2_get_FE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[308]"></a>USART3_get_FE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[309]"></a>USART1_get_PE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[30a]"></a>USART2_get_PE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[30b]"></a>USART3_get_PE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bit
</UL>

<P><STRONG><a name="[b8]"></a>USART1_get_DR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>USART1_set_DR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[4be]"></a>USART2_get_DR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_usart.o(.text), UNUSED)

<P><STRONG><a name="[4bf]"></a>USART2_set_DR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_usart.o(.text), UNUSED)

<P><STRONG><a name="[4c0]"></a>USART3_get_DR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_usart.o(.text), UNUSED)

<P><STRONG><a name="[4c1]"></a>USART3_set_DR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, base_usart.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>USART1_set_BRR</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div
</UL>

<P><STRONG><a name="[30c]"></a>USART1_set_div</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_BRR
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>

<P><STRONG><a name="[315]"></a>USART1_get_div</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[318]"></a>USART2_set_BRR</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div
</UL>

<P><STRONG><a name="[317]"></a>USART2_set_div</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_BRR
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>

<P><STRONG><a name="[319]"></a>USART2_get_div</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[31b]"></a>USART3_set_BRR</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_div
</UL>

<P><STRONG><a name="[31a]"></a>USART3_set_div</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_BRR
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>

<P><STRONG><a name="[31c]"></a>USART3_get_div</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_bits
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[31d]"></a>USART1_set_enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[31e]"></a>USART2_set_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[31f]"></a>USART3_set_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[320]"></a>USART1_set_M</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[321]"></a>USART2_set_M</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[322]"></a>USART3_set_M</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[323]"></a>USART1_set_WAKE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[324]"></a>USART2_set_WAKE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[325]"></a>USART3_set_WAKE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[326]"></a>USART1_set_PCE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[327]"></a>USART2_set_PCE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[328]"></a>USART3_set_PCE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[329]"></a>USART1_set_PS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[32a]"></a>USART2_set_PS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[32b]"></a>USART3_set_PS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[32c]"></a>USART1_set_PEIE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[32d]"></a>USART2_set_PEIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[32e]"></a>USART3_set_PEIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[32f]"></a>USART1_set_TXEIE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[330]"></a>USART2_set_TXEIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[331]"></a>USART3_set_TXEIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[332]"></a>USART1_set_TCIE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[333]"></a>USART2_set_TCIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[334]"></a>USART3_set_TCIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[335]"></a>USART1_set_RXNEIE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[336]"></a>USART2_set_RXNEIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[337]"></a>USART3_set_RXNEIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[338]"></a>USART1_set_IDLEIE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[339]"></a>USART2_set_IDLEIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[33a]"></a>USART3_set_IDLEIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[33b]"></a>USART1_set_TE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[33c]"></a>USART2_set_TE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[33d]"></a>USART3_set_TE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[33e]"></a>USART1_set_RE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[33f]"></a>USART2_set_RE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[340]"></a>USART3_set_RE</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[341]"></a>USART1_set_RWU</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[342]"></a>USART2_set_RWU</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[343]"></a>USART3_set_RWU</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[344]"></a>USART1_set_SBK</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[345]"></a>USART2_set_SBK</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[346]"></a>USART3_set_SBK</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bit
</UL>

<P><STRONG><a name="[347]"></a>USART1_set_LINEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[348]"></a>USART2_set_LINEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[349]"></a>USART3_set_LINEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[34a]"></a>USART1_set_STOP</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[34b]"></a>USART2_set_STOP</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[34c]"></a>USART3_set_STOP</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[34d]"></a>USART1_set_CLKEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[34e]"></a>USART2_set_CLKEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[34f]"></a>USART3_set_CLKEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[350]"></a>USART1_set_CPOL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[351]"></a>USART2_set_CPOL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[352]"></a>USART3_set_CPOL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[353]"></a>USART1_set_CPHA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[354]"></a>USART2_set_CPHA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[355]"></a>USART3_set_CPHA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[356]"></a>USART1_set_LBCL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[357]"></a>USART2_set_LBCL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[358]"></a>USART3_set_LBCL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[359]"></a>USART1_set_LBDIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[35a]"></a>USART2_set_LBDIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[35b]"></a>USART3_set_LBDIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[35c]"></a>USART1_set_LBDL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[35d]"></a>USART2_set_LBDL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[35e]"></a>USART3_set_LBDL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[35f]"></a>USART1_set_ADD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[4c2]"></a>USART1_get_ADD</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, base_usart.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>USART2_set_ADD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[4c3]"></a>USART2_get_ADD</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, base_usart.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>USART3_set_ADD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[4c4]"></a>USART3_get_ADD</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, base_usart.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>USART1_set_CTSIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[363]"></a>USART2_set_CTSIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[364]"></a>USART3_set_CTSIE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[365]"></a>USART1_set_CTSE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[366]"></a>USART2_set_CTSE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[367]"></a>USART3_set_CTSE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[368]"></a>USART1_set_RTSE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[369]"></a>USART2_set_RTSE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[36a]"></a>USART3_set_RTSE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[36b]"></a>USART1_set_DMAT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[36c]"></a>USART2_set_DMAT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[36d]"></a>USART3_set_DMAT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[36e]"></a>USART1_set_DMAR</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[36f]"></a>USART2_set_DMAR</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[370]"></a>USART3_set_DMAR</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[371]"></a>USART1_set_SCEN</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[372]"></a>USART2_set_SCEN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[373]"></a>USART3_set_SCEN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[374]"></a>USART1_set_NACK</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[375]"></a>USART2_set_NACK</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[376]"></a>USART3_set_NACK</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[377]"></a>USART1_set_HDSEL</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[378]"></a>USART2_set_HDSEL</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[379]"></a>USART3_set_HDSEL</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[37a]"></a>USART1_set_IRLP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[37b]"></a>USART2_set_IRLP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[37c]"></a>USART3_set_IRLP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[37d]"></a>USART1_set_IREN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[37e]"></a>USART2_set_IREN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[37f]"></a>USART3_set_IREN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[380]"></a>USART1_set_EIE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[381]"></a>USART2_set_EIE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[382]"></a>USART3_set_EIE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[383]"></a>USART1_set_GT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[384]"></a>USART2_set_GT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[385]"></a>USART3_set_GT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[386]"></a>USART1_set_PSC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[387]"></a>USART2_set_PSC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[388]"></a>USART3_set_PSC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[389]"></a>DAC_set_DMAEN2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[38a]"></a>DAC_set_MAMP2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[38b]"></a>DAC_set_WAVE2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[38c]"></a>DAC_set_TSEL2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>

<P><STRONG><a name="[38d]"></a>DAC_set_TEN2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[38e]"></a>DAC_set_BOFF2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[38f]"></a>DAC_set_EN2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[390]"></a>DAC_set_DMAEN1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DAC_set_DMAEN1 &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1
</UL>

<P><STRONG><a name="[391]"></a>DAC_set_MAMP1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3
</UL>

<P><STRONG><a name="[392]"></a>DAC_set_WAVE1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DAC_set_WAVE1 &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1
</UL>

<P><STRONG><a name="[393]"></a>DAC_set_TSEL1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2
</UL>

<P><STRONG><a name="[394]"></a>DAC_set_TEN1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DAC_set_TEN1 &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1
</UL>

<P><STRONG><a name="[395]"></a>DAC_set_BOFF1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DAC_set_BOFF1 &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1
</UL>

<P><STRONG><a name="[396]"></a>DAC_set_EN1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, base_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DAC_set_EN1 &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1
</UL>

<P><STRONG><a name="[397]"></a>DAC_set_SWTRIG2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[398]"></a>DAC_set_SWTRIG1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, base_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write_bit
</UL>

<P><STRONG><a name="[3c4]"></a>DAC_set_DHR1</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, base_dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_hold_handler
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_write_holding_data
</UL>

<P><STRONG><a name="[4c5]"></a>DAC_get_DHR1</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, base_dac.o(.text), UNUSED)

<P><STRONG><a name="[4c6]"></a>DAC_set_DHR2</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, base_dac.o(.text), UNUSED)

<P><STRONG><a name="[4c7]"></a>DAC_get_DHR2</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, base_dac.o(.text), UNUSED)

<P><STRONG><a name="[4c8]"></a>DAC_set_DHRxD</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, base_dac.o(.text), UNUSED)

<P><STRONG><a name="[4c9]"></a>DAC_get_DHRxD</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, base_dac.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>DAC_set_DALIM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode3
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode2
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1
</UL>

<P><STRONG><a name="[4ca]"></a>DAC_get_DOR2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_dac.o(.text), UNUSED)

<P><STRONG><a name="[4cb]"></a>DAC_get_DOR1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, base_dac.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>NVIC_enable_interrupt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, core_nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_enable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_ms
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_init_us
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_ms
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_init
</UL>

<P><STRONG><a name="[97]"></a>NVIC_disable_interrupt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, core_nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_disable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[4cc]"></a>NVIC_pending_interrupt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, core_nvic.o(.text), UNUSED)

<P><STRONG><a name="[4cd]"></a>NVIC_clear_pending</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, core_nvic.o(.text), UNUSED)

<P><STRONG><a name="[4ce]"></a>NVIC_get_PRIx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, core_nvic.o(.text), UNUSED)

<P><STRONG><a name="[410]"></a>NVIC_set_PRIx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_init
</UL>

<P><STRONG><a name="[399]"></a>ADC1_IN10_init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cnf_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADC1_IN10_init &rArr; GPIO_configure &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_SQRx
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_L
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_SMPx
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_ADON
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_CONT
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_CAL
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_CAL
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_get_RSTCAL
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_RSTCAL
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_DMA
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_ALIGN
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPxEN
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADC1EN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_init
</UL>

<P><STRONG><a name="[b3]"></a>ADC1_start_conversion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cnf_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC1_start_conversion &rArr; ADC1_set_ADON &rArr; __write_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_set_ADON
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[39a]"></a>TIM1_init_us</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cnf_atime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM1_init_us &rArr; TIM1_set_SMS &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_REP
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ARR
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_PSC
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CNT
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_SMS
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CEN
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_URS
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_DIR
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_UIE
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM1EN
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_init
</UL>

<P><STRONG><a name="[39f]"></a>TIM1_init_ms</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_REP
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ARR
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_PSC
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CNT
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_SMS
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CEN
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_URS
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_DIR
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_UIE
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM1EN
</UL>

<P><STRONG><a name="[3a0]"></a>TIM1_CH1_generate_pwm</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_MOE
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCR1
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_REP
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ARR
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_PSC
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1E
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1P
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1NE
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1NP
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC1PE
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC1M
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC1CE
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC1S
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_SMS
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CEN
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_DIR
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM1EN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
</UL>

<P><STRONG><a name="[3a2]"></a>TIM1_CH1_set_pwm_duty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCR1
</UL>

<P><STRONG><a name="[3a3]"></a>TIM1_CH2_generate_pwm</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_MOE
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCR2
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_REP
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ARR
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_PSC
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2E
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2P
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2NE
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2NP
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC2PE
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC2M
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC2CE
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC2S
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_SMS
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CEN
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_DIR
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM1EN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
</UL>

<P><STRONG><a name="[3a5]"></a>TIM1_CH2_set_pwm_duty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCR2
</UL>

<P><STRONG><a name="[3a6]"></a>TIM1_CH3_generate_pwm</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_MOE
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCR3
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_REP
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ARR
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_PSC
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3E
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3P
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3NE
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3NP
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC3PE
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC3M
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC3CE
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC3S
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_SMS
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CEN
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_DIR
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM1EN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
</UL>

<P><STRONG><a name="[3a8]"></a>TIM1_CH3_set_pwm_duty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCR3
</UL>

<P><STRONG><a name="[3a9]"></a>TIM1_CH4_generate_pwm</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_MOE
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCR4
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_REP
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ARR
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_PSC
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4E
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4P
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC4PE
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC4M
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_OC4CE
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CC4S
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_SMS
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CEN
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_DIR
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM1EN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
</UL>

<P><STRONG><a name="[3ab]"></a>TIM1_CH4_set_pwm_duty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_CCR4
</UL>

<P><STRONG><a name="[3ac]"></a>TIM8_init_us</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_REP
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ARR
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_PSC
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CNT
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_UIE
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_SMS
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CEN
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_URS
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_DIR
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM8EN
</UL>

<P><STRONG><a name="[3b1]"></a>TIM8_init_ms</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_REP
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ARR
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_PSC
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CNT
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_UIE
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_SMS
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CEN
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_URS
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_DIR
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM8EN
</UL>

<P><STRONG><a name="[3b2]"></a>TIM8_CH1_generate_pwm</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_MOE
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCR1
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_REP
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ARR
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_PSC
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1E
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1P
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1NE
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1NP
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC1PE
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC1M
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC1CE
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC1S
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_SMS
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CEN
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_DIR
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPCEN
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM8EN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
</UL>

<P><STRONG><a name="[3b4]"></a>TIM8_CH1_set_pwm_duty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCR1
</UL>

<P><STRONG><a name="[3b5]"></a>TIM8_CH2_generate_pwm</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_MOE
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCR2
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_REP
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ARR
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_PSC
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2E
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2P
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2NE
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2NP
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC2PE
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC2M
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC2CE
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC2S
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_SMS
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CEN
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_DIR
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPCEN
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM8EN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
</UL>

<P><STRONG><a name="[3b7]"></a>TIM8_CH2_set_pwm_duty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCR2
</UL>

<P><STRONG><a name="[3b8]"></a>TIM8_CH3_generate_pwm</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_MOE
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCR3
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_REP
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ARR
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_PSC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3E
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3P
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3NE
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3NP
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC3PE
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC3M
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC3CE
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC3S
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_SMS
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CEN
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_DIR
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPCEN
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM8EN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
</UL>

<P><STRONG><a name="[3ba]"></a>TIM8_CH3_set_pwm_duty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCR3
</UL>

<P><STRONG><a name="[3bb]"></a>TIM8_CH4_generate_pwm</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_MOE
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCR4
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_REP
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_ARR
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_PSC
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4E
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4P
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC4PE
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC4M
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_OC4CE
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CC4S
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_SMS
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CEN
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_DIR
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPCEN
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_TIM8EN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
</UL>

<P><STRONG><a name="[3bd]"></a>TIM8_CH4_set_pwm_duty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf_atime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_set_CCR4
</UL>

<P><STRONG><a name="[3be]"></a>DMA1_CH1_init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cnf_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DMA1_CH1_init &rArr; DMA1_set_PSIZE &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_PINC
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_MINC
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_PSIZE
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_MSIZE
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_PL
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_MA
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_EN
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_DMA1EN
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_PA
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_NDT
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_TCIE
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_HTIE
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_DIR
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_set_CIRC
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_init
</UL>

<P><STRONG><a name="[be]"></a>RCC_init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, cnf_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RCC_init &rArr; RCC_set_SW &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_SW
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HPRE
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PPRE1
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PPRE2
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_ADCPRE
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLSRC
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLXTPRE
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLMUL
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSION
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_HSIRDY
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_HSEON
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_PLLON
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_get_PLLRDY
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3c1]"></a>DAC_cnf_mode1</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, cnf_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DAC_cnf_mode1 &rArr; GPIO_configure &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DALIM
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_EN1
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_BOFF1
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TEN1
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_WAVE1
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DMAEN1
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_DACEN
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_init
</UL>

<P><STRONG><a name="[3c3]"></a>DAC_cnf_write_holding_data</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cnf_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DHR1
</UL>

<P><STRONG><a name="[3c5]"></a>DAC_cnf_mode2</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, cnf_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DALIM
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_EN1
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_BOFF1
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TEN1
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TSEL1
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_WAVE1
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DMAEN1
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_DACEN
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
</UL>

<P><STRONG><a name="[3c6]"></a>DAC_cnf_mode3</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cnf_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DALIM
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_EN1
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_BOFF1
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TEN1
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_TSEL1
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_WAVE1
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_MAMP1
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DMAEN1
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_DACEN
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
</UL>

<P><STRONG><a name="[3c7]"></a>LED_turn_state</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_turn_state
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_port
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_on_all
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_off_all
</UL>

<P><STRONG><a name="[c2]"></a>LED_turn_off_all</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_turn_off_all &rArr; LED_turn_state
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_state
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[bf]"></a>LED_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LED_init &rArr; GPIO_configure &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_off_all
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPxEN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c0]"></a>LED_turn_on_all</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_turn_on_all &rArr; LED_turn_state
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_turn_state
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b4]"></a>LED_turn_on_LED1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LED_turn_on_LED1 &rArr; GPIO_send_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>LED_turn_on_LED2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LED_turn_on_LED2 &rArr; GPIO_send_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>LED_turn_on_LED3</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LED_turn_on_LED3 &rArr; GPIO_send_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[3ca]"></a>LED_turn_on_LED4</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin
</UL>

<P><STRONG><a name="[bd]"></a>LED_turn_off_LED1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LED_turn_off_LED1 &rArr; GPIO_send_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
</UL>

<P><STRONG><a name="[3cb]"></a>LED_turn_off_LED2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin
</UL>

<P><STRONG><a name="[3cc]"></a>LED_turn_off_LED3</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin
</UL>

<P><STRONG><a name="[3cd]"></a>LED_turn_off_LED4</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin
</UL>

<P><STRONG><a name="[94]"></a>BEEP_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BEEP_init &rArr; GPIO_configure &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LENFIEN_copyright
</UL>

<P><STRONG><a name="[95]"></a>BEEP_start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BEEP_start &rArr; GPIO_send_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LENFIEN_copyright
</UL>

<P><STRONG><a name="[3ce]"></a>BEEP_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, beep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin
</UL>

<P><STRONG><a name="[3cf]"></a>ADS7483_interrupt_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ads7483_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADS7483_interrupt_init &rArr; GPIO_configure &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_EXTI_set_entry
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPxEN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_FTRx
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_RTRx
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_set_IMRx
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_init
</UL>

<P><STRONG><a name="[3d0]"></a>ADS7483_port_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ads7483_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADS7483_port_init &rArr; GPIO_configure &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPxEN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_init
</UL>

<P><STRONG><a name="[8d]"></a>ADS7483_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ads7483_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADS7483_init &rArr; ADS7483_port_init &rArr; GPIO_configure &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_port_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LENFIEN_copyright
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d1]"></a>ADS7483_send_command</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ads7483_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADS7483_send_command &rArr; GPIO_send_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_coordinate
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_exact_coordinate
</UL>

<P><STRONG><a name="[3d2]"></a>ADS7483_receive_data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ads7483_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADS7483_receive_data &rArr; GPIO_send_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_receive_pin
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_coordinate
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_exact_coordinate
</UL>

<P><STRONG><a name="[3d4]"></a>ADS7483_conversion</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, ads7483_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADS7483_conversion &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_coordinate
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_exact_coordinate
</UL>

<P><STRONG><a name="[3d7]"></a>ADS7483_get_exact_coordinate</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ads7483_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADS7483_get_exact_coordinate &rArr; ADS7483_conversion &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_receive_pin
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_conversion
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_receive_data
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_BUTTON_update_state
</UL>

<P><STRONG><a name="[3d9]"></a>ADS7483_point_filter</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ads7483_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADS7483_point_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_coordinate
</UL>

<P><STRONG><a name="[3d8]"></a>ADS7483_get_coordinate</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, ads7483_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADS7483_get_coordinate &rArr; ADS7483_conversion &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_receive_pin
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_point_filter
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_conversion
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_receive_data
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_update_state
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_BUTTON_execute_handler
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_scan_button
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_display_touch_coordinate
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_draw_line
</UL>

<P><STRONG><a name="[ae]"></a>ADS7483_update_state</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ads7483_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ADS7483_update_state &rArr; ADS7483_get_coordinate &rArr; ADS7483_conversion &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_receive_pin
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_coordinate
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[3da]"></a>ADS7483_interrupt_draw_line</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ads7483_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ADS7483_interrupt_draw_line &rArr; LCD_draw_line &rArr; LCD_draw_point &rArr; SSD1289_set_point
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_point
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_coordinate
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_process
</UL>

<P><STRONG><a name="[3dd]"></a>ADS7483_interrupt_display_touch_coordinate</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, ads7483_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ADS7483_interrupt_display_touch_coordinate &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_pre_print
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_coordinate
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_process
</UL>

<P><STRONG><a name="[af]"></a>ADS7483_interrupt_process</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ads7483_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ADS7483_interrupt_process &rArr; ADS7483_interrupt_display_touch_coordinate &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_display_touch_coordinate
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_draw_line
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[3df]"></a>ADS7483_test</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ads7483_base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
</UL>

<P><STRONG><a name="[3e0]"></a>ADS7483_interrupt_scan_button</STRONG> (Thumb, 10 bytes, Stack size 16 bytes, ads7483_base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_coordinate
</UL>

<P><STRONG><a name="[3e1]"></a>ADS7483_BUTTON_update_state</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, ads7483_button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADS7483_BUTTON_update_state &rArr; ADS7483_get_exact_coordinate &rArr; ADS7483_conversion &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_exact_coordinate
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_update_states
</UL>

<P><STRONG><a name="[3e2]"></a>ADS7483_BUTTON_execute_handler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ads7483_button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ADS7483_BUTTON_execute_handler &rArr; ADS7483_get_coordinate &rArr; ADS7483_conversion &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_get_coordinate
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_execute_handlers
</UL>

<P><STRONG><a name="[3e3]"></a>SSD1289_pins_init</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, ssd1289_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSD1289_pins_init &rArr; GPIO_configure &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_AFIOEN
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPAEN
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPBEN
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPDEN
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPEEN
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_IOPGEN
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_set_FSMCEN
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_init
</UL>

<P><STRONG><a name="[3e4]"></a>SSD1289_FSMC_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ssd1289_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SSD1289_FSMC_init &rArr; FSMC_NORPSRAM4_set_ADDSET &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_ADDSET
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_DATAST
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_BUSTURN
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_ACCMOD
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_MBKEN
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_MUXEN
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_MTYP
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_MWID
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_BURSTEN
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WAITPOL
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WRAPMOD
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WAITCFG
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WREN
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_WAITEN
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORPSRAM4_set_EXTMOD
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_init
</UL>

<P><STRONG><a name="[3e5]"></a>SSD1289_internal_init</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, ssd1289_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSD1289_internal_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_init
</UL>

<P><STRONG><a name="[3e7]"></a>SSD1289_set_point</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ssd1289_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSD1289_set_point
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_rectangle
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_SSD1289_draw_font
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_font_left_align
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_font_right_align
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_font_8_16
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_bitmap_65K
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_bitmap_262K
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_clear_screen
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_point
</UL>

<P><STRONG><a name="[3e8]"></a>SSD1289_set_GDDRAM_position</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ssd1289_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_get_point
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_full_window
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_window
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_clear_screen
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_point
</UL>

<P><STRONG><a name="[3e9]"></a>SSD1289_clear_screen</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ssd1289_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SSD1289_clear_screen &rArr; SSD1289_set_point
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_GDDRAM_position
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_point
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_show_dialog_box
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXAM_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtHandler_drawLine
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtHandler_touchTest
</UL>

<P><STRONG><a name="[8c]"></a>SSD1289_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ssd1289_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSD1289_init &rArr; SSD1289_pins_init &rArr; GPIO_configure &rArr; __set_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_send_pin
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_clear_screen
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_internal_init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_FSMC_init
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_pins_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LENFIEN_copyright
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ea]"></a>SSD1289_get_point</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ssd1289_base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_get_point
</UL>

<P><STRONG><a name="[3ec]"></a>SSD1289_set_window</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, ssd1289_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_GDDRAM_position
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_rectangle
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_SSD1289_draw_font
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_font_left_align
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_font_right_align
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_font_8_16
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_bitmap_65K
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_bitmap_262K
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_full_window
</UL>

<P><STRONG><a name="[3ed]"></a>SSD1289_set_full_window</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ssd1289_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_window
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_GDDRAM_position
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_rectangle
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_SSD1289_draw_font
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_font_left_align
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_font_right_align
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_font_8_16
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_bitmap_65K
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_bitmap_262K
</UL>

<P><STRONG><a name="[3ee]"></a>SSD1289_draw_bitmap_262K</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ssd1289_base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_full_window
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_window
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_point
</UL>

<P><STRONG><a name="[3ef]"></a>SSD1289_draw_bitmap_65K</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, ssd1289_base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_full_window
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_window
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_point
</UL>

<P><STRONG><a name="[3f0]"></a>SSD1289_draw_font_8_16</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, ssd1289_base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_full_window
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_window
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_point
</UL>

<P><STRONG><a name="[3f1]"></a>SSD1289_draw_font_right_align</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, ssd1289_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_full_window
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_window
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_point
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_print_char
</UL>

<P><STRONG><a name="[3f2]"></a>SSD1289_draw_font_left_align</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, ssd1289_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SSD1289_draw_font_left_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_full_window
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_window
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_point
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_print_char
</UL>

<P><STRONG><a name="[4cf]"></a>LCD_window_test</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ssd1289_base.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>LCD_draw_moving_rectangle</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ssd1289_base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_rectangle
</UL>

<P><STRONG><a name="[3f5]"></a>_LCD_SSD1289_draw_font</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, ssd1289_base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_full_window
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_window
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_point
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_big_to_small
</UL>

<P><STRONG><a name="[3f6]"></a>LCD_big_to_small</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, ssd1289_base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_SSD1289_draw_font
</UL>

<P><STRONG><a name="[4d0]"></a>LCD_set_lineSpacing</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ssd1289_configure.o(.text), UNUSED)

<P><STRONG><a name="[4d1]"></a>LCD_set_rowSpacing</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ssd1289_configure.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>LCD_set_font_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssd1289_configure.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_button
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_update_UI
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LENFIEN_draw_logo
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_show_dialog_box
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_release_effect
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_press_effect
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_draw_UI
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_BtnAdd_hold_handler
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_BtnSub_hold_handler
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_pre_print
</UL>

<P><STRONG><a name="[3fc]"></a>LCD_set_font_backColor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssd1289_configure.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_button
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_show_dialog_box
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_release_effect
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_press_effect
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_pre_print
</UL>

<P><STRONG><a name="[4d2]"></a>LCD_set_font</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssd1289_configure.o(.text), UNUSED)

<P><STRONG><a name="[4d3]"></a>LCD_set_screen_backColor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssd1289_configure.o(.text), UNUSED)

<P><STRONG><a name="[3f7]"></a>LCD_print_char</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ssd1289_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_font_info
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_font_left_align
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_draw_font_right_align
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_print_string
</UL>

<P><STRONG><a name="[3f9]"></a>LCD_print_string</STRONG> (Thumb, 312 bytes, Stack size 72 bytes, ssd1289_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_lib_info
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_font_info
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_print_char
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_pre_print
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_printf
</UL>

<P><STRONG><a name="[92]"></a>LCD_printf</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, ssd1289_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_print_string
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_button
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_update_UI
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LENFIEN_draw_logo
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_show_dialog_box
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LENFIEN_copyright
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_btn2_hold_handler
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_btn2_click_handler
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_btn1_hold_handler
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_btn1_click_handler
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_release_effect
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_press_effect
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_draw_UI
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_BtnAdd_hold_handler
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_BtnSub_hold_handler
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_test
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_display_touch_coordinate
</UL>

<P><STRONG><a name="[3de]"></a>LCD_clear_pre_print</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ssd1289_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LCD_clear_pre_print &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_font_color
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_print_string
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_font_backColor
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_display_touch_coordinate
</UL>

<P><STRONG><a name="[3dc]"></a>LCD_draw_point</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ssd1289_graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_draw_point &rArr; SSD1289_set_point
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_GDDRAM_position
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_point
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD1289_graphic_test
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_draw_line
</UL>

<P><STRONG><a name="[3fd]"></a>LCD_get_point</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ssd1289_graphic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_get_point
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_GDDRAM_position
</UL>

<P><STRONG><a name="[3f4]"></a>LCD_draw_rectangle</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ssd1289_graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_draw_rectangle &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_full_window
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_window
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_point
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_button
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_show_dialog_box
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_release_effect
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_press_effect
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_draw_UI
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_draw_UI
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_draw_slider
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_moving_rectangle
</UL>

<P><STRONG><a name="[3db]"></a>LCD_draw_line</STRONG> (Thumb, 496 bytes, Stack size 72 bytes, ssd1289_graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_draw_line &rArr; LCD_draw_point &rArr; SSD1289_set_point
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_point
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_update_UI
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_show_dialog_box
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_draw_UI
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD1289_graphic_test
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_empty_rectangle
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_display_touch_coordinate
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_interrupt_draw_line
</UL>

<P><STRONG><a name="[401]"></a>LCD_draw_empty_rectangle</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ssd1289_graphic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
</UL>

<P><STRONG><a name="[402]"></a>LCD_SSD1289_graphic_test</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ssd1289_graphic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_point
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
</UL>

<P><STRONG><a name="[403]"></a>DAConverter_draw_slider</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, daconverter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DAConverter_draw_slider &rArr; LCD_draw_rectangle &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_rectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_update_slider
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_release_handler
</UL>

<P><STRONG><a name="[404]"></a>DAConverter_release_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, daconverter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DAConverter_release_handler &rArr; DAConverter_draw_slider &rArr; LCD_draw_rectangle &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_draw_slider
</UL>
<BR>[Address Reference Count : 1]<UL><LI> daconverter.o(.text)
</UL>
<P><STRONG><a name="[405]"></a>DAConverter_update_slider</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, daconverter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DAConverter_update_slider &rArr; DAConverter_draw_slider &rArr; LCD_draw_rectangle &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_draw_slider
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_hold_handler
</UL>

<P><STRONG><a name="[406]"></a>DAConverter_hold_handler</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, daconverter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DAConverter_hold_handler &rArr; DAConverter_update_slider &rArr; DAConverter_draw_slider &rArr; LCD_draw_rectangle &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DHR1
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_update_slider
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> daconverter.o(.text)
</UL>
<P><STRONG><a name="[407]"></a>DAConverter_click_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, daconverter.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> daconverter.o(.text)
</UL>
<P><STRONG><a name="[408]"></a>DAConverter_draw_UI</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, daconverter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = DAConverter_draw_UI &rArr; BUTTON_draw_button &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_rectangle
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_button
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_create_button
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_init
</UL>

<P><STRONG><a name="[40b]"></a>DAConverter_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, daconverter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = DAConverter_init &rArr; DAConverter_draw_UI &rArr; BUTTON_draw_button &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_set_DHR1
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_draw_UI
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_cnf_mode1
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXAM_init
</UL>

<P><STRONG><a name="[40c]"></a>BUTTON_BtnSub_hold_handler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, adconverter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = BUTTON_BtnSub_hold_handler &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ARR
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_font_color
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adconverter.o(.text)
</UL>
<P><STRONG><a name="[40d]"></a>BUTTON_BtnAdd_hold_handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, adconverter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = BUTTON_BtnAdd_hold_handler &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_set_ARR
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_font_color
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adconverter.o(.text)
</UL>
<P><STRONG><a name="[40e]"></a>ADConverter_draw_UI</STRONG> (Thumb, 942 bytes, Stack size 40 bytes, adconverter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ADConverter_draw_UI &rArr; BUTTON_draw_button &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_rectangle
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_button
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_create_button
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_font_color
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_init
</UL>

<P><STRONG><a name="[40f]"></a>ADConverter_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, adconverter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ADConverter_init &rArr; ADConverter_draw_UI &rArr; BUTTON_draw_button &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_init_us
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IN10_init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_set_PRIx
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_draw_UI
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXAM_init
</UL>

<P><STRONG><a name="[ab]"></a>ADConverter_record_ADValue</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, adconverter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADConverter_record_ADValue &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[412]"></a>ADConverter_AD2COR</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, adconverter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADConverter_AD2COR &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_update_UI
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_get_voltage
</UL>

<P><STRONG><a name="[414]"></a>ADConverter_get_voltage</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, adconverter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ADConverter_get_voltage &rArr; ADConverter_AD2COR &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_AD2COR
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_update_UI
</UL>

<P><STRONG><a name="[4d4]"></a>ADConverter_get_cycle</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, adconverter.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>ADConverter_update_UI</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, adconverter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ADConverter_update_UI &rArr; LENFIEN_logo_animation &rArr; LENFIEN_draw_logo &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_font_color
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LENFIEN_logo_animation
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_get_voltage
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_AD2COR
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[416]"></a>EXAM_delete_button</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, exam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXAM_delete_button &rArr; BTNLIST_delete_button &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTNLIST_delete_button
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXAM_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtHandler_drawLine
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtHandler_touchTest
</UL>

<P><STRONG><a name="[418]"></a>BtHandler_touchTest</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BtHandler_touchTest &rArr; EXAM_delete_button &rArr; BTNLIST_delete_button &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXAM_delete_button
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_clear_screen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exam.o(.text)
</UL>
<P><STRONG><a name="[419]"></a>BtHandler_drawLine</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BtHandler_drawLine &rArr; EXAM_delete_button &rArr; BTNLIST_delete_button &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXAM_delete_button
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_clear_screen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exam.o(.text)
</UL>
<P><STRONG><a name="[41a]"></a>BtHandler_adConverter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exam.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> exam.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>EXAM_init</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, exam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = EXAM_init &rArr; WINDOW_show_dialog_box &rArr; BUTTON_draw_button &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_button
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_create_button
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_show_dialog_box
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXAM_delete_button
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_init
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_init
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_clear_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f8]"></a>FONT_get_font_info</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, font_operation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FONT_get_font_info &rArr; FONT_interface_ascii_YAHEI_get_font &rArr; FONT_get_width
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_interface_ascii_YAHEI_get_font
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_interface_ascii_8x16_get_font
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_interface_ascii_10x19_get_font
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_char_high
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_char_width
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_string_width
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_print_string
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_print_char
</UL>

<P><STRONG><a name="[3fa]"></a>FONT_get_lib_info</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, font_operation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FONT_get_lib_info
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_interface_ascii_YAHEI_get_lib
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_interface_ascii_8x16_get_lib
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_interface_ascii_10x19_get_lib
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_button
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_release_effect
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_press_effect
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_print_string
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_printf
</UL>

<P><STRONG><a name="[426]"></a>FONT_get_width</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, font_operation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FONT_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_interface_ascii_YAHEI_get_font
</UL>

<P><STRONG><a name="[421]"></a>FONT_get_string_width</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, font_operation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FONT_get_string_width &rArr; FONT_get_font_info &rArr; FONT_interface_ascii_YAHEI_get_font &rArr; FONT_get_width
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_font_info
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_button
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_release_effect
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_press_effect
</UL>

<P><STRONG><a name="[422]"></a>FONT_get_char_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, font_operation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_font_info
</UL>

<P><STRONG><a name="[423]"></a>FONT_get_char_high</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, font_operation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_font_info
</UL>

<P><STRONG><a name="[424]"></a>FONT_printf</STRONG> (Thumb, 118 bytes, Stack size 168 bytes, font_operation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_lib_info
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_print_string
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_test
</UL>

<P><STRONG><a name="[425]"></a>FONT_test</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, font_operation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_printf
</UL>

<P><STRONG><a name="[41b]"></a>FONT_interface_ascii_8x16_get_font</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, font_lib_ascii_8_16.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_font_info
</UL>

<P><STRONG><a name="[41e]"></a>FONT_interface_ascii_8x16_get_lib</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, font_lib_ascii_8_16.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_lib_info
</UL>

<P><STRONG><a name="[41c]"></a>FONT_interface_ascii_10x19_get_font</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, font_lib_ascii_10_19.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_font_info
</UL>

<P><STRONG><a name="[41f]"></a>FONT_interface_ascii_10x19_get_lib</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, font_lib_ascii_10_19.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_lib_info
</UL>

<P><STRONG><a name="[41d]"></a>FONT_interface_ascii_YAHEI_get_font</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, font_lib_ascii_yahei.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FONT_interface_ascii_YAHEI_get_font &rArr; FONT_get_width
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_font_info
</UL>

<P><STRONG><a name="[420]"></a>FONT_interface_ascii_YAHEI_get_lib</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, font_lib_ascii_yahei.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_lib_info
</UL>

<P><STRONG><a name="[427]"></a>BUTTON_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BUTTON_init &rArr; BTNLIST_create_list &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTNLIST_create_list
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_button
</UL>

<P><STRONG><a name="[409]"></a>BUTTON_create_button</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BUTTON_create_button &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_show_dialog_box
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXAM_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_test
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_draw_UI
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_draw_UI
</UL>

<P><STRONG><a name="[40a]"></a>BUTTON_draw_button</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = BUTTON_draw_button &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_rectangle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_font_color
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTNLIST_insert_button
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_init
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_string_width
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_lib_info
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_font_backColor
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_show_dialog_box
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXAM_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_test
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_draw_UI
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_draw_UI
</UL>

<P><STRONG><a name="[42c]"></a>BUTTON_draw_press_effect</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = BUTTON_draw_press_effect &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_rectangle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_font_color
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_string_width
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_lib_info
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_font_backColor
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_update_press_effect
</UL>

<P><STRONG><a name="[42d]"></a>BUTTON_draw_release_effect</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = BUTTON_draw_release_effect &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_rectangle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_font_color
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_string_width
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_get_lib_info
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_font_backColor
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_update_press_effect
</UL>

<P><STRONG><a name="[42e]"></a>BUTTON_update_press_effect</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = BUTTON_update_press_effect &rArr; BUTTON_draw_release_effect &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_release_effect
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_press_effect
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_update_press_effects
</UL>

<P><STRONG><a name="[42f]"></a>BUTTON_update_states</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BUTTON_update_states &rArr; ADS7483_BUTTON_update_state &rArr; ADS7483_get_exact_coordinate &rArr; ADS7483_conversion &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_BUTTON_update_state
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_process
</UL>

<P><STRONG><a name="[430]"></a>BUTTON_update_press_effects</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = BUTTON_update_press_effects &rArr; BUTTON_update_press_effect &rArr; BUTTON_draw_release_effect &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_update_press_effect
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_execute_handlers
</UL>

<P><STRONG><a name="[431]"></a>BUTTON_execute_handlers</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = BUTTON_execute_handlers &rArr; BUTTON_update_press_effects &rArr; BUTTON_update_press_effect &rArr; BUTTON_draw_release_effect &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_update_press_effects
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_BUTTON_execute_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_process
</UL>

<P><STRONG><a name="[b0]"></a>BUTTON_process</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = BUTTON_process &rArr; BUTTON_execute_handlers &rArr; BUTTON_update_press_effects &rArr; BUTTON_update_press_effect &rArr; BUTTON_draw_release_effect &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_execute_handlers
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_update_states
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[432]"></a>BUTTON_btn1_click_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = BUTTON_btn1_click_handler &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.text)
</UL>
<P><STRONG><a name="[433]"></a>BUTTON_btn1_hold_handler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = BUTTON_btn1_hold_handler &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.text)
</UL>
<P><STRONG><a name="[434]"></a>BUTTON_btn2_click_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = BUTTON_btn2_click_handler &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.text)
</UL>
<P><STRONG><a name="[435]"></a>BUTTON_btn2_hold_handler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = BUTTON_btn2_hold_handler &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.text)
</UL>
<P><STRONG><a name="[436]"></a>BUTTON_test</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_button
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_create_button
</UL>

<P><STRONG><a name="[428]"></a>BTNLIST_create_list</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, button_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BTNLIST_create_list &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_init
</UL>

<P><STRONG><a name="[42b]"></a>BTNLIST_insert_button</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, button_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BTNLIST_insert_button &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_button
</UL>

<P><STRONG><a name="[417]"></a>BTNLIST_delete_button</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, button_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BTNLIST_delete_button &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_delete_button
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXAM_delete_button
</UL>

<P><STRONG><a name="[438]"></a>WINDOW_delete_button</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, windows.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WINDOW_delete_button &rArr; BTNLIST_delete_button &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTNLIST_delete_button
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_show_dialog_box
</UL>

<P><STRONG><a name="[43b]"></a>WINDOW_btnHandler_ok</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, windows.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> windows.o(.text)
</UL>
<P><STRONG><a name="[43a]"></a>WINDOW_btnHandler_no</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, windows.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> windows.o(.text)
</UL>
<P><STRONG><a name="[439]"></a>WINDOW_btnHandler_yes</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, windows.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> windows.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>WINDOW_show_dialog_box</STRONG> (Thumb, 736 bytes, Stack size 56 bytes, windows.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = WINDOW_show_dialog_box &rArr; BUTTON_draw_button &rArr; LCD_printf &rArr; LCD_print_string &rArr; LCD_print_char &rArr; SSD1289_draw_font_right_align &rArr; SSD1289_set_full_window &rArr; SSD1289_set_window &rArr; SSD1289_set_GDDRAM_position
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_rectangle
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_draw_button
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_create_button
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_font_color
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_delete_button
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_font_backColor
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_clear_screen
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LENFIEN_copyright
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXAM_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d5]"></a>WINDOW_test</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, windows.o(.text), UNUSED)

<P><STRONG><a name="[429]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_create_button
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTNLIST_insert_button
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTNLIST_create_list
</UL>

<P><STRONG><a name="[437]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTNLIST_delete_button
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[3fb]"></a>__c89vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FONT_printf
</UL>

<P><STRONG><a name="[61]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[442]"></a>__printf</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[86]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LENFIEN_copyright
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[42a]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_create_button
</UL>

<P><STRONG><a name="[4d6]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[43c]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4d7]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[4d8]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[43d]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[447]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[7b]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[449]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[44b]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[44c]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[43f]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[440]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[44a]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[441]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[59]"></a>_printf_charcount</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[4d9]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[453]"></a>_printf_fp_dec_real</STRONG> (Thumb, 626 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[43e]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[50]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c89vsprintf.o(.text)
</UL>
<P><STRONG><a name="[456]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[69]"></a>_printf_longlong_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[458]"></a>_printf_longlong_oct</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[65]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[6d]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[459]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[67]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[6f]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[5b]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[4da]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[45f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4db]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[446]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[452]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[455]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[45a]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[71]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[73]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[45b]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[75]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[77]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[44e]"></a>_btod_etento</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[457]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[448]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[8a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[4dc]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4dd]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4de]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[45c]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[45e]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[45d]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[468]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[461]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[462]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[47d]"></a>__rt_fp_status_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[44f]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[464]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[463]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[465]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[466]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[450]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[451]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[467]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[454]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[443]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[80]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[52]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[415]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_get_voltage
</UL>

<P><STRONG><a name="[469]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[46e]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[3d6]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_conversion
</UL>

<P><STRONG><a name="[46c]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4df]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[46d]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[472]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[3d5]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_get_voltage
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_conversion
</UL>

<P><STRONG><a name="[46f]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[46b]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[470]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[312]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_div
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div
</UL>

<P><STRONG><a name="[471]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[311]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_update_UI
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_div
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_get_voltage
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_conversion
</UL>

<P><STRONG><a name="[473]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[313]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_div
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_div
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_div
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_div
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
</UL>

<P><STRONG><a name="[475]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[47b]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[316]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_record_ADValue
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_div
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_div
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_div
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_get_voltage
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_AD2COR
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_hold_handler
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_conversion
</UL>

<P><STRONG><a name="[477]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[30d]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_record_ADValue
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_div
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
</UL>

<P><STRONG><a name="[478]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[3fe]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_AD2COR
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_hold_handler
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
</UL>

<P><STRONG><a name="[479]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[30e]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_record_ADValue
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_get_div
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_div
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_get_div
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_get_div
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_get_voltage
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_AD2COR
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_hold_handler
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7483_conversion
</UL>

<P><STRONG><a name="[4e0]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[411]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_record_ADValue
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_AD2COR
</UL>

<P><STRONG><a name="[4e1]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[400]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
</UL>

<P><STRONG><a name="[47a]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[47f]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[310]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_record_ADValue
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_div
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_AD2COR
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAConverter_hold_handler
</UL>

<P><STRONG><a name="[47c]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[474]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[79]"></a>_fp_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[4e2]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[46a]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[3ff]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
</UL>

<P><STRONG><a name="[47e]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[30f]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_set_div
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_set_div
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_set_div
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_get_voltage
</UL>

<P><STRONG><a name="[480]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[413]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConverter_AD2COR
</UL>

<P><STRONG><a name="[482]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[5d]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[4e3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3e6]"></a>SSD1289_send_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssd1289_base.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_window
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_GDDRAM_position
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_set_point
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_internal_init
</UL>

<P><STRONG><a name="[3eb]"></a>SSD1289_get_data</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssd1289_base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1289_get_point
</UL>

<P><STRONG><a name="[481]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[476]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[44d]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[51]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
