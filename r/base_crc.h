


/*
	此模块定义了Cyclic redundancy Check 循环冗余检测的寄存器及其所有操作
*/


/*
	Cyclic Redundancy Check	Introduce
	RCR用于计算一个32位数的冗余码，通过写入之后的读取即可得到。
*/

#ifndef __CRC
#define __CRC

#include "core_map.h"
#include "com.h"

/*
	CRC用来计算数据的循环冗余检验结果，每次计算需要4个AHB周期。
	每进入一个数，计算一次，再进来的数将根据上一个的计算结果合并计算
	所以可连续写入数据，最后再读取结果。
	详细配置方法见:Configure_CRC.c中定义的函数
*/


//
#define	__CRC_DR	(CRC_BASE + 0x00000000)
#define __CRC_IDR	(CRC_BASE + 0x00000004)
#define __CRC_CR	(CRC_BASE + 0x00000008)

//Address
#define _CRC_DR		ADR(__CRC_DR)
#define _CRC_IDR	ADR(__CRC_IDR)
#define _CRC_CR		ADR(__CRC_CR)

//Value
#define CRC_DR		VAL(__CRC_DR)
#define CRC_IDR		VAL(__CRC_IDR)
#define CRC_CR		VAL(__CRC_CR)


//*********************Data register (CRC_DR)******************//
/*
Data register (CRC_DR)
Address offset: 0x00
Reset value: 0xFFFF FFFF
*/

/*
Bits 31:0 Data register bits
Used as an input register when writing new data into the CRC calculator.
Holds the previous CRC calculation result when it is read.
*/
void CRC_set_DR(U32 data);

#define CRC_set_value(data)		CRC_set_DR(data)   //设置将被计算的值

U32	CRC_get_DR(void);

#define CRC_get_result()		CRC_get_DR()	// 获得计算结果

//******************Independent data register (CRC_IDR)********//
/*
Independent data register (CRC_IDR)
Address offset: 0x04
Reset value: 0x0000 0000
*/

/*
Bits 7:0 General-purpose 8-bit data register bits
Can be used as a temporary storage location for one byte.
This register is not affected by CRC resets generated by the RESET bit in the CRC_CR 
register.
*/

//设置临时值
void CRC_set_IDR(U8 data);

#define CRC_set_temporary_value(data) 	CRC_set_IDR(data)	//设置临时值


//获得临时值
U8	CRC_get_IDR(void);

#define CRC_get_temporary_value()		CRC_get_IDR()		//获得临时值



//*****************Control register (CRC_CR)***********************//
/*
Control register (CRC_CR)
Address offset: 0x08
Reset value: 0x0000 0000
*/
/*
复位
Bit 0 RESET bit
Resets the CRC calculation unit and sets the data register to FFFF FFFFh.
This bit can only be set, it is automatically cleared by hardware.
*/
void CRC_set_RESET(void);


#define CRC_reset()		CRC_set_RESET()		//复位CRC模块


#endif


